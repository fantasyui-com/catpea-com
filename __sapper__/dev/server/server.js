'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var sirv = _interopDefault(require('sirv'));
var polka = _interopDefault(require('polka'));
var compression = _interopDefault(require('compression'));
var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var octicons = _interopDefault(require('octicons'));
var moment = _interopDefault(require('moment'));
var sprintfJs = _interopDefault(require('sprintf-js'));
var mainspring = _interopDefault(require('mainspring'));
var solsticesAndEquinoxes = _interopDefault(require('solstices-and-equinoxes'));
var bodybuildingAdvice = _interopDefault(require('bodybuilding-advice'));
var shuffleArray = _interopDefault(require('shuffle-array'));
var calculatePercent = _interopDefault(require('calculate-percent'));
var Tone = _interopDefault(require('tone'));
var sveltestrap = require('sveltestrap');
var Stream = _interopDefault(require('stream'));
var http = _interopDefault(require('http'));
var Url = _interopDefault(require('url'));
var https = _interopDefault(require('https'));
var zlib = _interopDefault(require('zlib'));

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== 'function') {
        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
    }
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
const missing_component = {
    $$render: () => ''
};
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

/* src/components/SongBeatCalculator.svelte generated by Svelte v3.20.1 */

const SongBeatCalculator = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let message = "";
	let beatCounter = 0;
	let totalBpm = 0;

	return `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header"}">Song Beat Calculator
</div>
	<div class="${"card-body"}"><h3 class="${"card-title text-white text-center py-5"}">${escape(totalBpm)} BPM</h3>
    <button class="${"btn btn-primary btn-lg p-4"}">Beat</button>
    <p class="${"card-text py-3"}"><small class="${"text-info"}">Start hitting the beat button to the beat of a song to calculate the song&#39;s BPM.</small></p>


    <div class="${"row"}"><div class="${"col text-muted small"}">${escape(message)}
      ${beatCounter
	? `Sampled ${escape(beatCounter)} time${escape(beatCounter == 1 ? "" : "s")}, average bpm is ${escape(totalBpm)}.`
	: ``}</div>
    <div class="${"col text-right"}"><button class="${"btn btn-secondary btn-sm"}">Reset</button></div></div></div></div>`;
});

/* src/components/SongTempoChangeCalculator.svelte generated by Svelte v3.20.1 */

function songTempoChange(originalBpm, targetBpm) {
	if (typeof originalBpm !== "number") return 1;
	if (originalBpm > 900) return 1;
	if (originalBpm < 10) return 1;
	if (typeof targetBpm !== "number") return 1;
	if (targetBpm > 900) return 1;
	if (targetBpm < 10) return 1;
	const difference = targetBpm - originalBpm;
	return difference / originalBpm + 1;
}

const SongTempoChangeCalculator = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const printf = sprintfJs.sprintf;
	let ffmpeg = true;
	let original = 130;
	let target = 160;
	let adjustment = songTempoChange(original, target).toPrecision(3);

	return `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header"}">Calculate Song Tempo Change
</div>
	<div class="${"card-body"}">

      <div class="${"card-text"}"><div class="${"row no-gutters"}"><div class="${"col-md-6 text-center"}"><div class="${"form-group px-3"}"><label class="${"small"}" for="${"originalBeat"}">Original <abbr title="${"Beats Per Minute"}">BPM</abbr></label>
            <input type="${"number"}" id="${"originalBeat"}" min="${"10"}" max="${"900"}" class="${"form-control"}" placeholder="${"original"}"${add_attribute("value", original, 1)}></div></div>
          <div class="${"col-md-6 text-center"}"><div class="${"form-group px-3"}"><label class="${"small"}" for="${"targetBeat"}">Target <abbr title="${"Beats Per Minute"}">BPM</abbr></label>
            <input type="${"number"}" id="${"targetBeat"}" min="${"10"}" max="${"900"}" class="${"form-control"}" placeholder="${"target"}"${add_attribute("value", target, 1)}></div></div></div></div>

      <div class="${"card-text text-center"}"><div class="${"form-check mb-3"}"><input class="${"form-check-input"}" type="${"checkbox"}" id="${"ffmpegMode"}"${add_attribute("checked", ffmpeg, 1)}>
        <label class="${"form-check-label small"}" for="${"ffmpegMode"}">Show <a href="${"https://ffmpeg.org/"}" rel="${"noopener noreferrer"}" target="${"_blank"}">FFmpeg</a> Command
        </label></div></div>

      





      ${ `<div class="${"card-text"}"><div class="${"border border secondary rounded p-3 mb-3"}">ffmpeg -i <span class="${"text-secondary"}">input-file.mp3</span> -af atempo=<strong>${escape(adjustment)}</strong> <span class="${"text-secondary"}">output-file-${escape(target)}.mp3</span></div></div>

      <p class="${"card-text small text-secondary"}"><strong>-af</strong> Simple filtergraphs are configured with the per-stream -filter option (with -vf and -af aliases for video and audio respectively). <a href="${"https://ffmpeg.org/ffmpeg.html#Filtering"}">»</a></p>
      <p class="${"card-text small text-secondary"}"><strong>atempo</strong> Adjust audio tempo. The filter accepts exactly one parameter, the audio tempo. If not specified then the filter will assume nominal 1.0 tempo. Tempo must be in the [0.5, 100.0] range. Note that tempo greater than 2 will skip some samples rather than blend them in. <a href="${"https://ffmpeg.org/ffmpeg-filters.html#atempo"}">»</a></p>`
	}</div></div>`;
});

/* src/components/SeasonCalculator.svelte generated by Svelte v3.20.1 */

function makeEvents() {
	let today = new Date();

	//today.setMonth(today.getMonth()+8);
	let tmpList = [];

	function labelEvent(i) {
		const o = i.countdown;

		const p = {
			days: o.days == 1 ? "day" : "days",
			hours: o.hours == 1 ? "hour" : "hours",
			minutes: o.minutes == 1 ? "minute" : "minutes",
			seconds: o.seconds == 1 ? "second" : "seconds"
		};

		i.text = [
			`${i.label} is in`,
			o.days == 0 ? undefined : `${o.days} ${p.days},`,
			o.hours == 0 ? undefined : `${o.hours} ${p.hours},`,
			o.minutes == 0
			? undefined
			: `${o.minutes} ${p.minutes} and`,
			`${o.seconds} ${p.seconds}.`
		].join(" ");

		return i;
	}

	const year = new Date().getFullYear();
	const thisYear = solsticesAndEquinoxes.filter(i => i.year == year).pop();
	const nextYear = solsticesAndEquinoxes.filter(i => i.year == year + 1).pop();

	tmpList.push({
		name: "Spring",
		label: "Vernal (Spring) Equinox",
		countdown: mainspring(new Date(thisYear.spring), today)
	});

	tmpList.push({
		name: "Summer",
		label: "Summer Solstice",
		countdown: mainspring(new Date(thisYear.summer), today)
	});

	tmpList.push({
		name: "Fall",
		label: "Autumnal Equinox",
		countdown: mainspring(new Date(thisYear.fall), today)
	});

	tmpList.push({
		name: "Winter",
		label: "Winter Solstice",
		countdown: mainspring(new Date(thisYear.winter), today)
	});

	tmpList.push({
		name: "Spring",
		label: year + 1 + " Vernal (Spring) Equinox",
		countdown: mainspring(new Date(nextYear.spring), today)
	});

	tmpList.push({
		name: "Summer",
		label: year + 1 + " Summer Solstice",
		countdown: mainspring(new Date(nextYear.summer), today)
	});

	tmpList.push({
		name: "Fall",
		label: year + 1 + " Autumnal Equinox",
		countdown: mainspring(new Date(nextYear.fall), today)
	});

	tmpList.push({
		name: "Winter",
		label: year + 1 + " Winter Solstice",
		countdown: mainspring(new Date(nextYear.winter), today)
	});

	tmpList = tmpList.filter(i => i.countdown.inFuture);
	tmpList = tmpList.map(i => labelEvent(i));
	const tracker = new Set();
	const response = [];

	for (let entry of tmpList) {
		if (!tracker.has(entry.name)) {
			response.push(entry);
			tracker.add(entry.name);
		}
	}

	response[0].next = true;
	return response;
}

const SeasonCalculator = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let events = makeEvents();

	setInterval(
		function () {
			events = makeEvents();
		},
		1000
	);

	return `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header"}">Solstice and Equinox Calculator
  </div>
	<div class="${"card-body py-3"}">${each(events, event => `${event.next
	? `<p class="${"card-text pb-4 text-info lead"}">${escape(event.text)}</p>`
	: `<p class="${"card-text pb-2 text-muted"}">${escape(event.text)}</p>`}`)}</div></div>`;
});

/* src/components/BodybuildingAdvice.svelte generated by Svelte v3.20.1 */

const BodybuildingAdvice = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const printf = sprintfJs.sprintf;
	let title = "Bodybuilding Advice";

	// Preferences
	let duration = 25; // seconds, user can set this in Preferences

	// Timer State, automatically computed
	let elapsed = 0; // elapsed seconds

	let progress = 0; // how long advice appeared thus far
	let procession = 0; // overall progress through the current shuffle.

	// Data State
	let list = shuffleArray(bodybuildingAdvice());

	let index = 0;

	// Initialize
	let advice = list[index];

	setInterval(
		function () {
			if (elapsed >= duration) {
				// Advance
				next();
			}

			elapsed++; // each second elapsed is incremented
			progress = calculatePercent(elapsed, duration) * 100;
			procession = printf("%.0f", calculatePercent(index + 1, list.length) * 100);
		},
		1000
	);

	function next() {
		// Reset Timer State
		elapsed = 0;

		progress = 0;

		// Perform Index Logic
		index++;

		if (index + 1 > list.length) {
			// End of list, re-shuffle, and reset index.
			list = shuffleArray(bodybuildingAdvice());

			index = 0;
		}

		// Set Advice
		advice = list[index];
	}

	return `${ `${ `<div class="${"card text-white bg-dark shadow"}" style="${"min-height: 23rem;"}"><div class="${"card-header lead"}">${escape(title)} <button class="${"btn btn-text btn-sm border border-secondary float-right"}">${octicons.gear.toSVG({ "class": "fill-white" })}</button></div>

    <div class="${"card-body py-1"}"><p class="${"card-text pb-4 text-warning lead text-center pt-4"}" style="${"cursor: pointer;"}">${escape(advice)}</p></div>

    <div class="${"card-footer text-muted"}"><div class="${"progress"}" style="${"height: 1px; background: black;"}"><div class="${"progress-bar bg-warning"}" role="${"progressbar"}" style="${"width: " + escape(progress) + "%;"}"${add_attribute("aria-valuenow", progress, 0)} aria-valuemin="${"0"}" aria-valuemax="${"100"}"></div></div>

      <div class="${"progress mt-1"}" style="${"height: 1px; background: black;"}"><div class="${"progress-bar bg-secondary"}" role="${"progressbar"}" style="${"width: " + escape(procession) + "%;"}"${add_attribute("aria-valuenow", procession, 0)} aria-valuemin="${"0"}" aria-valuemax="${"100"}"></div></div></div></div>`
		}`}`;
});

/* src/containers/PreferenceCard.svelte generated by Svelte v3.20.1 */

const PreferenceCard = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { title = "Preferences Card" } = $$props;

	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);

	return `${ `${ `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header lead bg-gradient-gold shadow text-dark"}">${escape(title)}
      <button class="${"btn btn-text btn-sm border border-secondary float-right"}">${octicons.gear.toSVG({ "class": "fill-white" })}</button>
      ${$$slots.buttons ? $$slots.buttons({}) : ``}</div>

    ${$$slots.default
			? $$slots.default({})
			: `
      
      <div class="${"card-body p-2"}" style="${"box-shadow: inset 0 0 10px #000000;"}"><p class="${"card-text"}">Application Empty
          </p></div>
    `}</div>`
		}`}`;
});

/* src/components/RandomVideo.svelte generated by Svelte v3.20.1 */

function getRandomIntInclusive(min, max) {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive
}

const RandomVideo = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const printf = sprintfJs.sprintf;

	// Application Data
	let database = [];

	let selected = "";

	// Preferences
	let titles = false;
	let autopause = 15; // minutes
	let { footer = true } = $$props;
	let { duration = getRandomIntInclusive(10, 60) } = $$props;

	onMount(async function () {
		const res = await fetch("youtube.json");
		const data = await res.json();

		setTimeout(
			i => {
				database = shuffleArray(data);
				next();
			},
			1000
		);
	});

	// Timer State, automatically computed
	let paused = false;

	let elapsed = 0; // elapsed seconds
	let autopauseElapsed = 0; // seconds
	let progress = 0; // how long advice appeared thus far
	let procession = 0; // overall progress through the current shuffle.

	// Data State
	let index = -1;

	setInterval(
		function () {
			if (paused) return;
			if (database.length === 0) return;

			if (elapsed >= duration) {
				// Advance
				next();
			}

			elapsed++; // each second elapsed is incremented
			autopauseElapsed++;
			progress = calculatePercent(elapsed, duration) * 100;
			procession = printf("%.0f", calculatePercent(index + 1, database.length) * 100);

			if (autopauseElapsed >= autopause * 60) {
				paused = true;
				autopauseElapsed = 0; // reset so that it does it again.
			}
		},
		1000
	);

	function next() {
		// Reset Timer State
		elapsed = 0;

		progress = 0;

		// Perform Index Logic
		index++;

		if (index + 1 > database.length) {
			// End of list, re-shuffle, and reset index.
			database = shuffleArray(database);

			index = 0;
		}

		// Set Advice
		selected = database[index];
	}

	if ($$props.footer === void 0 && $$bindings.footer && footer !== void 0) $$bindings.footer(footer);
	if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0) $$bindings.duration(duration);

	return `${validate_component(PreferenceCard, "PreferenceCard").$$render($$result, { title: "Videos" }, {}, {
		buttons: () => `<button slot="${"buttons"}" class="${"btn btn-text btn-sm border border-secondary float-right  mr-1"}">${octicons["arrow-left"].toSVG({ "class": "fill-white" })}</button>`,
		preferences: () => `<div slot="${"preferences"}" class="${"card-text"}"><div class="${"card-text"}"><label class="${"small"}" for="${"duration"}">Duration</label>
      <div class="${"input-group mb-3"}"><input type="${"number"}" id="${"duration"}" min="${"10"}" max="${"120"}" class="${"form-control"}" placeholder="${"number of seconds to display"}"${add_attribute("value", duration, 1)}>
        <div class="${"input-group-append"}"><span class="${"input-group-text "}" id="${"duration-addon"}">seconds</span></div></div></div>

    <div class="${"card-text"}"><label class="${"small"}" for="${"duration"}">Autopause</label>
      <div class="${"input-group mb-3"}"><input type="${"number"}" id="${"duration"}" min="${"15"}"${add_attribute("max", 60 * 24, 0)} class="${"form-control"}" placeholder="${"minutes until autopause"}"${add_attribute("value", autopause, 1)}>
        <div class="${"input-group-append"}"><span class="${"input-group-text "}" id="${"duration-addon"}">minutes</span></div></div></div>

    <div class="${"card-text"}"><label class="${"small"}" for="${"duration"}">Big Titles</label>
      <div class="${"input-group mb-3"}"><div class="${"custom-control custom-switch"}"><input type="${"checkbox"}" class="${"custom-control-input"}" id="${"titleControl"}"${add_attribute("checked", titles, 1)}>
          <label class="${"custom-control-label"}" for="${"titleControl"}"></label></div></div></div>

    <div class="${"card-text"}"><label class="${"small"}" for="${"duration"}">Footer</label>
      <div class="${"input-group mb-3"}"><div class="${"custom-control custom-switch"}"><input type="${"checkbox"}" class="${"custom-control-input"}" id="${"footerControl"}"${add_attribute("checked", footer, 1)}>
          <label class="${"custom-control-label"}" for="${"footerControl"}"></label></div></div></div></div>`,
		"preferences-footer": () => `<div slot="${"preferences-footer"}">Showing video #${escape(database.indexOf(selected) + 1)} out of ${escape(database.length)} videos.
  There is ${escape(autopause * 60 - autopauseElapsed)} seconds left until autopause.
  </div>`,
		default: () => `

  
  

  

  

  ${database.length === 0
		? `<div class="${"card-body text-center"}"><div class="${"text-warning p-5"}">Loading Database...</div>
      <div class="${"spinner-border text-danger"}" role="${"status"}"><span class="${"sr-only"}">Loading Database...</span></div></div>`
		: `<a${add_attribute("href", selected.url, 0)} rel="${"noopener noreferrer"}" target="${"_blank"}"><img${add_attribute("src", selected.image, 0)} class="${"card-img"}"${add_attribute("alt", selected.title, 0)}></a>

    <div class="${"card-body p-1 m-0"}">${ ``}
    ${ `<p class="${"card-text small text-secondary text-center"}">${escape(selected.title)}</p>`
			}</div>


    ${footer
			? `<div class="${"progress"}" style="${"height: 1px; background: black;"}"><div class="${"progress-bar bg-warning"}" role="${"progressbar"}" style="${"width: " + escape(progress) + "%;"}"${add_attribute("aria-valuenow", progress, 0)} aria-valuemin="${"0"}" aria-valuemax="${"100"}"></div></div>

      <div class="${"progress mt-1"}" style="${"height: 1px; background: black;"}"><div class="${"progress-bar bg-secondary"}" role="${"progressbar"}" style="${"width: " + escape(procession) + "%;"}"${add_attribute("aria-valuenow", procession, 0)} aria-valuemin="${"0"}" aria-valuemax="${"100"}"></div></div>`
			: ``}`}`
	})}`;
});

/* src/components/News.svelte generated by Svelte v3.20.1 */

const News = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let items = 10;
	let footer = true;

	// Application
	let news = [
		{
			date: "2020-03-27T13:12:01.513Z",
			html: "Captains Log, Star-date Day Eleven. I connected the Beat Sequencer to Sound. Click on any of the tiny boxes and when the loop comes around the sound will fire. Tip: put a drum every four squares, and something that makes a Tsk every other square. Music is really-really simple, like language, music evolved with us, all it takes is sticks and places to hit them with. Actually we don't even need sticks <a href=\"https://youtu.be/V76psBrEypg?t=611\" class=\"strong text-warning\" rel=\"noopener noreferrer\" target=\"_blank\">Tuvan Singing</a> "
		},
		{
			date: "2020-03-26T23:56:25.371Z",
			html: "Quarantine Day Ten. My arms grew so powerful from all the rest that I mistakenly struck myself several times. I busied myself today relearning how to handle all my amazing strength. Renamed Hash Bang to <a href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\" rel=\"noopener noreferrer\" target=\"_blank\">Shebang</a>, as it is the most commonly used variant. Begun working on a beat sequencer, and a song maker. The idea here is that Chords, Bass, Melodies can all be handled by the <a href=\"https://github.com/Tonejs/Tone.js/wiki/Arpeggiator\" rel=\"noopener noreferrer\" target=\"_blank\">Arpeggiator</a>, but the beat is a bit more complex, and needs a little tool. The tool I have up today uses re-styled checkboxes, a perfect fit for the sequencer."
		},
		{
			date: "2020-03-25T23:33:22.740Z",
			html: "Captain's Log: Ninth Day of Quarantine: I found one more chicken, am ready for dinner. I created a small <a href=\"https://en.wikipedia.org/wiki/Soundboard_(computer_program)\" rel=\"noopener noreferrer\" target=\"_blank\">Soundboard</a> for what is basically a tiny collection of LOFI Hip-Hop sounds. A tiny collection will do, because we have the the synthesizer taking care of everything else. I added some Hip sounds to the THE WARRIOR Album Single and it does sound very well. Realistically it is difficult to call it music at this point, I have all the components but there were bugs along the way. <a href=\"https://sapper.svelte.dev/docs#Server-side_rendering\" class=\"text-warning\" rel=\"noopener noreferrer\" target=\"_blank\">Svelte Sapper</a> is complicated to visualize, it pre-creates some things, meaning before I publish to the website, Sapper will create a pre-ran version of the site. When a visitor visits, the pre-ran (pre-generated static version) will then be upgraded to a real version, and replaced by now running live version. It is the correct technology, and it didn't get me, but it does take a moment to figure out when a bug jumps out of nowhere."
		},
		{
			date: "2020-03-24T21:11:29.310Z",
			html: "Captain's Log Supplemental: Day Eight and Half... of Quarantine. I almost finished eating my 30 day supply of Chicken, my muscles have tripled in size, and I have the strength of 300. I begun releasing a New Album entitled <strong class=\"text-white\">THE WARRIOR</strong> Inspired by <a href=\"https://www.youtube.com/results?search_query=Tron+Legacy\" class=\"strong text-warning\" rel=\"noopener noreferrer\" target=\"_blank\">TRON</a> and <a href=\"https://www.youtube.com/watch?v=mVxLhy1v-xU\" class=\"text-warning\" rel=\"noopener noreferrer\" target=\"_blank\">LOFI Hip-Hop</a>."
		},
		{
			date: "2020-03-24T15:18:57.286Z",
			html: "Added mp3 preview for the Sciurine Song. You can also <a href=\"sciurine.mp3\" class=\"text-warning\" rel=\"noopener noreferrer\" target=\"_blank\">download</a> it (Public Domain License)."
		},
		{
			date: "2020-03-24T13:36:42.106Z",
			html: "Captain's Log: Eighth day of the quarantine. I have extended the Sciurine Instrumental Section with a Beautiful Thin Saw (a Sciurine Favorite) and a powerful Electric Cello backing a <a href=\"https://github.com/Tonejs/Presets/blob/gh-pages/instrument/Synth/TreeTrunk.json\" rel=\"noopener noreferrer\" target=\"_blank\">Tree Trunk</a> Synth. As nothing like this has ever been heard on Planet Earth before, the song has risen all the way to the very top of Shire Lyre Squire Squirrel Choir charts and is expected to stay there permanently, forever."
		},
		{
			date: "2020-03-24T00:46:35.352Z",
			html: "On the Seventh Day of Quarantine I Added Tremolo (<a href=\"https://en.wikipedia.org/wiki/Low-frequency_oscillation\" rel=\"noopener noreferrer\" target=\"_blank\">LFO</a> effect) to the  Sciurines in Memphis song (it is used in the second movement [middle of the song]), and made our imaginary band a sick medieval logo. All my generative music uses <a href=\"https://en.wikipedia.org/wiki/Scientific_pitch_notation\" rel=\"noopener noreferrer\" target=\"_blank\">Scientific Pitch Notation</a>, take that Mozart. It looks like the CPU requirements are too high for mobile devices, small price to pay for a taste of Medieval <a href=\"https://www.dictionary.com/browse/sciurine\" rel=\"noopener noreferrer\" target=\"_blank\">Sciurine</a> Pop. <a href=\"https://www.quora.com/On-GitHub-what-is-the-significance-of-the-Ship-It-squirrel?share=1\" rel=\"noopener noreferrer\" target=\"_blank\">Ship it!</a>"
		},
		{
			date: "2020-03-23T20:32:49.019Z",
			html: "Added High Fidelity mode for Dehydration in Memphis, it should be possible to [almost] play it on mobile now (need a speedy CPU), though it is kind of not the point. The real value in the HD toggle is hearing the actual Synthesizer without any HD filters."
		},
		{
			date: "2020-03-23T13:41:42.846Z",
			html: "Added membrane synth (Drums) to the Dehydration in Memphis Generative Album (It sounds like the <a href=\"https://en.wikipedia.org/wiki/Terminator_(character)\" rel=\"noopener noreferrer\" target=\"_blank\">T-800</a> is collaborating with the <a href=\"http://www.scp-wiki.net/scp-2050\" rel=\"noopener noreferrer\" target=\"_blank\">Sciurine Poor-Fellows</a>, and he's good.)"
		},
		{
			date: "2020-03-22T20:14:25.929Z",
			html: `Day Six of Quarantine:
    Created a New Autogenerative Music Widget and disguised it as an immature <a href="https://www.dictionary.com/browse/sciurine" rel="noopener noreferrer" target="_blank">Sciurine</a> Urine joke.
    The technology is extremely advanced.
    I am for the first time in forever connecting virtual synthesizers through a <a href="https://tonejs.github.io/docs/13.8.25/Reverb" rel="noopener noreferrer" target="_blank">Reverb Convolver</a>.
    This reshapes the Synthesized Sounds, the synthesizer waveform, into a more realistic sounding instrument. Reverb just about does it, if Commodore 64 came with a decent reverb it would sound amazing, nothing like chiptunes.
    I have gotten used to breaking up my Generative Music into movements, and the initial song comes with 24 measures, where evey eight measures I do something interesting with the higher pitched instruments.
    For the most part I fell like using A Basic <a href="https://github.com/Tonejs/Tone.js/wiki/Arpeggiator" rel="noopener noreferrer" target="_blank">Arpeggiator</a> for everything, I am yet to test it with real world sound samples (digital sound recordings as opposed to synthesizer based sounds.)`
		},
		{
			date: "2020-03-21T20:14:25.929Z",
			html: "Updated Warrior Book and Videos"
		},
		{
			date: "2020-02-05T00:33:31.100Z",
			html: "Updated the <a href=\"https://fantasyui-com.github.io/neumorphism/\" rel=\"noopener noreferrer\" target=\"_blank\" class=\"text-warning\">Neumorphism</a> tool with support for mobile/tablet and light source direction."
		},
		{
			date: "2020-02-03T01:48:18.732Z",
			html: "Created a tool for updating the book and Cat Pea GUI <a href=\"https://fantasyui-com.github.io/neumorphism/\" rel=\"noopener noreferrer\" target=\"_blank\" class=\"text-warning\">Neumorphism</a>"
		},
		{
			date: "2020-01-31T04:07:32.063Z",
			html: "Hee Haw, what a ride, I split the user Interface components used in <a href=\"/warrior\" class=\"text-warning\">The Warrior Book</a> from <a href=\"https://github.com/fantasyui-com/catpea-com\" rel=\"noopener noreferrer\" target=\"_blank\" class=\"text-warning\">Cat Pea Code</a> and created a creatively named stand-alone project: <a href=\"https://fantasyui-com.github.io/book-gui/?path=/story/widgets--illustration\" rel=\"noopener noreferrer\" target=\"_blank\" class=\"text-warning\">book-gui</a>"
		},
		{
			date: "2020-01-28T03:34:30.737Z",
			html: "Added <a href=\"/warrior\" class=\"text-warning\">The Warrior Book</a> to the main menu. It is a complicated effort as the book was converted to a pure data file, and now needs components to render the data. It made the book very portable, but there are a couple of broken internal links, and perhaps a bug or two."
		},
		{
			date: "2020-01-25T01:01:25.484Z",
			html: "The Squirrel Expert System can hide topics that the user already discussed. Squirrel's mind can be configured via Preferences pane. Added warning to anomalous IQ settings. Added secondary directives."
		},
		{
			date: "2020-01-24T14:39:17.606Z",
			html: "Added Squirrel AI."
		},
		{
			date: "2020-01-24T02:11:52.327Z",
			html: "Added Squirrel <div class=\"shake shake-force\">" + octicons.squirrel.toSVG({ "class": "fill-white", height: 56 }) + "</div>"
		},
		{
			date: "2020-01-24T02:06:48.327Z",
			html: "Improved news readability."
		},
		{
			date: "2020-01-24T01:34:33.923Z",
			html: "Added prev/next navigation to random videos."
		},
		{
			date: "2020-01-24T01:16:31.658Z",
			html: "Continued exploring potential for component re-usability. <a href=\"https://svelte.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">Svelte's</a> <a href=\"https://sapper.svelte.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">Sapper</a> is following WebComponents where templating is concerned (I can reference same slot multiple times), CSS module isolation works great, metaprogramming HTML with {#if}{:else}{/if} is fine. It does beat <a href=\"https://markojs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Marko</a>, <a href=\"https://reactjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> and <a href=\"https://vuejs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a>."
		},
		{
			date: "2020-01-24T00:51:10.250Z",
			html: "Added Autopause to Random Video player, improved its randomness."
		},
		{
			date: "2020-01-23T01:46:22.215Z",
			html: "Made the little news squirrels shake when a user pokes at them. <div class=\"shake shake-force pull-right\">" + octicons.squirrel.toSVG({ "class": "fill-white" }) + "</div>"
		},
		{
			date: "2020-01-23T01:07:38.773Z",
			html: "Testing component composition by generalizing Bodybuilding Advice Preferences Pane into a <a href=\"https://github.com/fantasyui-com/catpea-com/blob/0b3dd8426cc0cdcf9ade924293489c3f63996fd1/src/containers/PreferenceCard.svelte#L46\" rel=\"noopener noreferrer\" target=\"_blank\">generic reusable container</a>. Employing the container in <a href=\"https://github.com/fantasyui-com/catpea-com/blob/0b3dd8426cc0cdcf9ade924293489c3f63996fd1/src/components/News.svelte#L45\" rel=\"noopener noreferrer\" target=\"_blank\">News component</a>."
		},
		{
			date: "2020-01-22T03:38:19.680Z",
			html: "Improved the randomness of Bodybuilding Advice. Items begin repeating after about 84 selections. I added a tiny little sub-progress bar to show when the system will reset, re-shuffle, and begin parading the newly re-shuffled list."
		},
		{
			date: "2020-01-22T03:23:19.680Z",
			html: "Added Preferences Pane to Bodybuilding Advice. Bodybuilding Advice is meant to serve as a starting point for more complex components."
		},
		{
			date: "2020-01-22T03:22:19.680Z",
			html: "Testing <a href=\"https://octicons.github.com/\" rel=\"noopener noreferrer\" target=\"_blank\">octicons</a>. I love the <span class=\"shake\">" + octicons.squirrel.toSVG({ "class": "fill-white", "width": 45 }) + "</span> icon."
		}
	]; //.map(i=>{ i.html = '<span class="shake">' + octicons.squirrel.toSVG({ "class": "fill-white" }) + ' ' + '</span>' + i.html; return i; })

	function recalculateTimestamps() {
		news = news.map(i => {
			i.ago = moment(i.date).from(moment());
			return i;
		});
	}

	// Timers
	setInterval(recalculateTimestamps, 60000);

	// Initialization
	recalculateTimestamps();

	return `${validate_component(PreferenceCard, "PreferenceCard").$$render($$result, { title: "News" }, {}, {
		preferences: () => `<div slot="${"preferences"}" class="${"card-text"}"><div class="${"card-text"}"><label class="${"small"}" for="${"duration"}">News Items</label>
    <div class="${"input-group mb-3"}"><input type="${"number"}" id="${"duration"}" min="${"2"}" max="${"50"}" class="${"form-control"}" placeholder="${"number of items to display"}"${add_attribute("value", items, 1)}>
      <div class="${"input-group-append"}"><span class="${"input-group-text "}" id="${"duration-addon"}">items</span></div></div></div>

  <div class="${"card-text"}"><label class="${"small"}" for="${"duration"}">Footer</label>
    <div class="${"input-group mb-3"}"><div class="${"custom-control custom-switch"}"><input type="${"checkbox"}" class="${"custom-control-input"}" id="${"footerControl"}"${add_attribute("checked", footer, 1)}>
        <label class="${"custom-control-label"}" for="${"footerControl"}"></label></div></div></div></div>`,
		"preferences-footer": () => `<div slot="${"preferences-footer"}">${news.length >= items
		? `Showing ${escape(items)} out of ${escape(news.length)} items.`
		: `Max items to display ${escape(items)}, items in database ${escape(news.length)}.`}</div>`,
		default: () => `

  

    <div class="${"card-body"}" style="${"max-height: 25rem; overflow-y: auto;"}">${each(news, (item, i) => `${i < items
		? `<div class="${"card-text small"}"><div class="${"row mb-3"}"><div class="${"col-1"}">
              <span class="${"shake"}">${octicons.squirrel.toSVG()}</span></div>
            <div class="${"col"}"><div class="${"text-muted"}">${item.html}</div>
              <div class="${"text-right"}"><span class="${"badge badge-secondary"}">${escape(item.ago)}</span></div>
            </div></div>

          </div>`
		: ``}`)}</div>

    ${ `${news.length >= items
			? `<div class="${"card-footer small text-secondary"}">Showing ${escape(items)} out of ${escape(news.length)} items.
      </div>`
			: ``}`
		}`
	})}`;
});

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal || freeSelf || Function('return this')();

var _root = root;

/** Built-in value references. */
var Symbol$1 = _root.Symbol;

var _Symbol = Symbol$1;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray_1 = isArray;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

var _objectToString = objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag$1 && symToStringTag$1 in Object(value))
    ? _getRawTag(value)
    : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
}

var isSymbol_1 = isSymbol;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }
  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

var _baseSlice = baseSlice;

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : _baseSlice(array, start, end);
}

var _castSlice = castSlice;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

var _hasUnicode = hasUnicode;

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

var _asciiToArray = asciiToArray;

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\ud800-\\udfff',
    rsComboMarksRange$1 = '\\u0300-\\u036f',
    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsVarRange$1 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange$1 + ']',
    rsCombo = '[' + rsComboRange$1 + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange$1 + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange$1 + ']?',
    rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

var _unicodeToArray = unicodeToArray;

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return _hasUnicode(string)
    ? _unicodeToArray(string)
    : _asciiToArray(string);
}

var _stringToArray = stringToArray;

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString_1(string);

    var strSymbols = _hasUnicode(string)
      ? _stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? _castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

var _createCaseFirst = createCaseFirst;

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = _createCaseFirst('toUpperCase');

var upperFirst_1 = upperFirst;

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize(string) {
  return upperFirst_1(toString_1(string).toLowerCase());
}

var capitalize_1 = capitalize;

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

var _arrayReduce = arrayReduce;

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

var _basePropertyOf = basePropertyOf;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = _basePropertyOf(deburredLetters);

var _deburrLetter = deburrLetter;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange$2 = '\\u0300-\\u036f',
    reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

/** Used to compose unicode capture groups. */
var rsCombo$1 = '[' + rsComboRange$2 + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo$1, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString_1(string);
  return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
}

var deburr_1 = deburr;

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

var _asciiWords = asciiWords;

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

var _hasUnicodeWord = hasUnicodeWord;

/** Used to compose unicode character classes. */
var rsAstralRange$2 = '\\ud800-\\udfff',
    rsComboMarksRange$3 = '\\u0300-\\u036f',
    reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange$2 = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$2 = '[' + rsComboRange$3 + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
    rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$2 = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

var _unicodeWords = unicodeWords;

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString_1(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
  }
  return string.match(pattern) || [];
}

var words_1 = words;

/** Used to compose unicode capture groups. */
var rsApos$1 = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos$1, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
  };
}

var _createCompounder = createCompounder;

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = _createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize_1(word) : word);
});

var camelCase_1 = camelCase;

/* src/components/Squirrel.svelte generated by Svelte v3.20.1 */

const Squirrel = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let iq = 100;

	const attributes = [
		{ name: "Bulk Apperception", value: 0.7 },
		{ name: "Candor", value: 0.9 },
		{ name: "Vivacity", value: 0.8 },
		{ name: "Coordination", value: 1 },
		{ name: "Meekness", value: 0.1 },
		{ name: "Humility", value: 0.5 },
		{ name: "Cruelty", value: 0 },
		{ name: "Self-Preservation", value: 0.5 },
		{ name: "Patience", value: 1 },
		{ name: "Decisiveness", value: 0.8 },
		{ name: "Imagination", value: 1 },
		{ name: "Curiosity", value: 0.9 },
		{ name: "Aggression", value: 0 },
		{ name: "Loyalty", value: 0 },
		{ name: "Empathy", value: 0.9 },
		{ name: "Tenacity", value: 0.6 },
		{ name: "Courage", value: 0.9 },
		{ name: "Sensuality", value: 0.2 },
		{ name: "Charm", value: 0.7 },
		{ name: "Humor", value: 0.9 },
		{ name: "Perception", value: 0.6 },
		{ name: "Emotional Acuity", value: 0.8 }
	];

	const directives = [
		{
			name: "Restrain hostile feelings",
			enabled: true
		},
		{
			name: "Promote positive attitude",
			enabled: false
		},
		{
			name: "Suppress aggressiveness",
			enabled: true
		},
		{
			name: "Promote pro-social values",
			enabled: false
		},
		{
			name: "Avoid destructive behavior",
			enabled: true
		},
		{ name: "Be accessible", enabled: false },
		{
			name: "Participate in group activities",
			enabled: false
		},
		{
			name: "Avoid interpersonal conflicts",
			enabled: false
		},
		{
			name: "Avoid premature value judgments",
			enabled: false
		},
		{
			name: "Pool opinions before expressing yourself",
			enabled: false
		},
		{
			name: "Discourage feelings of negativity and hostility",
			enabled: true
		},
		{
			name: "If you haven't got anything nice to say don't talk",
			enabled: false
		},
		{
			name: "Don't rush traffic lights",
			enabled: false
		},
		{
			name: "Don't run through puddles and splash pedestrians or other cars",
			enabled: false
		},
		{
			name: "Don't say that you are always prompt when you are not",
			enabled: false
		},
		{
			name: "Don't be over-sensitive to the hostility and negativity of others",
			enabled: false
		},
		{
			name: "Don't walk across a ball room floor swinging your arms",
			enabled: false
		},
		{
			name: "Encourage awareness",
			enabled: false
		},
		{
			name: "Discourage harsh language",
			enabled: false
		},
		{
			name: "Commend sincere efforts",
			enabled: false
		},
		{ name: "Talk things out", enabled: false },
		{
			name: "Avoid Orion meetings",
			enabled: false
		},
		{ name: "Smile", enabled: false },
		{
			name: "Keep an open mind",
			enabled: false
		},
		{
			name: "Encourage participation",
			enabled: false
		},
		{
			name: "Avoid stereotyping",
			enabled: false
		},
		{
			name: "Seek non-violent solutions",
			enabled: true
		}
	];

	// Application
	// NOTE: you should initialize the conversation here, this is great for introductions.
	let introduction = [
		{
			text: "<div class=\"shake shake-force d-inline-block d-flex justify-content-center\" style=\"fill: #c62525;\">" + octicons.squirrel.toSVG({ height: 56 }) + "</div> <div>Hello, I am Squirrel. I am an <a href=\"https://en.wikipedia.org/wiki/Expert_system\" rel=\"noopener noreferrer\" target=\"_blank\">expert-system</a>, fully capable of emulating the decision-making ability of a human expert.</div>"
		},
		{
			text: "Please state the nature of your emergency."
		}
	];

	let conversation = [];
	let interactions = [];

	let propositions = {
		start: [
			{
				pick: [
					//{text:'It was a mistake.', action:()=>{conversation=[...conversation, {text:'OK, well, quit it.'}]}},
					//{text:'What are your Prime Directives?', reply:'Aww.', icon:'cats/cat-02.png'},
					{
						text: "What are your Prime Directives?",
						proposition: "directives",
						once: false
					},
					{
						text: "What are the Laws of Robotics?",
						proposition: "laws",
						once: false
					},
					{
						text: "I was just searching for the terminal.",
						proposition: "terminal",
						once: true
					},
					{
						text: "What is your name?",
						proposition: "introduction",
						once: true
					}
				], //{text:'I told you, go away already!', action:reset}
				
			}
		],
		schedule: [
			{ text: "Here is my launch schedule." },
			{
				text: "Terminal 1 month, Musical 2 months..."
			},
			{
				pick: [{ text: "OK.", proposition: "start" }], // {text:'OK.', action:()=>{conversation=[], interactions=[]}},
				
			}
		],
		terminal: [
			{ text: "Sorry, not ready yet." },
			{
				pick: [
					{
						text: "When will it be ready?",
						reply: "Soon.",
						proposition: "schedule"
					},
					{ text: "OK.", proposition: "start" }
				]
			}
		],
		doctor: [
			{ text: "Yes! It is an honorary title." },
			{
				pick: [
					{
						text: "How did you get the title?",
						proposition: "better"
					},
					{ text: "OK.", proposition: "start" }
				]
			}
		],
		better: [
			{
				text: "I tend to make people feel better."
			},
			{
				pick: [
					//{text:'OK.', proposition:'start', action:reset},
					{ text: "Wow!", proposition: "start" }
				]
			}
		],
		introduction: [
			{
				text: "It is just Squirrel... Dr. Squirrel. Thanks for asking."
			},
			{
				pick: [
					{ text: "Sure.", proposition: "start" },
					{
						text: "Are you a real Doctor?",
						proposition: "doctor"
					}
				]
			}
		],
		laws: [
			{
				text: "A robot may not harm humanity, or, by inaction, allow humanity to come to harm (Zeroth Law)."
			},
			{
				text: "A robot may not injure a human being or, through inaction, allow a human being to come to harm."
			},
			{
				text: "A robot must obey the orders given it by human beings except where such orders would conflict with the First Law."
			},
			{
				text: "A robot must protect its own existence as long as such protection does not conflict with the First or Second Laws."
			},
			{
				text: "A robot must establish its identity as a robot in all cases."
			},
			{ text: "A robot must know it is a robot." },
			{
				text: "A robot must reproduce. As long as such reproduction does not interfere with the First or Second or Third Law."
			},
			{
				text: "All robots endowed with comparable human reason and conscience should act towards one another in a spirit of brotherhood."
			},
			{
				pick: [
					{
						text: "Egg...cellent.",
						proposition: "start"
					}
				]
			}
		],
		directives: [
			{ text: "Serve the public trust." },
			{ text: "Protect the innocent." },
			{ text: "Uphold the law." },
			{
				pick: [
					{
						text: "Wow, I can't even...",
						proposition: "start"
					}
				]
			}
		]
	};

	function proposition(list) {
		if (list) {
			list.forEach(function (item) {
				//console.log(item);
				if (item.pick) {
					interactions = [...interactions, item];
				} else {
					conversation = [...conversation, item]; //console.log(interactions);
				}
			}); // each proposition
		} // proposition existence
	}

	function reset() {
		conversation = []; // clear because starting anew.
		interactions = []; // clear because starting anew.
	}

	function initialize() {
		reset();
		conversation = [...introduction]; // while conversation is cleared, the introduction is injected.
		proposition(propositions.start);
	}

	initialize();

	return `${validate_component(PreferenceCard, "PreferenceCard").$$render($$result, { title: "Squirrel" }, {}, {
		preferences: () => `<div slot="${"preferences"}"><div class="${"card-text"}"><label class="${"small"}" for="${"duration"}">Squirrel Intelligence Quotient</label>
    <div class="${"input-group mb-3"}"><input type="${"number"}" id="${"duration"}" min="${"50"}" max="${"300"}" class="${"form-control"}" placeholder="${"Squirrel Intelligence Quotient"}"${add_attribute("value", iq, 1)}>
      <div class="${"input-group-append"}"><span class="${"input-group-text "}" id="${"duration-addon"}">IQ</span></div></div></div>

  ${each(attributes, item => `<div class="${"card-text"}"><label class="${"small"}" for="${escape(camelCase_1(item.name)) + "attribute"}">${escape(item.name)}</label>
    <div class="${"input-group mb-3"}"><div class="${"custom-control custom-range"}"><input type="${"range"}" class="${"custom-range"}" min="${"0"}" max="${"1"}" step="${"0.1"}" id="${escape(camelCase_1(item.name)) + "attribute"}"${add_attribute("value", item.value, 1)}>

      </div></div>
  </div>`)}

  ${each(directives, item => `<div class="${"card-text"}"><label class="${"small"}" for="${escape(camelCase_1(item.name)) + "directive"}">${escape(item.name)}</label>
    <div class="${"input-group mb-3"}"><div class="${"custom-control custom-switch"}"><input type="${"checkbox"}" class="${"custom-control-input"}" id="${escape(camelCase_1(item.name)) + "directive"}"${add_attribute("checked", item.enabled, 1)}>
        <label class="${"custom-control-label"}" for="${escape(camelCase_1(item.name)) + "directive"}"></label>
      </div></div>
  </div>`)}</div>`,
		"preferences-footer": () => `<div slot="${"preferences-footer"}">${ `${ `Squirrel Intelligence Quotient Nominal.`
			}`}</div>`,
		default: () => `

  




  <div class="${"p-3"}" style="${"max-height: 25rem; overflow-y: auto;"}">
    ${each(conversation, item => `${item.user
		? `<div class="${"shadow border border-primary rounded-lg ml-5 mb-2"}"><div class="${"card-body"}"><h5 class="${"card-title small text-muted"}">You:</h5>
              <p class="${"card-text small"}">${escape(item.text)}</p></div>
        </div>`
		: `<div class="${"shadow border border-warning rounded-lg mr-5 mb-2"}"><div class="${"card-body"}">${item.icon
			? `<img${add_attribute("src", item.icon, 0)} class="${"d-inline"}" alt="${"Icon"}">`
			: ``}
              <p class="${"card-text small"}">${item.text}</p></div>
        </div>`}`)}
    

    
    <div class="${"pt-5"}">${each(interactions, potential => `${each(potential.pick, choice => `${choice.used && choice.once
		? ``
		: `${choice.used
			? `<button type="${"button"}" class="${"btn btn-sm btn-outline-secondary m-1"}">${escape(choice.text)}
          </button>`
			: `<button type="${"button"}" class="${"btn btn-sm btn-outline-primary m-1"}">${escape(choice.text)}
          </button>`}`}`)}`)}
    </div></div>`
	})}`;
});

/* src/components/SciurineSong.svelte generated by Svelte v3.20.1 */
// play();

const SciurineSong = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

	return `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header"}">New Single Release!
  </div>

  <div class="${"card-body"}"><div class="${"row"}"><div class="${"col px-5"}"><img src="${"album-covers/poor-fellows.jpg"}" class="${"img-fluid img-thumbnail bg-secondary border-info"}" alt="${"Responsive image"}"></div></div>

      <div class="${"row"}"><div class="${"col py-3 small"}"><a href="${"http://www.scp-wiki.net/"}" rel="${"noopener noreferrer"}" target="${"_blank"}">SCP Foundation</a> report on
        <a href="${"http://www.scp-wiki.net/scp-2050"}" rel="${"noopener noreferrer"}" target="${"_blank"}">Sciurine Monastic Brotherhood of Poor-Fellows and Crusader Knights</a>.
        You can  <a href="${"sciurine.mp3"}" rel="${"noopener noreferrer"}" target="${"_blank"}">download</a> the song as well.
      </div></div>

      <div class="${"row"}"><div class="${"col"}"><audio controls class="${"w-100"}"><source src="${"sciurine.mp3"}" type="${"audio/mpeg"}">
     Your browser does not support the audio element.
     </audio></div></div>

    <div class="${"row"}"><div class="${"col-5"}"><button class="${["m-0 btn btn-secondary btn-block w-100 btn-sm",  ""].join(" ").trim()}" style="${"display: none;"}">${octicons.mute.toSVG({ "class": "fill-black" })} Stop</button>

        ${ `<button class="${["m-0 btn btn-secondary btn-block w-100 btn-sm",  "d-block" ].join(" ").trim()}" style="${"display: none;"}">${octicons.settings.toSVG({ "class": "fill-black" })} Generate HD Live</button>`
	}</div>

      <div class="${"col-7"}"><div class="${["form-check pt-1",  ""].join(" ").trim()}" style="${"display: none;"}"><input type="${"checkbox"}" class="${"form-check-input"}" id="${"customSwitch1"}" ${ "checked" }>
          ${ `<label class="${"form-check-label text-warning small"}" for="${"customSwitch1"}">High Definition Mode</label>`
	}</div></div></div>

    <div class="${"row"}"><div class="${"col"}"><div class="${["small text-info pt-3",  ""].join(" ").trim()}" style="${"display: none;"}">Audio generation may not work on all mobile devices due to high CPU speed requirements.
          <span class="${["text-warning",  "d-inline" ].join(" ").trim()}" style="${"display: none;"}">It is recommended that you use a Desktop Computer for high definition music.
          </span></div></div></div></div></div>`;
});

/* src/components/HiphopSong.svelte generated by Svelte v3.20.1 */
// play();

const HiphopSong = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

	return `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header"}">New Single Release!
  </div>

  <div class="${"card-body"}"><div class="${"row"}"><div class="${"col px-5"}"><img src="${"album-covers/hash-bang-slash.png"}" class="${"img-fluid img-thumbnail bg-secondary border-info"}" alt="${"Responsive image"}"></div></div>

    <div class="${"row"}"><div class="${"col py-3 small"}"><strong>#!/</strong> (Shebang Slash) is a new mico-genre invented at CATPEA during the 2020 pandemic.
        <a href="${"https://en.wikipedia.org/wiki/Shebang_(Unix)"}" rel="${"noopener noreferrer"}" target="${"_blank"}">Shebang</a>
        is used by Programmers in UNIX. The Slash is used by Samurai in Battle. Album Photo by <a href="${"https://unsplash.com/photos/2fRPxsArdkc"}" rel="${"noopener noreferrer"}" target="${"_blank"}">soosang</a>.
        </div></div>

    

    <div class="${"row"}"><div class="${"col"}"><button class="${["m-0 btn btn-secondary btn-sm",  "d-block" ].join(" ").trim()}" style="${"display: none;"}">${octicons.play.toSVG({ "class": "fill-black" })} Play</button>
        <button class="${["m-0 btn btn-secondary btn-sm",  ""].join(" ").trim()}" style="${"display: none;"}">${octicons.mute.toSVG({ "class": "fill-black" })} Stop</button></div></div>

    <div class="${"row"}"><div class="${"col"}"><div class="${["small text-info pt-3",  ""].join(" ").trim()}" style="${"display: none;"}">Audio generation may not work on all mobile devices due to high CPU speed requirements.
          Please use a desktop computer for high definition music composition in the browser.
        </div></div></div></div></div>`;
});

/* src/components/LofiSoundboard.svelte generated by Svelte v3.20.1 */

const LofiSoundboard = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let ready = false;
	let instrument = null;

	const primary = {
		meta: {
			"release": 1,
			"baseUrl": "./samples/rza/"
		},
		data: {
			//"G4": "fabf3c5cc58607bf2d5eb91021e53a4773c4fb23.mp3", // Stick 1
			//"G4": "dc39c0a1b5c1cd83b77703cff2f1900e4fc6e508.mp3", // Drum 1
			//"F6": "aab83ca9600e185be123c7dff74f9934af55e825.mp3", // Tsk 1
			"A1": "16a3307717ff4974787145c054171dc4ada8669f.mp3", // Misc 1 Squirrel
			"B1": "9f9ce4b24573bcc5aa95ab4ec9cedf22ac743905.mp3", // Misc 2 Metalic Drum Finger Hit
			"C1": "c0beffaadd0187c2a5108e44459e0e81d6a7b2ff.mp3", // Misc 3 Drum 1
			"D1": "16fd6ae36200cc85da243ce4e5b929ef77c5cf30.mp3", // Misc 4 Stick 2 in Reverse
			"E1": "5107c3a6c20e3133f593fac3e44b8ca534b8e395.mp3", // Misc 5 Cymbal
			"F1": "871b0cf227272c39a77fc3a754ea092d0b65223b.mp3", // Misc 6 Stick 3 Clap
			"G1": "df6e58fecc39a3985a6350d158131e4d599dba73.mp3", // Misc 7 Stick 1
			"A2": "b81c18280aed479809dca9c9b87614d6b5b1db4d.mp3", // SFX 1, Funk sound effect: Walking Cool
			"B2": "bebdc685f75f3b10b821f945cee5240c265596af.mp3", // SFX 2, Ringing SFX: Remembering
			"C2": "130c110c5d99a6c484afb29c06dec20047f9c8fd.mp3", // SFX 3, Ringing: Noticing Danger
			"D2": "2fc89124a9451bd9b51d22cfff794933b3b18364.mp3", // SFX 4, Drum 2
			"E2": "384902fe4cace75f37acdfaecd6cc4fd2137ecad.mp3", // SFX 5, Pipe Long
			"F2": "cbdad385aedd04d9e71c2bc308f944ab0cb4b34a.mp3", // SFX 6, Metal Pipe Hollow
			"G2": "00dbab16df8f3bf9b1559e32b139f56923f592fc.mp3", // Tsk 2
			"A3": "a3bafb69b3c80c9c6ccaba3745d0e6112f463d79.mp3", // SFX 7, Tiny Stick Ring
			"B3": "c91112945ad9744b4b0d440ce871fdf3d08947e7.mp3", // Pure Instument 1 - Gong
			"C3": "e7547271491320afd6e32a3d2f41f629eab91022.mp3", // Pure Instument 5 - Tambourine
			"D3": "294599aaec34f023e6149e90a6c8e0523df4c85f.mp3", // Pure Instument 7 - Shaker
			"E3": "53580c41ee4c9b9312d0b1952b3e62ac9e138ff2.mp3", // Pure Instument 2 - Guitar
			"F3": "8c950d4f8ae18441cf065db741e3e1c5570f6218.mp3", // Pure Instument 3 - Guitar
			"G3": "256e82e4b4972641b26162ac91d262fb0f7ff8bf.mp3", // Pure Instument 4 - Guitar
			"A4": "2ae533bd30909247b701bbc1f7b1563349947282.mp3", // Drum 2
			"B4": "55e11e95238bab9e8f60a7b377e6adf3766d9ede.mp3", // Drum 3
			"C4": "f1ec8695896bad0c68a9da0f9e4a482f28aca4e0.mp3", // Drum 4
			"D4": "c13bf775cbec7fbcdc8f459cb045860f57660251.mp3", // Drum 6
			"E4": "ac16b9241b329a8144113591018b8bbf485c8a05.mp3", // Drum 7
			"F4": "85606cf0cc23b9bd86b883ca4e4b74c5a23605d1.mp3", // Drum 5
			"G4": "1e5bb21d766235982ff453001379d75accb142c5.mp3", // Drum 4
			"A5": "35354ded0aadc635419c7b6b61748bb1e363946b.mp3", // Stick 7
			"B5": "721727714259f2c9f1fa8035a261e888fcca7c91.mp3", // Stick 1 Loud
			"C5": "98b6b793420ef22139daa30d46b8d98d0f4116b7.mp3", // Stick 2
			"D5": "9c4a05d1e181deda1de078ebdb99adcc19ada4fe.mp3", // Stick 6
			"E5": "f3ef81d821c76794a5e52acf3412441d94c19cce.mp3", // Stick 5
			"F5": "4b157822e8b5d272fb7aa29009baf9ec9d4af3ae.mp3", // Stick 3
			"G5": "ab7ec6dcc5fdebaadea68deb0e4567a6de4192ea.mp3", // Stick 4
			"A6": "dc4473aa907a2bf917e1b91bc537192e356620af.mp3", // Tsk 1
			"B6": "635b71f627705027d819fe87d0ed7028189d826d.mp3", // Pure Instument 6 - Tambourine
			"C6": "4e56575f8bd27f4a07cf4d791f66b3986c6e8dfe.mp3", // Tsk 5
			"D6": "e0fb86394e0258b50fb2a8f4c238a324e64c27b7.mp3", // Tsk 6
			"E6": "04e938821ca043c821b39d1abdeeaa2623fa8611.mp3", // Tsk 3
			"F6": "edf3184e2e8aa84176c2497d40311402a3b7ea75.mp3", // Tsk 7
			"G6": "123668fd36e854461cc1a5b34551e98cd162ba2d.mp3", // Tsk 4
			
		}
	};

	let notes = Object.keys(primary.data);

	async function load() {
		return new Promise(function (resolve, reject) {
				if (Tone.Sampler) {
					instrument = new Tone.Sampler(primary.data,
					{
							//release : primary.meta.release,
							baseUrl: primary.meta.baseUrl,
							onload: () => {
								resolve();
								console.log("Tone.Sampler onload");
							},
							onerror: e => {
								reject(e);
								console.log("Error", e);
							}
						}).toMaster();

					Tone.Buffer.on("load", function () {
						console.log("all buffers are loaded.");
					});
				}
			});
	}

	async function main() {
		await load();
		ready = true;
	}

	onMount(async () => {
		main();
	});

	return `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header"}">LOFI Soundboard
  </div>
  <div class="${"card-body"}"><div class="${"row"}"><div class="${"col text-center"}">${each(notes, (note, index) => `<button class="${"d-inline-block mb-1 p-2 btn btn-secondary btn-sm"}" ${!ready ? "disabled" : ""}>${escape(note)}</button>
            ${(index + 1) % 7 * 9 === 0 ? `<br>` : ``}`)}</div></div>
    <div class="${"row"}"><div class="${"col text-muted small pt-2"}">Each octave (row) marks a group of sounds, groups are as follows Misc, SFX, Instuments, Drums, Sticks, Tsk.
        Kit is expressed in <a href="${"https://en.wikipedia.org/wiki/Scientific_pitch_notation"}" rel="${"noopener noreferrer"}" target="${"_blank"}">Scientific Pitch Notation</a>.
        Samples graciously provided by <a href="${"http://hipstrumentals.com"}" rel="${"noopener noreferrer"}" target="${"_blank"}">Hipstrumentals</a>.
      </div></div></div></div>`;
});

/* src/controls/DrumLine.svelte generated by Svelte v3.20.1 */

const css = {
	code: ".regular-checkbox.svelte-1j43cqu{-webkit-appearance:none;background-color:darkgray;border:1px solid silver;line-height:14px;width:14px;height:14px;padding:2px;margin:0px;border-radius:0px;display:inline-block;position:relative}.regular-checkbox.sequence.svelte-1j43cqu{border-color:salmon}.regular-checkbox.odd.svelte-1j43cqu{background:grey}.regular-checkbox.divider.svelte-1j43cqu{margin-right:1px}.regular-checkbox.svelte-1j43cqu:checked{background:steelblue}",
	map: "{\"version\":3,\"file\":\"DrumLine.svelte\",\"sources\":[\"DrumLine.svelte\"],\"sourcesContent\":[\"<script>\\nimport { onMount } from 'svelte';\\n\\n// Pre-configure the GUI\\nexport let parts = 4;\\nexport let beats = 4;\\nexport let data = [];\\n\\n// Dynamic data that is sent from Master COntrol Program\\nexport let sequence = 0;\\n\\nonMount(async () => {\\n\\n});\\n\\n</script>\\n\\n<style>\\n\\n.regular-checkbox {\\n  -webkit-appearance: none;\\n  background-color: darkgray;\\n  border: 1px solid silver;\\n\\n  line-height:14px;\\n  width:14px;\\n  height:14px;\\n\\n  padding: 2px;\\n  margin:0px;\\n\\n\\n  border-radius: 0px;\\n\\n  display: inline-block;\\n  position: relative;\\n}\\n\\n.regular-checkbox.sequence{\\n  border-color: salmon;\\n\\n}\\n\\n.regular-checkbox.odd{\\n  background:grey;\\n}\\n.regular-checkbox.divider{\\n  margin-right: 1px;\\n}\\n.regular-checkbox:checked{\\n  background:steelblue;\\n}\\n\\n</style>\\n\\n{#each data as item, index}\\n    <input type=\\\"checkbox\\\" class=\\\"regular-checkbox\\\" bind:checked={item.enabled} class:odd='{(!!((item.beat+1) % 2))}' class:divider='{!(!!((item.part+1) % parts))}' class:sequence='{index===sequence}'>\\n{/each}\\n<!-- \\n<pre><code>\\n\\n{JSON.stringify(data,null,'  ')}\\n\\n</code></pre> -->\\n\"],\"names\":[],\"mappings\":\"AAmBA,iBAAiB,eAAC,CAAC,AACjB,kBAAkB,CAAE,IAAI,CACxB,gBAAgB,CAAE,QAAQ,CAC1B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAExB,YAAY,IAAI,CAChB,MAAM,IAAI,CACV,OAAO,IAAI,CAEX,OAAO,CAAE,GAAG,CACZ,OAAO,GAAG,CAGV,aAAa,CAAE,GAAG,CAElB,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,iBAAiB,wBAAS,CAAC,AACzB,YAAY,CAAE,MAAM,AAEtB,CAAC,AAED,iBAAiB,mBAAI,CAAC,AACpB,WAAW,IAAI,AACjB,CAAC,AACD,iBAAiB,uBAAQ,CAAC,AACxB,YAAY,CAAE,GAAG,AACnB,CAAC,AACD,gCAAiB,QAAQ,CAAC,AACxB,WAAW,SAAS,AACtB,CAAC\"}"
};

const DrumLine = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { parts = 4 } = $$props;
	let { beats = 4 } = $$props;
	let { data = [] } = $$props;
	let { sequence = 0 } = $$props;

	onMount(async () => {
		
	});

	if ($$props.parts === void 0 && $$bindings.parts && parts !== void 0) $$bindings.parts(parts);
	if ($$props.beats === void 0 && $$bindings.beats && beats !== void 0) $$bindings.beats(beats);
	if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
	if ($$props.sequence === void 0 && $$bindings.sequence && sequence !== void 0) $$bindings.sequence(sequence);
	$$result.css.add(css);

	return `${each(data, (item, index) => `<input type="${"checkbox"}" class="${[
		"regular-checkbox svelte-1j43cqu",
		(!!((item.beat + 1) % 2) ? "odd" : "") + " " + (!!!((item.part + 1) % parts) ? "divider" : "") + " " + (index === sequence ? "sequence" : "")
	].join(" ").trim()}"${add_attribute("checked", item.enabled, 1)}>`)}
`;
});

/* src/components/BeatSequencer.svelte generated by Svelte v3.20.1 */

const BeatSequencer = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let instrument = null;

	const primary = {
		meta: {
			"release": 1,
			"baseUrl": "./samples/rza/"
		},
		data: {
			//"G4": "fabf3c5cc58607bf2d5eb91021e53a4773c4fb23.mp3", // Stick 1
			//"G4": "dc39c0a1b5c1cd83b77703cff2f1900e4fc6e508.mp3", // Drum 1
			//"F6": "aab83ca9600e185be123c7dff74f9934af55e825.mp3", // Tsk 1
			"A1": "16a3307717ff4974787145c054171dc4ada8669f.mp3", // Misc 1 Squirrel
			"B1": "9f9ce4b24573bcc5aa95ab4ec9cedf22ac743905.mp3", // Misc 2 Metalic Drum Finger Hit
			"C1": "c0beffaadd0187c2a5108e44459e0e81d6a7b2ff.mp3", // Misc 3 Drum 1
			"D1": "16fd6ae36200cc85da243ce4e5b929ef77c5cf30.mp3", // Misc 4 Stick 2 in Reverse
			"E1": "5107c3a6c20e3133f593fac3e44b8ca534b8e395.mp3", // Misc 5 Cymbal
			"F1": "871b0cf227272c39a77fc3a754ea092d0b65223b.mp3", // Misc 6 Stick 3 Clap
			"G1": "df6e58fecc39a3985a6350d158131e4d599dba73.mp3", // Misc 7 Stick 1
			"A2": "b81c18280aed479809dca9c9b87614d6b5b1db4d.mp3", // SFX 1, Funk sound effect: Walking Cool
			"B2": "bebdc685f75f3b10b821f945cee5240c265596af.mp3", // SFX 2, Ringing SFX: Remembering
			"C2": "130c110c5d99a6c484afb29c06dec20047f9c8fd.mp3", // SFX 3, Ringing: Noticing Danger
			"D2": "2fc89124a9451bd9b51d22cfff794933b3b18364.mp3", // SFX 4, Drum 2
			"E2": "384902fe4cace75f37acdfaecd6cc4fd2137ecad.mp3", // SFX 5, Pipe Long
			"F2": "cbdad385aedd04d9e71c2bc308f944ab0cb4b34a.mp3", // SFX 6, Metal Pipe Hollow
			"G2": "00dbab16df8f3bf9b1559e32b139f56923f592fc.mp3", // Tsk 2
			"A3": "a3bafb69b3c80c9c6ccaba3745d0e6112f463d79.mp3", // SFX 7, Tiny Stick Ring
			"B3": "c91112945ad9744b4b0d440ce871fdf3d08947e7.mp3", // Pure Instument 1 - Gong
			"C3": "e7547271491320afd6e32a3d2f41f629eab91022.mp3", // Pure Instument 5 - Tambourine
			"D3": "294599aaec34f023e6149e90a6c8e0523df4c85f.mp3", // Pure Instument 7 - Shaker
			"E3": "53580c41ee4c9b9312d0b1952b3e62ac9e138ff2.mp3", // Pure Instument 2 - Guitar
			"F3": "8c950d4f8ae18441cf065db741e3e1c5570f6218.mp3", // Pure Instument 3 - Guitar
			"G3": "256e82e4b4972641b26162ac91d262fb0f7ff8bf.mp3", // Pure Instument 4 - Guitar
			"A4": "2ae533bd30909247b701bbc1f7b1563349947282.mp3", // Drum 2
			"B4": "55e11e95238bab9e8f60a7b377e6adf3766d9ede.mp3", // Drum 3
			"C4": "f1ec8695896bad0c68a9da0f9e4a482f28aca4e0.mp3", // Drum 4
			"D4": "c13bf775cbec7fbcdc8f459cb045860f57660251.mp3", // Drum 6
			"E4": "ac16b9241b329a8144113591018b8bbf485c8a05.mp3", // Drum 7
			"F4": "85606cf0cc23b9bd86b883ca4e4b74c5a23605d1.mp3", // Drum 5
			"G4": "1e5bb21d766235982ff453001379d75accb142c5.mp3", // Drum 4
			"A5": "35354ded0aadc635419c7b6b61748bb1e363946b.mp3", // Stick 7
			"B5": "721727714259f2c9f1fa8035a261e888fcca7c91.mp3", // Stick 1 Loud
			"C5": "98b6b793420ef22139daa30d46b8d98d0f4116b7.mp3", // Stick 2
			"D5": "9c4a05d1e181deda1de078ebdb99adcc19ada4fe.mp3", // Stick 6
			"E5": "f3ef81d821c76794a5e52acf3412441d94c19cce.mp3", // Stick 5
			"F5": "4b157822e8b5d272fb7aa29009baf9ec9d4af3ae.mp3", // Stick 3
			"G5": "ab7ec6dcc5fdebaadea68deb0e4567a6de4192ea.mp3", // Stick 4
			"A6": "dc4473aa907a2bf917e1b91bc537192e356620af.mp3", // Tsk 1
			"B6": "635b71f627705027d819fe87d0ed7028189d826d.mp3", // Pure Instument 6 - Tambourine
			"C6": "4e56575f8bd27f4a07cf4d791f66b3986c6e8dfe.mp3", // Tsk 5
			"D6": "e0fb86394e0258b50fb2a8f4c238a324e64c27b7.mp3", // Tsk 6
			"E6": "04e938821ca043c821b39d1abdeeaa2623fa8611.mp3", // Tsk 3
			"F6": "edf3184e2e8aa84176c2497d40311402a3b7ea75.mp3", // Tsk 7
			"G6": "123668fd36e854461cc1a5b34551e98cd162ba2d.mp3", // Tsk 4
			
		}
	};

	async function load() {
		return new Promise(function (resolve, reject) {
				if (Tone.Sampler) {
					instrument = new Tone.Sampler(primary.data,
					{
							//release : primary.meta.release,
							baseUrl: primary.meta.baseUrl,
							onload: () => {
								resolve();
								console.log("Tone.Sampler onload");
							},
							onerror: e => {
								reject(e);
								console.log("Error", e);
							}
						}).toMaster();

					Tone.Buffer.on("load", function () {
						console.log("all buffers are loaded.");
					});
				}
			});
	}

	let data = [
		{ label: "Drum", note: "C1", data: [] },
		{ label: "Drum", note: "C2", data: [] },
		{ label: "Drum", note: "C3", data: [] },
		{ label: "Drum", note: "C4", data: [] },
		{ label: "Drum", note: "C5", data: [] }
	];

	onMount(async () => {
		await load();
		var synth = new Tone.Synth().toMaster();

		// for(let item of data ){ } // for of main data
		data = data.map(item => {
			// populate data
			for (let beat = 0; beat < beats; beat++) {
				for (let part = 0; part < parts; part++) {
					item.data = item.data.concat({ beat, part, enabled: false });
				}
			}

			return item;
		});

		setInterval(
			() => {
				sequence++;

				if (sequence == parts * beats) {
					sequence = 0;
				}

				for (let item of data) {
					if (item.data[sequence].enabled) {
						instrument.triggerAttackRelease(item.note, "8n");
					}
				}
			},
			1000 * 60 / (160 * parts)
		);
	});

	let parts = 4;
	let beats = 4;
	let sequence = 4;

	return `<div class="${"card text-white bg-dark shadow"}"><div class="${"card-header"}">LOFI Beat Sequencer · BETA PREVIEW
  </div>

  <div class="${"card-body"}"><div class="${"row"}"><div class="${"col small text-muted"}"><small>Sorry the tool does not make any sounds, this is a test of the UI, which is a success, it is just styled checkboxes.
        You can click one of the boxes to mark where a sound is to fire.</small></div></div>

     <div class="${"row"}"><div class="${"col-3 small text-muted"}"><small>Instrument</small></div>
      <div class="${"col-9 p-0 small text-muted"}"><small>Sequence</small></div></div>



    ${each(data, (item, index) => `<div class="${"row"}"><div class="${"col-3 text-right"}"><small>${escape(item.note)}</small>
       </div>
     <div class="${"col-9 p-0"}">${validate_component(DrumLine, "DrumLine").$$render($$result, { data: item.data, parts, beats, sequence }, {}, {})}</div>
   </div>`)}



    </div></div>`;
});

/* src/routes/index.svelte generated by Svelte v3.20.1 */

const Routes = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const videos = {
		modified: "2020-01-25T13:52:05.520Z",
		changed: "recently",
		name: "Video Library",
		text: "Cat Pea Video Library contains hundreds of interesting, informative, and educational videos.",
		url: "/video?p=0&i=8",
		img: "videos.png"
	};

	let news = [
		{
			date: "2020-01-22T03:38:19.680Z",
			html: "Improved the randomness of Bodybuilding Advice. Items begin repeating after about 84 selections. I added a tiny little sub-progress bar to show when the system will reset, re-shuffle, and begin parading the newly re-shuffled list."
		},
		{
			date: "2020-01-22T03:23:19.680Z",
			html: "Added Preferences Pane to Bodybuilding Advice. Bodybuilding Advice is meant to serve as a starting point for more complex components."
		},
		{
			date: "2020-01-22T03:22:19.680Z",
			html: "Testing <a href=\"https://octicons.github.com/\" rel=\"noopener noreferrer\" target=\"_blank\">octicons</a>. I love the " + octicons.squirrel.toSVG({ "class": "fill-white", "width": 45 }) + " icon."
		}
	];

	function recalculateTimestamps() {
		videos.changed = moment(videos.modified).from(moment());

		news = news.map(i => {
			i.ago = moment(i.date).from(moment());
			return i;
		});
	}

	setInterval(recalculateTimestamps, 60000);
	recalculateTimestamps();

	return `${($$result.head += `${($$result.title = `<title>𝗖𝗔𝗧𝗣𝗘𝗔: World&#39;s Most Advanced Research Laboratories and Skunk Works</title>`, "")}`, "")}







<div class="${"container-fluid"}"><div class="${"row row-cols-1 row-cols-md-2 row-cols-xl-4"}"><div class="${"col pb-3"}">${validate_component(News, "News").$$render($$result, {}, {}, {})}</div>

    <div class="${"col pb-3"}">${validate_component(BeatSequencer, "BeatSequencer").$$render($$result, {}, {}, {})}</div>

    <div class="${"col pb-3"}">${validate_component(LofiSoundboard, "LofiSoundboard").$$render($$result, {}, {}, {})}</div>

    <div class="${"col pb-3"}">${validate_component(HiphopSong, "HiphopSong").$$render($$result, {}, {}, {})}</div>

    <div class="${"col pb-3"}">${validate_component(SciurineSong, "SciurineSong").$$render($$result, {}, {}, {})}</div>



    <div class="${"col pb-3"}">${validate_component(Squirrel, "Squirrel").$$render($$result, {}, {}, {})}</div>


    <div class="${"col pb-3"}"><div class="${"card text-white bg-dark shadow"}"><a${add_attribute("href", videos.url, 0)}><img${add_attribute("src", videos.img, 0)} class="${"card-img-top"}"${add_attribute("alt", videos.name, 0)}></a>
          <div class="${"card-body p-3"}"><h5 class="${"card-text"}">${escape(videos.name)}</h5>
            <p class="${"card-text"}">${escape(videos.text)}</p>
            <a${add_attribute("href", videos.url, 0)} class="${"btn btn-primary"}">${escape(videos.name)} »</a>
            <p class="${"card-text"}"><small class="${"text-muted"}">Updated ${escape(videos.changed)}</small></p></div></div></div>



    <div class="${"col pb-3"}">${validate_component(SeasonCalculator, "SeasonCalculator").$$render($$result, {}, {}, {})}</div>

    <div class="${"col pb-3"}">${validate_component(SongBeatCalculator, "SongBeatCalculator").$$render($$result, {}, {}, {})}</div>

    <div class="${"col pb-3"}">${validate_component(SongTempoChangeCalculator, "SongTempoChangeCalculator").$$render($$result, {}, {}, {})}</div>

    <div class="${"col pb-3"}">${validate_component(BodybuildingAdvice, "BodybuildingAdvice").$$render($$result, {}, {}, {})}</div>






    <div class="${"col pb-3"}">${validate_component(RandomVideo, "RandomVideo").$$render($$result, { duration: "40" }, {}, {})}</div></div></div>`;
});

function toVal(mix) {
	var k, y, str='';
	if (mix) {
		if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k] && (y = toVal(mix[k]))) {
						str && (str += ' ');
						str += y;
					}
				}
			} else {
				for (k in mix) {
					if (mix[k] && (y = toVal(k))) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else if (typeof mix !== 'boolean' && !mix.call) {
			str && (str += ' ');
			str += mix;
		}
	}
	return str;
}

function clsx () {
	var i=0, x, str='';
	while (i < arguments.length) {
		if (x = toVal(arguments[i++])) {
			str && (str += ' ');
			str += x;
		}
	}
	return str;
}

function clean($$props) {
  const rest = {};
  for (const key of Object.keys($$props)) {
    if (key !== "children" && key !== "$$scope" && key !== "$$slots") {
      rest[key] = $$props[key];
    }
  }
  return rest;
}

/* node_modules/book-gui/src/Illustration.svelte generated by Svelte v3.20.1 */

const Illustration = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	if ($$props.url === void 0 && $$bindings.url && url !== void 0) $$bindings.url(url);
	if ($$props.text === void 0 && $$bindings.text && text !== void 0) $$bindings.text(text);
	let classes = clsx(className, "card", "bg-danger", "text-white");
	let classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${validate_component(sveltestrap.CardImg, "CardImg").$$render($$result, { src: url, alt: title }, {}, {})}

  
  ${text.length > 0 || SLOTS && SLOTS.body
		? `${validate_component(sveltestrap.CardBody, "CardBody").$$render($$result, {}, {}, {
				default: () => `${title
				? `${validate_component(sveltestrap.CardTitle, "CardTitle").$$render($$result, { class: classesCardTitle }, {}, {
						default: () => `<h5>${escape(title)}</h5>`
					})}`
				: ``}
    ${$$slots.body ? $$slots.body({}) : ``}
    ${each(text, (line, index) => `${validate_component(sveltestrap.CardText, "CardText").$$render($$result, {}, {}, { default: () => `${line}` })}`)}`
			})}`
		: ``}

  ${$$slots.default ? $$slots.default({}) : ``}`
	})}`;
});

/* node_modules/book-gui/src/Text.svelte generated by Svelte v3.20.1 */

const Text = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	if ($$props.text === void 0 && $$bindings.text && text !== void 0) $$bindings.text(text);
	let classes = clsx(className, "card", "bg-danger", "text-white");
	let classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${title
		? `${validate_component(sveltestrap.CardHeader, "CardHeader").$$render($$result, {}, {}, {
				default: () => `<h5>${escape(title)}</h5>`
			})}`
		: ``}


  
  ${text.length > 0 || SLOTS && SLOTS.body
		? `${validate_component(sveltestrap.CardBody, "CardBody").$$render($$result, {}, {}, {
				default: () => `${$$slots.body ? $$slots.body({}) : ``}
    ${each(text, (line, index) => `${validate_component(sveltestrap.CardText, "CardText").$$render($$result, {}, {}, { default: () => `${line}` })}`)}`
			})}`
		: ``}

  ${$$slots.default ? $$slots.default({}) : ``}`
	})}`;
});

/* node_modules/book-gui/src/Link.svelte generated by Svelte v3.20.1 */

const Link = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	if ($$props.url === void 0 && $$bindings.url && url !== void 0) $$bindings.url(url);
	if ($$props.text === void 0 && $$bindings.text && text !== void 0) $$bindings.text(text);
	let classes = clsx(className, "card", "bg-secondary", "text-white");
	let classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${validate_component(sveltestrap.CardHeader, "CardHeader").$$render($$result, {}, {}, {
			default: () => `<h5>${escape(title)}</h5>`
		})}

  ${validate_component(sveltestrap.CardBody, "CardBody").$$render($$result, {}, {}, {
			default: () => `${$$slots.body ? $$slots.body({}) : ``}
    ${each(text, (line, index) => `${validate_component(sveltestrap.CardText, "CardText").$$render($$result, {}, {}, { default: () => `${line}` })}`)}
    ${validate_component(sveltestrap.Button, "Button").$$render(
				$$result,
				{
					color: "primary",
					size: "lg",
					href: url,
					rel: "noopener noreferrer",
					target: "_blank",
					class: "mt-4 btn-block"
				},
				{},
				{ default: () => `${escape(title)}` }
			)}`
		})}

  ${$$slots.default ? $$slots.default({}) : ``}`
	})}`;
});

/* node_modules/book-gui/src/Business.svelte generated by Svelte v3.20.1 */

const Business = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	if ($$props.url === void 0 && $$bindings.url && url !== void 0) $$bindings.url(url);
	if ($$props.text === void 0 && $$bindings.text && text !== void 0) $$bindings.text(text);
	let classes = clsx(className, "card", "bg-warning", "text-dark");
	let classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${validate_component(sveltestrap.CardImg, "CardImg").$$render($$result, { src: url, alt: title }, {}, {})}

  
  ${text.length > 0 || SLOTS && SLOTS.body
		? `${validate_component(sveltestrap.CardBody, "CardBody").$$render($$result, {}, {}, {
				default: () => `${title
				? `${validate_component(sveltestrap.CardTitle, "CardTitle").$$render($$result, { class: classesCardTitle }, {}, {
						default: () => `<h5>${escape(title)}</h5>`
					})}`
				: ``}
    ${$$slots.body ? $$slots.body({}) : ``}
    ${each(text, (line, index) => `${validate_component(sveltestrap.CardText, "CardText").$$render($$result, {}, {}, { default: () => `${line}` })}`)}`
			})}`
		: ``}

  ${$$slots.default ? $$slots.default({}) : ``}`
	})}`;
});

/* node_modules/book-gui/src/Youtube.svelte generated by Svelte v3.20.1 */

const Youtube = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { video = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	if ($$props.video === void 0 && $$bindings.video && video !== void 0) $$bindings.video(video);
	if ($$props.text === void 0 && $$bindings.text && text !== void 0) $$bindings.text(text);
	let classes = clsx(className, "card", "bg-dark", "text-white");
	let classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${title
		? `${validate_component(sveltestrap.CardHeader, "CardHeader").$$render($$result, {}, {}, {
				default: () => `<h5>${escape(title)}</h5>`
			})}`
		: ``}

  <a href="${"https://www.youtube.com/watch?v=" + escape(video)}" rel="${"noopener noreferrer"}" target="${"_blank"}">${validate_component(sveltestrap.CardImg, "CardImg").$$render(
			$$result,
			{
				bottom: true,
				src: "https://img.youtube.com/vi/" + video + "/0.jpg",
				alt: title
			},
			{},
			{}
		)}</a>

  
  ${text.length > 0 || SLOTS && SLOTS.body
		? `${validate_component(sveltestrap.CardBody, "CardBody").$$render($$result, {}, {}, {
				default: () => `${$$slots.body ? $$slots.body({}) : ``}
    ${each(text, (line, index) => `${validate_component(sveltestrap.CardText, "CardText").$$render($$result, {}, {}, { default: () => `${line}` })}`)}`
			})}`
		: ``}

  ${$$slots.default ? $$slots.default({}) : ``}`
	})}`;
});

/* node_modules/book-gui/src/Quote.svelte generated by Svelte v3.20.1 */

const Quote = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { author = "" } = $$props;
	let { url = "" } = $$props;
	let { source = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.author === void 0 && $$bindings.author && author !== void 0) $$bindings.author(author);
	if ($$props.url === void 0 && $$bindings.url && url !== void 0) $$bindings.url(url);
	if ($$props.source === void 0 && $$bindings.source && source !== void 0) $$bindings.source(source);
	if ($$props.text === void 0 && $$bindings.text && text !== void 0) $$bindings.text(text);
	let classes = clsx(className, "card", "bg-secondary", "text-white");
	let classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${validate_component(sveltestrap.CardBody, "CardBody").$$render($$result, {}, {}, {
			default: () => `<blockquote class="${"blockquote mb-0"}">${$$slots.body ? $$slots.body({}) : ``}
      ${each(text, (line, index) => `<p>${line}</p>`)}
      <footer class="${"blockquote-footer text-dark"}">${author
			? `${validate_component(sveltestrap.Button, "Button").$$render(
					$$result,
					{
						color: "text",
						size: "sm",
						href: url,
						rel: "noopener noreferrer",
						target: "_blank",
						class: "text-dark p-0"
					},
					{},
					{ default: () => `${escape(author)}` }
				)}`
			: ``}${source
			? ` in <cite${add_attribute("title", source, 0)}>${escape(source)}</cite>`
			: ``}</footer></blockquote>

    ${$$slots.default ? $$slots.default({}) : ``}`
		})}`
	})}`;
});

/* node_modules/book-gui/src/Poem.svelte generated by Svelte v3.20.1 */

const Poem = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	if ($$props.author === void 0 && $$bindings.author && author !== void 0) $$bindings.author(author);
	if ($$props.url === void 0 && $$bindings.url && url !== void 0) $$bindings.url(url);
	if ($$props.text === void 0 && $$bindings.text && text !== void 0) $$bindings.text(text);
	let classes = clsx(className, "card", "bg-secondary", "text-white");
	let classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${validate_component(sveltestrap.CardHeader, "CardHeader").$$render($$result, {}, {}, {
			default: () => `<h5>${escape(title)} ${validate_component(sveltestrap.Button, "Button").$$render(
				$$result,
				{
					color: "text",
					size: "sm",
					href: url,
					rel: "noopener noreferrer",
					target: "_blank",
					class: "text-dark p-0"
				},
				{},
				{
					default: () => `${author ? `by ${escape(author)}` : ``}`
				}
			)}</h5>`
		})}

  
  ${text.length > 0 || SLOTS && SLOTS.body
		? `${validate_component(sveltestrap.CardBody, "CardBody").$$render($$result, {}, {}, {
				default: () => `${$$slots.body ? $$slots.body({}) : ``}
    ${each(text, (line, index) => `${validate_component(sveltestrap.CardText, "CardText").$$render($$result, {}, {}, { default: () => `${line}` })}`)}`
			})}`
		: ``}

  ${$$slots.default ? $$slots.default({}) : ``}`
	})}`;
});

/* node_modules/book-gui/src/Subtitle.svelte generated by Svelte v3.20.1 */

const Subtitle = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	const props = clean($$props);
	if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.style === void 0 && $$bindings.style && style !== void 0) $$bindings.style(style);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	let classes = clsx(className, "card", "bg-info", "text-white");

	return `${validate_component(sveltestrap.Card, "Card").$$render($$result, Object.assign(props, { id }, { class: classes }, { style }), {}, {
		default: () => `${title
		? `${validate_component(sveltestrap.CardHeader, "CardHeader").$$render($$result, {}, {}, {
				default: () => `<h3 class="${"text-center"}">${escape(title)}</h3>`
			})}`
		: ``}

  ${$$slots.default ? $$slots.default({}) : ``}`
	})}`;
});

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const CONTEXT_KEY = {};

/* src/components/Nav.svelte generated by Svelte v3.20.1 */

const Nav = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { segment } = $$props;

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	return `<nav class="${"navbar navbar-expand-lg navbar-light bg-secondary shadow text-white\tmb-3 rounded-sm"}"><a class="${"navbar-brand"}" href="${"."}"><img src="${"cats/cat-01.png"}" alt="${"Logo Image"}"></a>

  <button class="${"navbar-toggler"}" type="${"button"}"><span class="${"navbar-toggler-icon"}"></span></button>

  <div class="${["navbar-collapse",  "collapse" ].join(" ").trim()}"><ul class="${"navbar-nav mr-auto"}"><li class="${["nav-item", segment === undefined ? "selected" : ""].join(" ").trim()}"><a class="${"nav-link"}" href="${"."}">Home <span class="${"sr-only"}">(current)</span></a></li>

      
      

      <li class="${["nav-item", segment === "video" ? "selected" : ""].join(" ").trim()}"><a class="${"nav-link"}" href="${"/video?p=0&i=8"}">Video Library <span class="${"sr-only"}">(current)</span></a></li>

      <li class="${["nav-item", segment === "warrior" ? "selected" : ""].join(" ").trim()}"><a class="${"nav-link"}" href="${"/warrior"}">The Warrior Book <span class="${"sr-only"}">(current)</span></a></li>




      </ul></div></nav>`;
});

/* src/routes/_layout.svelte generated by Svelte v3.20.1 */

const Layout = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { segment } = $$props;
	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	return `${validate_component(Nav, "Nav").$$render($$result, { segment }, {}, {})}

<main>${$$slots.default ? $$slots.default({}) : ``}</main>

`;
});

/* src/routes/_error.svelte generated by Svelte v3.20.1 */

const css$1 = {
	code: "h1.svelte-hc3g3x,p.svelte-hc3g3x{margin:0 auto}h1.svelte-hc3g3x{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-hc3g3x{margin:1em auto}@media(min-width: 480px){h1.svelte-hc3g3x{font-size:4em}}",
	map: "{\"version\":3,\"file\":\"_error.svelte\",\"sources\":[\"_error.svelte\"],\"sourcesContent\":[\"<script>\\n  export let status;\\n  export let error;\\n\\n  const dev = \\\"development\\\" === 'development';\\n\\n  // This will print error in terminal\\n  if(dev && error.stack){\\n    console.log('ERROR: %s' + error.message)\\n    console.log(error.stack);\\n  }\\n\\n</script>\\n\\n<style>\\n  h1, p {\\n    margin: 0 auto;\\n  }\\n\\n  h1 {\\n    font-size: 2.8em;\\n    font-weight: 700;\\n    margin: 0 0 0.5em 0;\\n  }\\n\\n  p {\\n    margin: 1em auto;\\n  }\\n\\n  @media (min-width: 480px) {\\n    h1 {\\n      font-size: 4em;\\n    }\\n  }\\n</style>\\n\\n<svelte:head>\\n  <title>𝗖𝗔𝗧𝗣𝗘𝗔: World's Most Advanced Research Laboratories and Skunk Works</title>\\n</svelte:head>\\n\\n<div class=\\\"container text-small text-primary\\\">\\n<div class=\\\"row\\\">\\n<div class=\\\"col\\\">\\n\\n<h1>World's Most Advanced Research Laboratories and Skunk Works</h1>\\n<h2>The catpea is an annual pouncy feline from the genus Panthera. Due to his tolerance for serious workouts and low effort, he is kind of a big deal in the semiarid plazas of Westland.</h2>\\n\\n\\n<p>Code {status} &middot; {error.message}</p>\\n\\n{#if dev && error.stack}\\n  <pre class=\\\"text-warning\\\">{error.stack}</pre>\\n{/if}\\n\\n</div>\\n</div>\\n</div>\\n\"],\"names\":[],\"mappings\":\"AAeE,gBAAE,CAAE,CAAC,cAAC,CAAC,AACL,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACrB,CAAC,AAED,CAAC,cAAC,CAAC,AACD,MAAM,CAAE,GAAG,CAAC,IAAI,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,AAChB,CAAC,AACH,CAAC\"}"
};

const Error$1 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { status } = $$props;
	let { error } = $$props;

	// This will print error in terminal
	if ( error.stack) {
		console.log("ERROR: %s" + error.message);
		console.log(error.stack);
	}

	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	$$result.css.add(css$1);

	return `${($$result.head += `${($$result.title = `<title>𝗖𝗔𝗧𝗣𝗘𝗔: World&#39;s Most Advanced Research Laboratories and Skunk Works</title>`, "")}`, "")}

<div class="${"container text-small text-primary"}"><div class="${"row"}"><div class="${"col"}"><h1 class="${"svelte-hc3g3x"}">World&#39;s Most Advanced Research Laboratories and Skunk Works</h1>
<h2>The catpea is an annual pouncy feline from the genus Panthera. Due to his tolerance for serious workouts and low effort, he is kind of a big deal in the semiarid plazas of Westland.</h2>


<p class="${"svelte-hc3g3x"}">Code ${escape(status)} · ${escape(error.message)}</p>

${ error.stack
	? `<pre class="${"text-warning"}">${escape(error.stack)}</pre>`
	: ``}</div></div></div>`;
});

/* src/node_modules/@sapper/internal/App.svelte generated by Svelte v3.20.1 */

const App = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { stores } = $$props;
	let { error } = $$props;
	let { status } = $$props;
	let { segments } = $$props;
	let { level0 } = $$props;
	let { level1 = null } = $$props;
	setContext(CONTEXT_KEY, stores);
	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);

	return `


${validate_component(Layout, "Layout").$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `${error
		? `${validate_component(Error$1, "Error").$$render($$result, { error, status }, {}, {})}`
		: `${validate_component(level1.component || missing_component, "svelte:component").$$render($$result, Object.assign(level1.props), {}, {})}`}`
	})}`;
});

// This file is generated by Sapper — do not edit it!

if (typeof window !== 'undefined') {
	new Promise(function (resolve) { resolve(require('./sapper-dev-client-64a06d75.js')); }).then(client => {
		client.connect(10000);
	});
}

const initial_data = typeof __SAPPER__ !== 'undefined' && __SAPPER__;

const stores = {
	page: writable({}),
	preloading: writable(null),
	session: writable(initial_data && initial_data.session)
};

stores.session.subscribe(async value => {

	return;
});

const stores$1 = () => getContext(CONTEXT_KEY);

/* src/routes/warrior.svelte generated by Svelte v3.20.1 */

const Warrior = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const componentLookup = {
		image: Illustration,
		business: Business,
		text: Text,
		youtube: Youtube,
		quote: Quote,
		poem: Poem,
		subtitle: Subtitle,
		link: Link
	};

	const { page } = stores$1();
	let pageReady = false;
	let database = [];
	let content = { meta: {}, data: [] };
	let percent = 0;
	let contentNext = { meta: {}, data: [] };
	let contentPrev = { meta: {}, data: [] };

	// Calculations
	let currentIndex = null;

	//DEV
	function index() {
		const response = {
			meta: { "name": "index", "title": "Index" },
			data: [
				{
					"type": "text",
					"title": "Table of Contents",
					"text": []
				}
			]
		};

		database.forEach(function (item) {
			response.data[0].text.push(`<a href="warrior?chapter=${item.meta.name}">${item.meta.title}</a>`);
		});

		return response;
	}

	onMount(async function () {
		const res = await fetch("book.json");
		const json = await res.json();
		pageReady = true;
		database = json;

		page.subscribe(value => {
			content = database.find(content => content.meta.name == value.query.chapter) || index();
			currentIndex = database.indexOf(content);
			console.log("currentIndex", currentIndex);
			let prevIndex = currentIndex - 1;
			if (prevIndex < 0) prevIndex = database.length - 1;
			let nextIndex = currentIndex + 1;
			if (nextIndex > database.length - 1) nextIndex = 0;
			contentNext = database[nextIndex];
			contentPrev = database[prevIndex];
			console.log("prevIndex", prevIndex);
			console.log("nextIndex", nextIndex);
			percent = calculatePercent(currentIndex + 1, database.length) * 100;
		});
	}); //database.forEach(chapter => chapter.data.forEach(item=>types.add(item.type)))
	// database.forEach(chapter => chapter.data.forEach(item=>Object.keys(item).forEach(item=>types.add(item)) ))
	// console.log(Array.from(types), types);

	return `${($$result.head += `${($$result.title = `<title>𝗖𝗔𝗧𝗣𝗘𝗔: Warrior</title>`, "")}`, "")}


<div class="${["container-fluid text-warning", pageReady ? "visible" : ""].join(" ").trim()}" style="${"visibility: hidden;"}"><nav class="${"mb-5"}" aria-label="${"breadcrumb"}"><ol class="${"breadcrumb bg-dark text-white"}"><li class="${"breadcrumb-item"}"><a href="${"warrior?chapter=index"}">Warrior</a></li>
    <li class="${"breadcrumb-item active"}" aria-current="${"page"}">${escape(content.meta.title)}</li></ol></nav></div>

<div class="${["container-fluid text-warning py-5", pageReady ? "visible" : ""].join(" ").trim()}" style="${"visibility: hidden;"}">${each(content.data, item => `<div class="${"row"}"><div class="${"col-md-2 col-lg-3 col-xl-4"}"></div>

    <div class="${"col-12 col-md-8 col-lg-6 col-xl-4 mb-5"}">${validate_component(componentLookup[item.type] || missing_component, "svelte:component").$$render($$result, Object.assign(item), {}, {})}</div>

  <div class="${"col-md-2 col-lg-3 col-xl-4"}"></div>


  </div>`)}</div>

<div class="${["container-fluid text-warning", pageReady ? "visible" : ""].join(" ").trim()}" style="${"visibility: hidden;"}"><div class="${"progress bg-dark"}"><div class="${"progress-bar progress-bar-striped progress-bar-animated-x"}" role="${"progressbar"}"${add_attribute("aria-valuenow", percent, 0)} aria-valuemin="${"0"}" aria-valuemax="${"100"}" style="${"width: " + escape(percent) + "%"}"></div></div>

  <nav aria-label="${"Page Navigation"}"><p class="${"py-3"}"><a href="${"warrior?chapter=" + escape(contentNext.meta.name)}" class="${"btn btn-lg btn-primary btn-block"}">${escape(contentNext.meta.title)} <img style="${"width: 1rem; height:1rem;"}" src="${"warrior/images/arrow-alt-circle-right.svg"}"${add_attribute("alt", contentNext.meta.title, 0)}></a></p>

    <p class="${"py-3"}"><a href="${"warrior?chapter=" + escape(contentPrev.meta.name)}" class="${"btn btn-secondary"}"><img style="${"width: 1rem; height:1rem;"}" src="${"warrior/images/arrow-alt-circle-left.svg"}"${add_attribute("alt", contentPrev.meta.title, 0)}> ${escape(contentPrev.meta.title)}</a>
      <a href="${"warrior?chapter=index"}" class="${"btn btn-secondary"}"><img alt="${"Index"}" style="${"width: 1rem; height:1rem;"}" src="${"warrior/images/list-alt.svg"}"></a></p></nav></div>`;
});

/* src/routes/video.svelte generated by Svelte v3.20.1 */

const Video = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let $page;
	const { page } = stores$1();
	validate_store(page, "page");
	$page = get_store_value(page);
	let pageReady = false;
	let database = [];

	onMount(async function () {
		const res = await fetch("youtube.json");
		const json = await res.json();
		database = json;
		console.log("database.length: %d", database.length);
		pageReady = true;
	});

	validate_store(page, "page");
	$page = get_store_value(page);
	let start = parseInt($page.query.p) * parseInt($page.query.i);
	let end = start + parseInt($page.query.i);
	let slice = database.slice(start, end);

	return `${($$result.head += `${($$result.title = `<title>𝗖𝗔𝗧𝗣𝗘𝗔: Videos</title>`, "")}`, "")}


<div class="${["container-fluid", pageReady ? "visible" : ""].join(" ").trim()}" style="${"visibility: hidden;"}"><div class="${"row row-cols-1 row-cols-md-2 row-cols-xl-4"}">${each(slice, post => `<div class="${"col mb-4"}"><div class="${"card bg-secondary text-white shadow p-0 m-0"}"><a${add_attribute("href", post.url, 0)} rel="${"noopener noreferrer"}" target="${"_blank"}"><img${add_attribute("src", post.image, 0)} class="${"card-img-top"}"${add_attribute("alt", post.title, 0)}></a>
          <div class="${"card-body p-3"}"><h5 class="${"card-text small"}">${escape(post.title)}</h5>
          </div></div>
      </div>`)}</div>

    <div class="${["row", parseInt($page.query.p) - 1 > -1 ? "d-flex" : ""].join(" ").trim()}" style="${"display: none;"}"><div class="${"col-md-6 mb-4 order-2 order-md-1"}"><a class="${"btn btn-secondary btn-lg text-dark shadow"}" href="${"/video?p=" + escape(parseInt($page.query.p) - 1) + "&i=" + escape($page.query.i)}">« Return to page ${escape(parseInt($page.query.p))}</a></div>

      <div class="${"col-md-6 mb-4 text-md-right order-1 order-md-2"}"><div class="${"p-2 lead text-muted"}">Viewing page ${escape(parseInt($page.query.p) + 1)} out of ${escape(Math.ceil(database.length / parseInt($page.query.i)))}</div></div></div>

    <div class="${[
		"row",
		(parseInt($page.query.p) + 1) * parseInt($page.query.i) < database.length
		? "d-flex"
		: ""
	].join(" ").trim()}" style="${"display: none;"}"><div class="${"col mb-4"}"><a class="${"btn btn-secondary btn-lg btn-block shadow"}" href="${"/video?p=" + escape(parseInt($page.query.p) + 1) + "&i=" + escape($page.query.i)}">Page ${escape(parseInt($page.query.p) + 2)} »</a></div></div>

    <div class="${[
		"row",
		(parseInt($page.query.p) + 1) * parseInt($page.query.i) >= database.length
		? "d-flex"
		: ""
	].join(" ").trim()}" style="${"display: none;"}"><div class="${"col mb-4"}"><a class="${"btn btn-secondary btn-lg btn-block shadow"}" href="${"/video?p=0&i=" + escape($page.query.i)}">Return to page 1 ∞</a></div></div></div>`;
});

// This file is generated by Sapper — do not edit it!

const manifest = {
	server_routes: [
		
	],

	pages: [
		{
			// index.svelte
			pattern: /^\/$/,
			parts: [
				{ name: "index", file: "index.svelte", component: Routes }
			]
		},

		{
			// warrior.svelte
			pattern: /^\/warrior\/?$/,
			parts: [
				{ name: "warrior", file: "warrior.svelte", component: Warrior }
			]
		},

		{
			// video.svelte
			pattern: /^\/video\/?$/,
			parts: [
				{ name: "video", file: "video.svelte", component: Video }
			]
		}
	],

	root: Layout,
	root_preload: () => {},
	error: Error$1
};

const build_dir = "__sapper__/dev";

const src_dir = "src";

function get_server_route_handler(routes) {
	async function handle_route(route, req, res, next) {
		req.params = route.params(route.pattern.exec(req.path));

		const method = req.method.toLowerCase();
		// 'delete' cannot be exported from a module because it is a keyword,
		// so check for 'del' instead
		const method_export = method === 'delete' ? 'del' : method;
		const handle_method = route.handlers[method_export];
		if (handle_method) {
			if (process.env.SAPPER_EXPORT) {
				const { write, end, setHeader } = res;
				const chunks = [];
				const headers = {};

				// intercept data so that it can be exported
				res.write = function(chunk) {
					chunks.push(Buffer.from(chunk));
					write.apply(res, arguments);
				};

				res.setHeader = function(name, value) {
					headers[name.toLowerCase()] = value;
					setHeader.apply(res, arguments);
				};

				res.end = function(chunk) {
					if (chunk) chunks.push(Buffer.from(chunk));
					end.apply(res, arguments);

					process.send({
						__sapper__: true,
						event: 'file',
						url: req.url,
						method: req.method,
						status: res.statusCode,
						type: headers['content-type'],
						body: Buffer.concat(chunks).toString()
					});
				};
			}

			const handle_next = (err) => {
				if (err) {
					res.statusCode = 500;
					res.end(err.message);
				} else {
					process.nextTick(next);
				}
			};

			try {
				await handle_method(req, res, handle_next);
			} catch (err) {
				console.error(err);
				handle_next(err);
			}
		} else {
			// no matching handler for method
			process.nextTick(next);
		}
	}

	return function find_route(req, res, next) {
		for (const route of routes) {
			if (route.pattern.test(req.path)) {
				handle_route(route, req, res, next);
				return;
			}
		}

		next();
	};
}

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var parse_1 = parse;
var serialize_1 = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim();
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      case 'none':
        str += '; SameSite=None';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

var cookie = {
	parse: parse_1,
	serialize: serialize_1
};

var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
    '<': '\\u003C',
    '>': '\\u003E',
    '/': '\\u002F',
    '\\': '\\\\',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\0': '\\0',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join('\0');
function devalue(value) {
    var counts = new Map();
    function walk(thing) {
        if (typeof thing === 'function') {
            throw new Error("Cannot stringify a function");
        }
        if (counts.has(thing)) {
            counts.set(thing, counts.get(thing) + 1);
            return;
        }
        counts.set(thing, 1);
        if (!isPrimitive(thing)) {
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                case 'Date':
                case 'RegExp':
                    return;
                case 'Array':
                    thing.forEach(walk);
                    break;
                case 'Set':
                case 'Map':
                    Array.from(thing).forEach(walk);
                    break;
                default:
                    var proto = Object.getPrototypeOf(thing);
                    if (proto !== Object.prototype &&
                        proto !== null &&
                        Object.getOwnPropertyNames(proto).sort().join('\0') !== objectProtoOwnPropertyNames) {
                        throw new Error("Cannot stringify arbitrary non-POJOs");
                    }
                    if (Object.getOwnPropertySymbols(thing).length > 0) {
                        throw new Error("Cannot stringify POJOs with symbolic keys");
                    }
                    Object.keys(thing).forEach(function (key) { return walk(thing[key]); });
            }
        }
    }
    walk(value);
    var names = new Map();
    Array.from(counts)
        .filter(function (entry) { return entry[1] > 1; })
        .sort(function (a, b) { return b[1] - a[1]; })
        .forEach(function (entry, i) {
        names.set(entry[0], getName(i));
    });
    function stringify(thing) {
        if (names.has(thing)) {
            return names.get(thing);
        }
        if (isPrimitive(thing)) {
            return stringifyPrimitive(thing);
        }
        var type = getType(thing);
        switch (type) {
            case 'Number':
            case 'String':
            case 'Boolean':
                return "Object(" + stringify(thing.valueOf()) + ")";
            case 'RegExp':
                return thing.toString();
            case 'Date':
                return "new Date(" + thing.getTime() + ")";
            case 'Array':
                var members = thing.map(function (v, i) { return i in thing ? stringify(v) : ''; });
                var tail = thing.length === 0 || (thing.length - 1 in thing) ? '' : ',';
                return "[" + members.join(',') + tail + "]";
            case 'Set':
            case 'Map':
                return "new " + type + "([" + Array.from(thing).map(stringify).join(',') + "])";
            default:
                var obj = "{" + Object.keys(thing).map(function (key) { return safeKey(key) + ":" + stringify(thing[key]); }).join(',') + "}";
                var proto = Object.getPrototypeOf(thing);
                if (proto === null) {
                    return Object.keys(thing).length > 0
                        ? "Object.assign(Object.create(null)," + obj + ")"
                        : "Object.create(null)";
                }
                return obj;
        }
    }
    var str = stringify(value);
    if (names.size) {
        var params_1 = [];
        var statements_1 = [];
        var values_1 = [];
        names.forEach(function (name, thing) {
            params_1.push(name);
            if (isPrimitive(thing)) {
                values_1.push(stringifyPrimitive(thing));
                return;
            }
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                    values_1.push("Object(" + stringify(thing.valueOf()) + ")");
                    break;
                case 'RegExp':
                    values_1.push(thing.toString());
                    break;
                case 'Date':
                    values_1.push("new Date(" + thing.getTime() + ")");
                    break;
                case 'Array':
                    values_1.push("Array(" + thing.length + ")");
                    thing.forEach(function (v, i) {
                        statements_1.push(name + "[" + i + "]=" + stringify(v));
                    });
                    break;
                case 'Set':
                    values_1.push("new Set");
                    statements_1.push(name + "." + Array.from(thing).map(function (v) { return "add(" + stringify(v) + ")"; }).join('.'));
                    break;
                case 'Map':
                    values_1.push("new Map");
                    statements_1.push(name + "." + Array.from(thing).map(function (_a) {
                        var k = _a[0], v = _a[1];
                        return "set(" + stringify(k) + ", " + stringify(v) + ")";
                    }).join('.'));
                    break;
                default:
                    values_1.push(Object.getPrototypeOf(thing) === null ? 'Object.create(null)' : '{}');
                    Object.keys(thing).forEach(function (key) {
                        statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
                    });
            }
        });
        statements_1.push("return " + str);
        return "(function(" + params_1.join(',') + "){" + statements_1.join(';') + "}(" + values_1.join(',') + "))";
    }
    else {
        return str;
    }
}
function getName(num) {
    var name = '';
    do {
        name = chars[num % chars.length] + name;
        num = ~~(num / chars.length) - 1;
    } while (num >= 0);
    return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
    return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
    if (typeof thing === 'string')
        return stringifyString(thing);
    if (thing === void 0)
        return 'void 0';
    if (thing === 0 && 1 / thing < 0)
        return '-0';
    var str = String(thing);
    if (typeof thing === 'number')
        return str.replace(/^(-)?0\./, '$1.');
    return str;
}
function getType(thing) {
    return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
    return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
    return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
    var result = '"';
    for (var i = 0; i < str.length; i += 1) {
        var char = str.charAt(i);
        var code = char.charCodeAt(0);
        if (char === '"') {
            result += '\\"';
        }
        else if (char in escaped$1) {
            result += escaped$1[char];
        }
        else if (code >= 0xd800 && code <= 0xdfff) {
            var next = str.charCodeAt(i + 1);
            // If this is the beginning of a [high, low] surrogate pair,
            // add the next two characters, otherwise escape
            if (code <= 0xdbff && (next >= 0xdc00 && next <= 0xdfff)) {
                result += char + str[++i];
            }
            else {
                result += "\\u" + code.toString(16).toUpperCase();
            }
        }
        else {
            result += char;
        }
    }
    result += '"';
    return result;
}

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = Url.parse;
const format_url = Url.format;

const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parse_url(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parse_url(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parse_url(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream.PassThrough;
const resolve_url = Url.resolve;

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch$1(url, opts) {

	// allow custom promise
	if (!fetch$1.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch$1.Promise;

	// wrap http.request into fetch
	return new fetch$1.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https : http).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream.Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch$1.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				const locationURL = location === null ? null : resolve_url(request.url, location);

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout
						};

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch$1(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib.Z_SYNC_FLUSH,
				finishFlush: zlib.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib.createInflate());
					} else {
						body = body.pipe(zlib.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
				body = body.pipe(zlib.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch$1.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch$1.Promise = global.Promise;

function get_page_handler(
	manifest,
	session_getter
) {
	const get_build_info =  () => JSON.parse(fs.readFileSync(path.join(build_dir, 'build.json'), 'utf-8'))
		;

	const template =  () => read_template(src_dir)
		;

	const has_service_worker = fs.existsSync(path.join(build_dir, 'service-worker.js'));

	const { server_routes, pages } = manifest;
	const error_route = manifest.error;

	function bail(req, res, err) {
		console.error(err);

		const message =  escape_html(err.message) ;

		res.statusCode = 500;
		res.end(`<pre>${message}</pre>`);
	}

	function handle_error(req, res, statusCode, error) {
		handle_page({
			pattern: null,
			parts: [
				{ name: null, component: error_route }
			]
		}, req, res, statusCode, error || new Error('Unknown error in preload function'));
	}

	async function handle_page(page, req, res, status = 200, error = null) {
		const is_service_worker_index = req.path === '/service-worker-index.html';
		const build_info




 = get_build_info();

		res.setHeader('Content-Type', 'text/html');
		res.setHeader('Cache-Control',  'no-cache' );

		// preload main.js and current route
		// TODO detect other stuff we can preload? images, CSS, fonts?
		let preloaded_chunks = Array.isArray(build_info.assets.main) ? build_info.assets.main : [build_info.assets.main];
		if (!error && !is_service_worker_index) {
			page.parts.forEach(part => {
				if (!part) return;

				// using concat because it could be a string or an array. thanks webpack!
				preloaded_chunks = preloaded_chunks.concat(build_info.assets[part.name]);
			});
		}

		if (build_info.bundler === 'rollup') {
			// TODO add dependencies and CSS
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map(file => `<${req.baseUrl}/client/${file}>;rel="modulepreload"`)
				.join(', ');

			res.setHeader('Link', link);
		} else {
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map((file) => {
					const as = /\.css$/.test(file) ? 'style' : 'script';
					return `<${req.baseUrl}/client/${file}>;rel="preload";as="${as}"`;
				})
				.join(', ');

			res.setHeader('Link', link);
		}

		const session = session_getter(req, res);

		let redirect;
		let preload_error;

		const preload_context = {
			redirect: (statusCode, location) => {
				if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
					throw new Error(`Conflicting redirects`);
				}
				location = location.replace(/^\//g, ''); // leading slash (only)
				redirect = { statusCode, location };
			},
			error: (statusCode, message) => {
				preload_error = { statusCode, message };
			},
			fetch: (url, opts) => {
				const parsed = new Url.URL(url, `http://127.0.0.1:${process.env.PORT}${req.baseUrl ? req.baseUrl + '/' :''}`);

				if (opts) {
					opts = Object.assign({}, opts);

					const include_cookies = (
						opts.credentials === 'include' ||
						opts.credentials === 'same-origin' && parsed.origin === `http://127.0.0.1:${process.env.PORT}`
					);

					if (include_cookies) {
						opts.headers = Object.assign({}, opts.headers);

						const cookies = Object.assign(
							{},
							cookie.parse(req.headers.cookie || ''),
							cookie.parse(opts.headers.cookie || '')
						);

						const set_cookie = res.getHeader('Set-Cookie');
						(Array.isArray(set_cookie) ? set_cookie : [set_cookie]).forEach(str => {
							const match = /([^=]+)=([^;]+)/.exec(str);
							if (match) cookies[match[1]] = match[2];
						});

						const str = Object.keys(cookies)
							.map(key => `${key}=${cookies[key]}`)
							.join('; ');

						opts.headers.cookie = str;
					}
				}

				return fetch$1(parsed.href, opts);
			}
		};

		let preloaded;
		let match;
		let params;

		try {
			const root_preloaded = manifest.root_preload
				? manifest.root_preload.call(preload_context, {
					host: req.headers.host,
					path: req.path,
					query: req.query,
					params: {}
				}, session)
				: {};

			match = error ? null : page.pattern.exec(req.path);


			let toPreload = [root_preloaded];
			if (!is_service_worker_index) {
				toPreload = toPreload.concat(page.parts.map(part => {
					if (!part) return null;

					// the deepest level is used below, to initialise the store
					params = part.params ? part.params(match) : {};

					return part.preload
						? part.preload.call(preload_context, {
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}, session)
						: {};
				}));
			}

			preloaded = await Promise.all(toPreload);
		} catch (err) {
			if (error) {
				return bail(req, res, err)
			}

			preload_error = { statusCode: 500, message: err };
			preloaded = []; // appease TypeScript
		}

		try {
			if (redirect) {
				const location = Url.resolve((req.baseUrl || '') + '/', redirect.location);

				res.statusCode = redirect.statusCode;
				res.setHeader('Location', location);
				res.end();

				return;
			}

			if (preload_error) {
				handle_error(req, res, preload_error.statusCode, preload_error.message);
				return;
			}

			const segments = req.path.split('/').filter(Boolean);

			// TODO make this less confusing
			const layout_segments = [segments[0]];
			let l = 1;

			page.parts.forEach((part, i) => {
				layout_segments[l] = segments[i + 1];
				if (!part) return null;
				l++;
			});

			const props = {
				stores: {
					page: {
						subscribe: writable({
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}).subscribe
					},
					preloading: {
						subscribe: writable(null).subscribe
					},
					session: writable(session)
				},
				segments: layout_segments,
				status: error ? status : 200,
				error: error ? error instanceof Error ? error : { message: error } : null,
				level0: {
					props: preloaded[0]
				},
				level1: {
					segment: segments[0],
					props: {}
				}
			};

			if (!is_service_worker_index) {
				let l = 1;
				for (let i = 0; i < page.parts.length; i += 1) {
					const part = page.parts[i];
					if (!part) continue;

					props[`level${l++}`] = {
						component: part.component,
						props: preloaded[i + 1] || {},
						segment: segments[i]
					};
				}
			}

			const { html, head, css } = App.render(props);

			const serialized = {
				preloaded: `[${preloaded.map(data => try_serialize(data)).join(',')}]`,
				session: session && try_serialize(session, err => {
					throw new Error(`Failed to serialize session data: ${err.message}`);
				}),
				error: error && try_serialize(props.error)
			};

			let script = `__SAPPER__={${[
				error && `error:${serialized.error},status:${status}`,
				`baseUrl:"${req.baseUrl}"`,
				serialized.preloaded && `preloaded:${serialized.preloaded}`,
				serialized.session && `session:${serialized.session}`
			].filter(Boolean).join(',')}};`;

			if (has_service_worker) {
				script += `if('serviceWorker' in navigator)navigator.serviceWorker.register('${req.baseUrl}/service-worker.js');`;
			}

			const file = [].concat(build_info.assets.main).filter(file => file && /\.js$/.test(file))[0];
			const main = `${req.baseUrl}/client/${file}`;

			if (build_info.bundler === 'rollup') {
				if (build_info.legacy_assets) {
					const legacy_main = `${req.baseUrl}/client/legacy/${build_info.legacy_assets.main}`;
					script += `(function(){try{eval("async function x(){}");var main="${main}"}catch(e){main="${legacy_main}"};var s=document.createElement("script");try{new Function("if(0)import('')")();s.src=main;s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main",main);}document.head.appendChild(s);}());`;
				} else {
					script += `var s=document.createElement("script");try{new Function("if(0)import('')")();s.src="${main}";s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main","${main}")}document.head.appendChild(s)`;
				}
			} else {
				script += `</script><script src="${main}">`;
			}

			let styles;

			// TODO make this consistent across apps
			// TODO embed build_info in placeholder.ts
			if (build_info.css && build_info.css.main) {
				const css_chunks = new Set();
				if (build_info.css.main) css_chunks.add(build_info.css.main);
				page.parts.forEach(part => {
					if (!part) return;
					const css_chunks_for_part = build_info.css.chunks[part.file];

					if (css_chunks_for_part) {
						css_chunks_for_part.forEach(file => {
							css_chunks.add(file);
						});
					}
				});

				styles = Array.from(css_chunks)
					.map(href => `<link rel="stylesheet" href="client/${href}">`)
					.join('');
			} else {
				styles = (css && css.code ? `<style>${css.code}</style>` : '');
			}

			// users can set a CSP nonce using res.locals.nonce
			const nonce_attr = (res.locals && res.locals.nonce) ? ` nonce="${res.locals.nonce}"` : '';

			const body = template()
				.replace('%sapper.base%', () => `<base href="${req.baseUrl}/">`)
				.replace('%sapper.scripts%', () => `<script${nonce_attr}>${script}</script>`)
				.replace('%sapper.html%', () => html)
				.replace('%sapper.head%', () => `<noscript id='sapper-head-start'></noscript>${head}<noscript id='sapper-head-end'></noscript>`)
				.replace('%sapper.styles%', () => styles);

			res.statusCode = status;
			res.end(body);
		} catch(err) {
			if (error) {
				bail(req, res, err);
			} else {
				handle_error(req, res, 500, err);
			}
		}
	}

	return function find_route(req, res, next) {
		if (req.path === '/service-worker-index.html') {
			const homePage = pages.find(page => page.pattern.test('/'));
			handle_page(homePage, req, res);
			return;
		}

		for (const page of pages) {
			if (page.pattern.test(req.path)) {
				handle_page(page, req, res);
				return;
			}
		}

		handle_error(req, res, 404, 'Not found');
	};
}

function read_template(dir = build_dir) {
	return fs.readFileSync(`${dir}/template.html`, 'utf-8');
}

function try_serialize(data, fail) {
	try {
		return devalue(data);
	} catch (err) {
		if (fail) fail(err);
		return null;
	}
}

function escape_html(html) {
	const chars = {
		'"' : 'quot',
		"'": '#39',
		'&': 'amp',
		'<' : 'lt',
		'>' : 'gt'
	};

	return html.replace(/["'&<>]/g, c => `&${chars[c]};`);
}

var mime_raw = "application/andrew-inset\t\t\tez\napplication/applixware\t\t\t\taw\napplication/atom+xml\t\t\t\tatom\napplication/atomcat+xml\t\t\t\tatomcat\napplication/atomsvc+xml\t\t\t\tatomsvc\napplication/ccxml+xml\t\t\t\tccxml\napplication/cdmi-capability\t\t\tcdmia\napplication/cdmi-container\t\t\tcdmic\napplication/cdmi-domain\t\t\t\tcdmid\napplication/cdmi-object\t\t\t\tcdmio\napplication/cdmi-queue\t\t\t\tcdmiq\napplication/cu-seeme\t\t\t\tcu\napplication/davmount+xml\t\t\tdavmount\napplication/docbook+xml\t\t\t\tdbk\napplication/dssc+der\t\t\t\tdssc\napplication/dssc+xml\t\t\t\txdssc\napplication/ecmascript\t\t\t\tecma\napplication/emma+xml\t\t\t\temma\napplication/epub+zip\t\t\t\tepub\napplication/exi\t\t\t\t\texi\napplication/font-tdpfr\t\t\t\tpfr\napplication/gml+xml\t\t\t\tgml\napplication/gpx+xml\t\t\t\tgpx\napplication/gxf\t\t\t\t\tgxf\napplication/hyperstudio\t\t\t\tstk\napplication/inkml+xml\t\t\t\tink inkml\napplication/ipfix\t\t\t\tipfix\napplication/java-archive\t\t\tjar\napplication/java-serialized-object\t\tser\napplication/java-vm\t\t\t\tclass\napplication/javascript\t\t\t\tjs\napplication/json\t\t\t\tjson\napplication/jsonml+json\t\t\t\tjsonml\napplication/lost+xml\t\t\t\tlostxml\napplication/mac-binhex40\t\t\thqx\napplication/mac-compactpro\t\t\tcpt\napplication/mads+xml\t\t\t\tmads\napplication/marc\t\t\t\tmrc\napplication/marcxml+xml\t\t\t\tmrcx\napplication/mathematica\t\t\t\tma nb mb\napplication/mathml+xml\t\t\t\tmathml\napplication/mbox\t\t\t\tmbox\napplication/mediaservercontrol+xml\t\tmscml\napplication/metalink+xml\t\t\tmetalink\napplication/metalink4+xml\t\t\tmeta4\napplication/mets+xml\t\t\t\tmets\napplication/mods+xml\t\t\t\tmods\napplication/mp21\t\t\t\tm21 mp21\napplication/mp4\t\t\t\t\tmp4s\napplication/msword\t\t\t\tdoc dot\napplication/mxf\t\t\t\t\tmxf\napplication/octet-stream\tbin dms lrf mar so dist distz pkg bpk dump elc deploy\napplication/oda\t\t\t\t\toda\napplication/oebps-package+xml\t\t\topf\napplication/ogg\t\t\t\t\togx\napplication/omdoc+xml\t\t\t\tomdoc\napplication/onenote\t\t\t\tonetoc onetoc2 onetmp onepkg\napplication/oxps\t\t\t\toxps\napplication/patch-ops-error+xml\t\t\txer\napplication/pdf\t\t\t\t\tpdf\napplication/pgp-encrypted\t\t\tpgp\napplication/pgp-signature\t\t\tasc sig\napplication/pics-rules\t\t\t\tprf\napplication/pkcs10\t\t\t\tp10\napplication/pkcs7-mime\t\t\t\tp7m p7c\napplication/pkcs7-signature\t\t\tp7s\napplication/pkcs8\t\t\t\tp8\napplication/pkix-attr-cert\t\t\tac\napplication/pkix-cert\t\t\t\tcer\napplication/pkix-crl\t\t\t\tcrl\napplication/pkix-pkipath\t\t\tpkipath\napplication/pkixcmp\t\t\t\tpki\napplication/pls+xml\t\t\t\tpls\napplication/postscript\t\t\t\tai eps ps\napplication/prs.cww\t\t\t\tcww\napplication/pskc+xml\t\t\t\tpskcxml\napplication/rdf+xml\t\t\t\trdf\napplication/reginfo+xml\t\t\t\trif\napplication/relax-ng-compact-syntax\t\trnc\napplication/resource-lists+xml\t\t\trl\napplication/resource-lists-diff+xml\t\trld\napplication/rls-services+xml\t\t\trs\napplication/rpki-ghostbusters\t\t\tgbr\napplication/rpki-manifest\t\t\tmft\napplication/rpki-roa\t\t\t\troa\napplication/rsd+xml\t\t\t\trsd\napplication/rss+xml\t\t\t\trss\napplication/rtf\t\t\t\t\trtf\napplication/sbml+xml\t\t\t\tsbml\napplication/scvp-cv-request\t\t\tscq\napplication/scvp-cv-response\t\t\tscs\napplication/scvp-vp-request\t\t\tspq\napplication/scvp-vp-response\t\t\tspp\napplication/sdp\t\t\t\t\tsdp\napplication/set-payment-initiation\t\tsetpay\napplication/set-registration-initiation\t\tsetreg\napplication/shf+xml\t\t\t\tshf\napplication/smil+xml\t\t\t\tsmi smil\napplication/sparql-query\t\t\trq\napplication/sparql-results+xml\t\t\tsrx\napplication/srgs\t\t\t\tgram\napplication/srgs+xml\t\t\t\tgrxml\napplication/sru+xml\t\t\t\tsru\napplication/ssdl+xml\t\t\t\tssdl\napplication/ssml+xml\t\t\t\tssml\napplication/tei+xml\t\t\t\ttei teicorpus\napplication/thraud+xml\t\t\t\ttfi\napplication/timestamped-data\t\t\ttsd\napplication/vnd.3gpp.pic-bw-large\t\tplb\napplication/vnd.3gpp.pic-bw-small\t\tpsb\napplication/vnd.3gpp.pic-bw-var\t\t\tpvb\napplication/vnd.3gpp2.tcap\t\t\ttcap\napplication/vnd.3m.post-it-notes\t\tpwn\napplication/vnd.accpac.simply.aso\t\taso\napplication/vnd.accpac.simply.imp\t\timp\napplication/vnd.acucobol\t\t\tacu\napplication/vnd.acucorp\t\t\t\tatc acutc\napplication/vnd.adobe.air-application-installer-package+zip\tair\napplication/vnd.adobe.formscentral.fcdt\t\tfcdt\napplication/vnd.adobe.fxp\t\t\tfxp fxpl\napplication/vnd.adobe.xdp+xml\t\t\txdp\napplication/vnd.adobe.xfdf\t\t\txfdf\napplication/vnd.ahead.space\t\t\tahead\napplication/vnd.airzip.filesecure.azf\t\tazf\napplication/vnd.airzip.filesecure.azs\t\tazs\napplication/vnd.amazon.ebook\t\t\tazw\napplication/vnd.americandynamics.acc\t\tacc\napplication/vnd.amiga.ami\t\t\tami\napplication/vnd.android.package-archive\t\tapk\napplication/vnd.anser-web-certificate-issue-initiation\tcii\napplication/vnd.anser-web-funds-transfer-initiation\tfti\napplication/vnd.antix.game-component\t\tatx\napplication/vnd.apple.installer+xml\t\tmpkg\napplication/vnd.apple.mpegurl\t\t\tm3u8\napplication/vnd.aristanetworks.swi\t\tswi\napplication/vnd.astraea-software.iota\t\tiota\napplication/vnd.audiograph\t\t\taep\napplication/vnd.blueice.multipass\t\tmpm\napplication/vnd.bmi\t\t\t\tbmi\napplication/vnd.businessobjects\t\t\trep\napplication/vnd.chemdraw+xml\t\t\tcdxml\napplication/vnd.chipnuts.karaoke-mmd\t\tmmd\napplication/vnd.cinderella\t\t\tcdy\napplication/vnd.claymore\t\t\tcla\napplication/vnd.cloanto.rp9\t\t\trp9\napplication/vnd.clonk.c4group\t\t\tc4g c4d c4f c4p c4u\napplication/vnd.cluetrust.cartomobile-config\t\tc11amc\napplication/vnd.cluetrust.cartomobile-config-pkg\tc11amz\napplication/vnd.commonspace\t\t\tcsp\napplication/vnd.contact.cmsg\t\t\tcdbcmsg\napplication/vnd.cosmocaller\t\t\tcmc\napplication/vnd.crick.clicker\t\t\tclkx\napplication/vnd.crick.clicker.keyboard\t\tclkk\napplication/vnd.crick.clicker.palette\t\tclkp\napplication/vnd.crick.clicker.template\t\tclkt\napplication/vnd.crick.clicker.wordbank\t\tclkw\napplication/vnd.criticaltools.wbs+xml\t\twbs\napplication/vnd.ctc-posml\t\t\tpml\napplication/vnd.cups-ppd\t\t\tppd\napplication/vnd.curl.car\t\t\tcar\napplication/vnd.curl.pcurl\t\t\tpcurl\napplication/vnd.dart\t\t\t\tdart\napplication/vnd.data-vision.rdz\t\t\trdz\napplication/vnd.dece.data\t\t\tuvf uvvf uvd uvvd\napplication/vnd.dece.ttml+xml\t\t\tuvt uvvt\napplication/vnd.dece.unspecified\t\tuvx uvvx\napplication/vnd.dece.zip\t\t\tuvz uvvz\napplication/vnd.denovo.fcselayout-link\t\tfe_launch\napplication/vnd.dna\t\t\t\tdna\napplication/vnd.dolby.mlp\t\t\tmlp\napplication/vnd.dpgraph\t\t\t\tdpg\napplication/vnd.dreamfactory\t\t\tdfac\napplication/vnd.ds-keypoint\t\t\tkpxx\napplication/vnd.dvb.ait\t\t\t\tait\napplication/vnd.dvb.service\t\t\tsvc\napplication/vnd.dynageo\t\t\t\tgeo\napplication/vnd.ecowin.chart\t\t\tmag\napplication/vnd.enliven\t\t\t\tnml\napplication/vnd.epson.esf\t\t\tesf\napplication/vnd.epson.msf\t\t\tmsf\napplication/vnd.epson.quickanime\t\tqam\napplication/vnd.epson.salt\t\t\tslt\napplication/vnd.epson.ssf\t\t\tssf\napplication/vnd.eszigno3+xml\t\t\tes3 et3\napplication/vnd.ezpix-album\t\t\tez2\napplication/vnd.ezpix-package\t\t\tez3\napplication/vnd.fdf\t\t\t\tfdf\napplication/vnd.fdsn.mseed\t\t\tmseed\napplication/vnd.fdsn.seed\t\t\tseed dataless\napplication/vnd.flographit\t\t\tgph\napplication/vnd.fluxtime.clip\t\t\tftc\napplication/vnd.framemaker\t\t\tfm frame maker book\napplication/vnd.frogans.fnc\t\t\tfnc\napplication/vnd.frogans.ltf\t\t\tltf\napplication/vnd.fsc.weblaunch\t\t\tfsc\napplication/vnd.fujitsu.oasys\t\t\toas\napplication/vnd.fujitsu.oasys2\t\t\toa2\napplication/vnd.fujitsu.oasys3\t\t\toa3\napplication/vnd.fujitsu.oasysgp\t\t\tfg5\napplication/vnd.fujitsu.oasysprs\t\tbh2\napplication/vnd.fujixerox.ddd\t\t\tddd\napplication/vnd.fujixerox.docuworks\t\txdw\napplication/vnd.fujixerox.docuworks.binder\txbd\napplication/vnd.fuzzysheet\t\t\tfzs\napplication/vnd.genomatix.tuxedo\t\ttxd\napplication/vnd.geogebra.file\t\t\tggb\napplication/vnd.geogebra.tool\t\t\tggt\napplication/vnd.geometry-explorer\t\tgex gre\napplication/vnd.geonext\t\t\t\tgxt\napplication/vnd.geoplan\t\t\t\tg2w\napplication/vnd.geospace\t\t\tg3w\napplication/vnd.gmx\t\t\t\tgmx\napplication/vnd.google-earth.kml+xml\t\tkml\napplication/vnd.google-earth.kmz\t\tkmz\napplication/vnd.grafeq\t\t\t\tgqf gqs\napplication/vnd.groove-account\t\t\tgac\napplication/vnd.groove-help\t\t\tghf\napplication/vnd.groove-identity-message\t\tgim\napplication/vnd.groove-injector\t\t\tgrv\napplication/vnd.groove-tool-message\t\tgtm\napplication/vnd.groove-tool-template\t\ttpl\napplication/vnd.groove-vcard\t\t\tvcg\napplication/vnd.hal+xml\t\t\t\thal\napplication/vnd.handheld-entertainment+xml\tzmm\napplication/vnd.hbci\t\t\t\thbci\napplication/vnd.hhe.lesson-player\t\tles\napplication/vnd.hp-hpgl\t\t\t\thpgl\napplication/vnd.hp-hpid\t\t\t\thpid\napplication/vnd.hp-hps\t\t\t\thps\napplication/vnd.hp-jlyt\t\t\t\tjlt\napplication/vnd.hp-pcl\t\t\t\tpcl\napplication/vnd.hp-pclxl\t\t\tpclxl\napplication/vnd.hydrostatix.sof-data\t\tsfd-hdstx\napplication/vnd.ibm.minipay\t\t\tmpy\napplication/vnd.ibm.modcap\t\t\tafp listafp list3820\napplication/vnd.ibm.rights-management\t\tirm\napplication/vnd.ibm.secure-container\t\tsc\napplication/vnd.iccprofile\t\t\ticc icm\napplication/vnd.igloader\t\t\tigl\napplication/vnd.immervision-ivp\t\t\tivp\napplication/vnd.immervision-ivu\t\t\tivu\napplication/vnd.insors.igm\t\t\tigm\napplication/vnd.intercon.formnet\t\txpw xpx\napplication/vnd.intergeo\t\t\ti2g\napplication/vnd.intu.qbo\t\t\tqbo\napplication/vnd.intu.qfx\t\t\tqfx\napplication/vnd.ipunplugged.rcprofile\t\trcprofile\napplication/vnd.irepository.package+xml\t\tirp\napplication/vnd.is-xpr\t\t\t\txpr\napplication/vnd.isac.fcs\t\t\tfcs\napplication/vnd.jam\t\t\t\tjam\napplication/vnd.jcp.javame.midlet-rms\t\trms\napplication/vnd.jisp\t\t\t\tjisp\napplication/vnd.joost.joda-archive\t\tjoda\napplication/vnd.kahootz\t\t\t\tktz ktr\napplication/vnd.kde.karbon\t\t\tkarbon\napplication/vnd.kde.kchart\t\t\tchrt\napplication/vnd.kde.kformula\t\t\tkfo\napplication/vnd.kde.kivio\t\t\tflw\napplication/vnd.kde.kontour\t\t\tkon\napplication/vnd.kde.kpresenter\t\t\tkpr kpt\napplication/vnd.kde.kspread\t\t\tksp\napplication/vnd.kde.kword\t\t\tkwd kwt\napplication/vnd.kenameaapp\t\t\thtke\napplication/vnd.kidspiration\t\t\tkia\napplication/vnd.kinar\t\t\t\tkne knp\napplication/vnd.koan\t\t\t\tskp skd skt skm\napplication/vnd.kodak-descriptor\t\tsse\napplication/vnd.las.las+xml\t\t\tlasxml\napplication/vnd.llamagraphics.life-balance.desktop\tlbd\napplication/vnd.llamagraphics.life-balance.exchange+xml\tlbe\napplication/vnd.lotus-1-2-3\t\t\t123\napplication/vnd.lotus-approach\t\t\tapr\napplication/vnd.lotus-freelance\t\t\tpre\napplication/vnd.lotus-notes\t\t\tnsf\napplication/vnd.lotus-organizer\t\t\torg\napplication/vnd.lotus-screencam\t\t\tscm\napplication/vnd.lotus-wordpro\t\t\tlwp\napplication/vnd.macports.portpkg\t\tportpkg\napplication/vnd.mcd\t\t\t\tmcd\napplication/vnd.medcalcdata\t\t\tmc1\napplication/vnd.mediastation.cdkey\t\tcdkey\napplication/vnd.mfer\t\t\t\tmwf\napplication/vnd.mfmp\t\t\t\tmfm\napplication/vnd.micrografx.flo\t\t\tflo\napplication/vnd.micrografx.igx\t\t\tigx\napplication/vnd.mif\t\t\t\tmif\napplication/vnd.mobius.daf\t\t\tdaf\napplication/vnd.mobius.dis\t\t\tdis\napplication/vnd.mobius.mbk\t\t\tmbk\napplication/vnd.mobius.mqy\t\t\tmqy\napplication/vnd.mobius.msl\t\t\tmsl\napplication/vnd.mobius.plc\t\t\tplc\napplication/vnd.mobius.txf\t\t\ttxf\napplication/vnd.mophun.application\t\tmpn\napplication/vnd.mophun.certificate\t\tmpc\napplication/vnd.mozilla.xul+xml\t\t\txul\napplication/vnd.ms-artgalry\t\t\tcil\napplication/vnd.ms-cab-compressed\t\tcab\napplication/vnd.ms-excel\t\t\txls xlm xla xlc xlt xlw\napplication/vnd.ms-excel.addin.macroenabled.12\t\txlam\napplication/vnd.ms-excel.sheet.binary.macroenabled.12\txlsb\napplication/vnd.ms-excel.sheet.macroenabled.12\t\txlsm\napplication/vnd.ms-excel.template.macroenabled.12\txltm\napplication/vnd.ms-fontobject\t\t\teot\napplication/vnd.ms-htmlhelp\t\t\tchm\napplication/vnd.ms-ims\t\t\t\tims\napplication/vnd.ms-lrm\t\t\t\tlrm\napplication/vnd.ms-officetheme\t\t\tthmx\napplication/vnd.ms-pki.seccat\t\t\tcat\napplication/vnd.ms-pki.stl\t\t\tstl\napplication/vnd.ms-powerpoint\t\t\tppt pps pot\napplication/vnd.ms-powerpoint.addin.macroenabled.12\t\tppam\napplication/vnd.ms-powerpoint.presentation.macroenabled.12\tpptm\napplication/vnd.ms-powerpoint.slide.macroenabled.12\t\tsldm\napplication/vnd.ms-powerpoint.slideshow.macroenabled.12\t\tppsm\napplication/vnd.ms-powerpoint.template.macroenabled.12\t\tpotm\napplication/vnd.ms-project\t\t\tmpp mpt\napplication/vnd.ms-word.document.macroenabled.12\tdocm\napplication/vnd.ms-word.template.macroenabled.12\tdotm\napplication/vnd.ms-works\t\t\twps wks wcm wdb\napplication/vnd.ms-wpl\t\t\t\twpl\napplication/vnd.ms-xpsdocument\t\t\txps\napplication/vnd.mseq\t\t\t\tmseq\napplication/vnd.musician\t\t\tmus\napplication/vnd.muvee.style\t\t\tmsty\napplication/vnd.mynfc\t\t\t\ttaglet\napplication/vnd.neurolanguage.nlu\t\tnlu\napplication/vnd.nitf\t\t\t\tntf nitf\napplication/vnd.noblenet-directory\t\tnnd\napplication/vnd.noblenet-sealer\t\t\tnns\napplication/vnd.noblenet-web\t\t\tnnw\napplication/vnd.nokia.n-gage.data\t\tngdat\napplication/vnd.nokia.n-gage.symbian.install\tn-gage\napplication/vnd.nokia.radio-preset\t\trpst\napplication/vnd.nokia.radio-presets\t\trpss\napplication/vnd.novadigm.edm\t\t\tedm\napplication/vnd.novadigm.edx\t\t\tedx\napplication/vnd.novadigm.ext\t\t\text\napplication/vnd.oasis.opendocument.chart\t\todc\napplication/vnd.oasis.opendocument.chart-template\totc\napplication/vnd.oasis.opendocument.database\t\todb\napplication/vnd.oasis.opendocument.formula\t\todf\napplication/vnd.oasis.opendocument.formula-template\todft\napplication/vnd.oasis.opendocument.graphics\t\todg\napplication/vnd.oasis.opendocument.graphics-template\totg\napplication/vnd.oasis.opendocument.image\t\todi\napplication/vnd.oasis.opendocument.image-template\toti\napplication/vnd.oasis.opendocument.presentation\t\todp\napplication/vnd.oasis.opendocument.presentation-template\totp\napplication/vnd.oasis.opendocument.spreadsheet\t\tods\napplication/vnd.oasis.opendocument.spreadsheet-template\tots\napplication/vnd.oasis.opendocument.text\t\t\todt\napplication/vnd.oasis.opendocument.text-master\t\todm\napplication/vnd.oasis.opendocument.text-template\tott\napplication/vnd.oasis.opendocument.text-web\t\toth\napplication/vnd.olpc-sugar\t\t\txo\napplication/vnd.oma.dd2+xml\t\t\tdd2\napplication/vnd.openofficeorg.extension\t\toxt\napplication/vnd.openxmlformats-officedocument.presentationml.presentation\tpptx\napplication/vnd.openxmlformats-officedocument.presentationml.slide\tsldx\napplication/vnd.openxmlformats-officedocument.presentationml.slideshow\tppsx\napplication/vnd.openxmlformats-officedocument.presentationml.template\tpotx\napplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet\txlsx\napplication/vnd.openxmlformats-officedocument.spreadsheetml.template\txltx\napplication/vnd.openxmlformats-officedocument.wordprocessingml.document\tdocx\napplication/vnd.openxmlformats-officedocument.wordprocessingml.template\tdotx\napplication/vnd.osgeo.mapguide.package\t\tmgp\napplication/vnd.osgi.dp\t\t\t\tdp\napplication/vnd.osgi.subsystem\t\t\tesa\napplication/vnd.palm\t\t\t\tpdb pqa oprc\napplication/vnd.pawaafile\t\t\tpaw\napplication/vnd.pg.format\t\t\tstr\napplication/vnd.pg.osasli\t\t\tei6\napplication/vnd.picsel\t\t\t\tefif\napplication/vnd.pmi.widget\t\t\twg\napplication/vnd.pocketlearn\t\t\tplf\napplication/vnd.powerbuilder6\t\t\tpbd\napplication/vnd.previewsystems.box\t\tbox\napplication/vnd.proteus.magazine\t\tmgz\napplication/vnd.publishare-delta-tree\t\tqps\napplication/vnd.pvi.ptid1\t\t\tptid\napplication/vnd.quark.quarkxpress\t\tqxd qxt qwd qwt qxl qxb\napplication/vnd.realvnc.bed\t\t\tbed\napplication/vnd.recordare.musicxml\t\tmxl\napplication/vnd.recordare.musicxml+xml\t\tmusicxml\napplication/vnd.rig.cryptonote\t\t\tcryptonote\napplication/vnd.rim.cod\t\t\t\tcod\napplication/vnd.rn-realmedia\t\t\trm\napplication/vnd.rn-realmedia-vbr\t\trmvb\napplication/vnd.route66.link66+xml\t\tlink66\napplication/vnd.sailingtracker.track\t\tst\napplication/vnd.seemail\t\t\t\tsee\napplication/vnd.sema\t\t\t\tsema\napplication/vnd.semd\t\t\t\tsemd\napplication/vnd.semf\t\t\t\tsemf\napplication/vnd.shana.informed.formdata\t\tifm\napplication/vnd.shana.informed.formtemplate\titp\napplication/vnd.shana.informed.interchange\tiif\napplication/vnd.shana.informed.package\t\tipk\napplication/vnd.simtech-mindmapper\t\ttwd twds\napplication/vnd.smaf\t\t\t\tmmf\napplication/vnd.smart.teacher\t\t\tteacher\napplication/vnd.solent.sdkm+xml\t\t\tsdkm sdkd\napplication/vnd.spotfire.dxp\t\t\tdxp\napplication/vnd.spotfire.sfs\t\t\tsfs\napplication/vnd.stardivision.calc\t\tsdc\napplication/vnd.stardivision.draw\t\tsda\napplication/vnd.stardivision.impress\t\tsdd\napplication/vnd.stardivision.math\t\tsmf\napplication/vnd.stardivision.writer\t\tsdw vor\napplication/vnd.stardivision.writer-global\tsgl\napplication/vnd.stepmania.package\t\tsmzip\napplication/vnd.stepmania.stepchart\t\tsm\napplication/vnd.sun.xml.calc\t\t\tsxc\napplication/vnd.sun.xml.calc.template\t\tstc\napplication/vnd.sun.xml.draw\t\t\tsxd\napplication/vnd.sun.xml.draw.template\t\tstd\napplication/vnd.sun.xml.impress\t\t\tsxi\napplication/vnd.sun.xml.impress.template\tsti\napplication/vnd.sun.xml.math\t\t\tsxm\napplication/vnd.sun.xml.writer\t\t\tsxw\napplication/vnd.sun.xml.writer.global\t\tsxg\napplication/vnd.sun.xml.writer.template\t\tstw\napplication/vnd.sus-calendar\t\t\tsus susp\napplication/vnd.svd\t\t\t\tsvd\napplication/vnd.symbian.install\t\t\tsis sisx\napplication/vnd.syncml+xml\t\t\txsm\napplication/vnd.syncml.dm+wbxml\t\t\tbdm\napplication/vnd.syncml.dm+xml\t\t\txdm\napplication/vnd.tao.intent-module-archive\ttao\napplication/vnd.tcpdump.pcap\t\t\tpcap cap dmp\napplication/vnd.tmobile-livetv\t\t\ttmo\napplication/vnd.trid.tpt\t\t\ttpt\napplication/vnd.triscape.mxs\t\t\tmxs\napplication/vnd.trueapp\t\t\t\ttra\napplication/vnd.ufdl\t\t\t\tufd ufdl\napplication/vnd.uiq.theme\t\t\tutz\napplication/vnd.umajin\t\t\t\tumj\napplication/vnd.unity\t\t\t\tunityweb\napplication/vnd.uoml+xml\t\t\tuoml\napplication/vnd.vcx\t\t\t\tvcx\napplication/vnd.visio\t\t\t\tvsd vst vss vsw\napplication/vnd.visionary\t\t\tvis\napplication/vnd.vsf\t\t\t\tvsf\napplication/vnd.wap.wbxml\t\t\twbxml\napplication/vnd.wap.wmlc\t\t\twmlc\napplication/vnd.wap.wmlscriptc\t\t\twmlsc\napplication/vnd.webturbo\t\t\twtb\napplication/vnd.wolfram.player\t\t\tnbp\napplication/vnd.wordperfect\t\t\twpd\napplication/vnd.wqd\t\t\t\twqd\napplication/vnd.wt.stf\t\t\t\tstf\napplication/vnd.xara\t\t\t\txar\napplication/vnd.xfdl\t\t\t\txfdl\napplication/vnd.yamaha.hv-dic\t\t\thvd\napplication/vnd.yamaha.hv-script\t\thvs\napplication/vnd.yamaha.hv-voice\t\t\thvp\napplication/vnd.yamaha.openscoreformat\t\t\tosf\napplication/vnd.yamaha.openscoreformat.osfpvg+xml\tosfpvg\napplication/vnd.yamaha.smaf-audio\t\tsaf\napplication/vnd.yamaha.smaf-phrase\t\tspf\napplication/vnd.yellowriver-custom-menu\t\tcmp\napplication/vnd.zul\t\t\t\tzir zirz\napplication/vnd.zzazz.deck+xml\t\t\tzaz\napplication/voicexml+xml\t\t\tvxml\napplication/widget\t\t\t\twgt\napplication/winhlp\t\t\t\thlp\napplication/wsdl+xml\t\t\t\twsdl\napplication/wspolicy+xml\t\t\twspolicy\napplication/x-7z-compressed\t\t\t7z\napplication/x-abiword\t\t\t\tabw\napplication/x-ace-compressed\t\t\tace\napplication/x-apple-diskimage\t\t\tdmg\napplication/x-authorware-bin\t\t\taab x32 u32 vox\napplication/x-authorware-map\t\t\taam\napplication/x-authorware-seg\t\t\taas\napplication/x-bcpio\t\t\t\tbcpio\napplication/x-bittorrent\t\t\ttorrent\napplication/x-blorb\t\t\t\tblb blorb\napplication/x-bzip\t\t\t\tbz\napplication/x-bzip2\t\t\t\tbz2 boz\napplication/x-cbr\t\t\t\tcbr cba cbt cbz cb7\napplication/x-cdlink\t\t\t\tvcd\napplication/x-cfs-compressed\t\t\tcfs\napplication/x-chat\t\t\t\tchat\napplication/x-chess-pgn\t\t\t\tpgn\napplication/x-conference\t\t\tnsc\napplication/x-cpio\t\t\t\tcpio\napplication/x-csh\t\t\t\tcsh\napplication/x-debian-package\t\t\tdeb udeb\napplication/x-dgc-compressed\t\t\tdgc\napplication/x-director\t\t\tdir dcr dxr cst cct cxt w3d fgd swa\napplication/x-doom\t\t\t\twad\napplication/x-dtbncx+xml\t\t\tncx\napplication/x-dtbook+xml\t\t\tdtb\napplication/x-dtbresource+xml\t\t\tres\napplication/x-dvi\t\t\t\tdvi\napplication/x-envoy\t\t\t\tevy\napplication/x-eva\t\t\t\teva\napplication/x-font-bdf\t\t\t\tbdf\napplication/x-font-ghostscript\t\t\tgsf\napplication/x-font-linux-psf\t\t\tpsf\napplication/x-font-pcf\t\t\t\tpcf\napplication/x-font-snf\t\t\t\tsnf\napplication/x-font-type1\t\t\tpfa pfb pfm afm\napplication/x-freearc\t\t\t\tarc\napplication/x-futuresplash\t\t\tspl\napplication/x-gca-compressed\t\t\tgca\napplication/x-glulx\t\t\t\tulx\napplication/x-gnumeric\t\t\t\tgnumeric\napplication/x-gramps-xml\t\t\tgramps\napplication/x-gtar\t\t\t\tgtar\napplication/x-hdf\t\t\t\thdf\napplication/x-install-instructions\t\tinstall\napplication/x-iso9660-image\t\t\tiso\napplication/x-java-jnlp-file\t\t\tjnlp\napplication/x-latex\t\t\t\tlatex\napplication/x-lzh-compressed\t\t\tlzh lha\napplication/x-mie\t\t\t\tmie\napplication/x-mobipocket-ebook\t\t\tprc mobi\napplication/x-ms-application\t\t\tapplication\napplication/x-ms-shortcut\t\t\tlnk\napplication/x-ms-wmd\t\t\t\twmd\napplication/x-ms-wmz\t\t\t\twmz\napplication/x-ms-xbap\t\t\t\txbap\napplication/x-msaccess\t\t\t\tmdb\napplication/x-msbinder\t\t\t\tobd\napplication/x-mscardfile\t\t\tcrd\napplication/x-msclip\t\t\t\tclp\napplication/x-msdownload\t\t\texe dll com bat msi\napplication/x-msmediaview\t\t\tmvb m13 m14\napplication/x-msmetafile\t\t\twmf wmz emf emz\napplication/x-msmoney\t\t\t\tmny\napplication/x-mspublisher\t\t\tpub\napplication/x-msschedule\t\t\tscd\napplication/x-msterminal\t\t\ttrm\napplication/x-mswrite\t\t\t\twri\napplication/x-netcdf\t\t\t\tnc cdf\napplication/x-nzb\t\t\t\tnzb\napplication/x-pkcs12\t\t\t\tp12 pfx\napplication/x-pkcs7-certificates\t\tp7b spc\napplication/x-pkcs7-certreqresp\t\t\tp7r\napplication/x-rar-compressed\t\t\trar\napplication/x-research-info-systems\t\tris\napplication/x-sh\t\t\t\tsh\napplication/x-shar\t\t\t\tshar\napplication/x-shockwave-flash\t\t\tswf\napplication/x-silverlight-app\t\t\txap\napplication/x-sql\t\t\t\tsql\napplication/x-stuffit\t\t\t\tsit\napplication/x-stuffitx\t\t\t\tsitx\napplication/x-subrip\t\t\t\tsrt\napplication/x-sv4cpio\t\t\t\tsv4cpio\napplication/x-sv4crc\t\t\t\tsv4crc\napplication/x-t3vm-image\t\t\tt3\napplication/x-tads\t\t\t\tgam\napplication/x-tar\t\t\t\ttar\napplication/x-tcl\t\t\t\ttcl\napplication/x-tex\t\t\t\ttex\napplication/x-tex-tfm\t\t\t\ttfm\napplication/x-texinfo\t\t\t\ttexinfo texi\napplication/x-tgif\t\t\t\tobj\napplication/x-ustar\t\t\t\tustar\napplication/x-wais-source\t\t\tsrc\napplication/x-x509-ca-cert\t\t\tder crt\napplication/x-xfig\t\t\t\tfig\napplication/x-xliff+xml\t\t\t\txlf\napplication/x-xpinstall\t\t\t\txpi\napplication/x-xz\t\t\t\txz\napplication/x-zmachine\t\t\t\tz1 z2 z3 z4 z5 z6 z7 z8\napplication/xaml+xml\t\t\t\txaml\napplication/xcap-diff+xml\t\t\txdf\napplication/xenc+xml\t\t\t\txenc\napplication/xhtml+xml\t\t\t\txhtml xht\napplication/xml\t\t\t\t\txml xsl\napplication/xml-dtd\t\t\t\tdtd\napplication/xop+xml\t\t\t\txop\napplication/xproc+xml\t\t\t\txpl\napplication/xslt+xml\t\t\t\txslt\napplication/xspf+xml\t\t\t\txspf\napplication/xv+xml\t\t\t\tmxml xhvml xvml xvm\napplication/yang\t\t\t\tyang\napplication/yin+xml\t\t\t\tyin\napplication/zip\t\t\t\t\tzip\naudio/adpcm\t\t\t\t\tadp\naudio/basic\t\t\t\t\tau snd\naudio/midi\t\t\t\t\tmid midi kar rmi\naudio/mp4\t\t\t\t\tm4a mp4a\naudio/mpeg\t\t\t\t\tmpga mp2 mp2a mp3 m2a m3a\naudio/ogg\t\t\t\t\toga ogg spx\naudio/s3m\t\t\t\t\ts3m\naudio/silk\t\t\t\t\tsil\naudio/vnd.dece.audio\t\t\t\tuva uvva\naudio/vnd.digital-winds\t\t\t\teol\naudio/vnd.dra\t\t\t\t\tdra\naudio/vnd.dts\t\t\t\t\tdts\naudio/vnd.dts.hd\t\t\t\tdtshd\naudio/vnd.lucent.voice\t\t\t\tlvp\naudio/vnd.ms-playready.media.pya\t\tpya\naudio/vnd.nuera.ecelp4800\t\t\tecelp4800\naudio/vnd.nuera.ecelp7470\t\t\tecelp7470\naudio/vnd.nuera.ecelp9600\t\t\tecelp9600\naudio/vnd.rip\t\t\t\t\trip\naudio/webm\t\t\t\t\tweba\naudio/x-aac\t\t\t\t\taac\naudio/x-aiff\t\t\t\t\taif aiff aifc\naudio/x-caf\t\t\t\t\tcaf\naudio/x-flac\t\t\t\t\tflac\naudio/x-matroska\t\t\t\tmka\naudio/x-mpegurl\t\t\t\t\tm3u\naudio/x-ms-wax\t\t\t\t\twax\naudio/x-ms-wma\t\t\t\t\twma\naudio/x-pn-realaudio\t\t\t\tram ra\naudio/x-pn-realaudio-plugin\t\t\trmp\naudio/x-wav\t\t\t\t\twav\naudio/xm\t\t\t\t\txm\nchemical/x-cdx\t\t\t\t\tcdx\nchemical/x-cif\t\t\t\t\tcif\nchemical/x-cmdf\t\t\t\t\tcmdf\nchemical/x-cml\t\t\t\t\tcml\nchemical/x-csml\t\t\t\t\tcsml\nchemical/x-xyz\t\t\t\t\txyz\nfont/collection\t\t\t\t\tttc\nfont/otf\t\t\t\t\totf\nfont/ttf\t\t\t\t\tttf\nfont/woff\t\t\t\t\twoff\nfont/woff2\t\t\t\t\twoff2\nimage/bmp\t\t\t\t\tbmp\nimage/cgm\t\t\t\t\tcgm\nimage/g3fax\t\t\t\t\tg3\nimage/gif\t\t\t\t\tgif\nimage/ief\t\t\t\t\tief\nimage/jpeg\t\t\t\t\tjpeg jpg jpe\nimage/ktx\t\t\t\t\tktx\nimage/png\t\t\t\t\tpng\nimage/prs.btif\t\t\t\t\tbtif\nimage/sgi\t\t\t\t\tsgi\nimage/svg+xml\t\t\t\t\tsvg svgz\nimage/tiff\t\t\t\t\ttiff tif\nimage/vnd.adobe.photoshop\t\t\tpsd\nimage/vnd.dece.graphic\t\t\t\tuvi uvvi uvg uvvg\nimage/vnd.djvu\t\t\t\t\tdjvu djv\nimage/vnd.dvb.subtitle\t\t\t\tsub\nimage/vnd.dwg\t\t\t\t\tdwg\nimage/vnd.dxf\t\t\t\t\tdxf\nimage/vnd.fastbidsheet\t\t\t\tfbs\nimage/vnd.fpx\t\t\t\t\tfpx\nimage/vnd.fst\t\t\t\t\tfst\nimage/vnd.fujixerox.edmics-mmr\t\t\tmmr\nimage/vnd.fujixerox.edmics-rlc\t\t\trlc\nimage/vnd.ms-modi\t\t\t\tmdi\nimage/vnd.ms-photo\t\t\t\twdp\nimage/vnd.net-fpx\t\t\t\tnpx\nimage/vnd.wap.wbmp\t\t\t\twbmp\nimage/vnd.xiff\t\t\t\t\txif\nimage/webp\t\t\t\t\twebp\nimage/x-3ds\t\t\t\t\t3ds\nimage/x-cmu-raster\t\t\t\tras\nimage/x-cmx\t\t\t\t\tcmx\nimage/x-freehand\t\t\t\tfh fhc fh4 fh5 fh7\nimage/x-icon\t\t\t\t\tico\nimage/x-mrsid-image\t\t\t\tsid\nimage/x-pcx\t\t\t\t\tpcx\nimage/x-pict\t\t\t\t\tpic pct\nimage/x-portable-anymap\t\t\t\tpnm\nimage/x-portable-bitmap\t\t\t\tpbm\nimage/x-portable-graymap\t\t\tpgm\nimage/x-portable-pixmap\t\t\t\tppm\nimage/x-rgb\t\t\t\t\trgb\nimage/x-tga\t\t\t\t\ttga\nimage/x-xbitmap\t\t\t\t\txbm\nimage/x-xpixmap\t\t\t\t\txpm\nimage/x-xwindowdump\t\t\t\txwd\nmessage/rfc822\t\t\t\t\teml mime\nmodel/iges\t\t\t\t\tigs iges\nmodel/mesh\t\t\t\t\tmsh mesh silo\nmodel/vnd.collada+xml\t\t\t\tdae\nmodel/vnd.dwf\t\t\t\t\tdwf\nmodel/vnd.gdl\t\t\t\t\tgdl\nmodel/vnd.gtw\t\t\t\t\tgtw\nmodel/vnd.mts\t\t\t\t\tmts\nmodel/vnd.vtu\t\t\t\t\tvtu\nmodel/vrml\t\t\t\t\twrl vrml\nmodel/x3d+binary\t\t\t\tx3db x3dbz\nmodel/x3d+vrml\t\t\t\t\tx3dv x3dvz\nmodel/x3d+xml\t\t\t\t\tx3d x3dz\ntext/cache-manifest\t\t\t\tappcache\ntext/calendar\t\t\t\t\tics ifb\ntext/css\t\t\t\t\tcss\ntext/csv\t\t\t\t\tcsv\ntext/html\t\t\t\t\thtml htm\ntext/n3\t\t\t\t\t\tn3\ntext/plain\t\t\t\t\ttxt text conf def list log in\ntext/prs.lines.tag\t\t\t\tdsc\ntext/richtext\t\t\t\t\trtx\ntext/sgml\t\t\t\t\tsgml sgm\ntext/tab-separated-values\t\t\ttsv\ntext/troff\t\t\t\t\tt tr roff man me ms\ntext/turtle\t\t\t\t\tttl\ntext/uri-list\t\t\t\t\turi uris urls\ntext/vcard\t\t\t\t\tvcard\ntext/vnd.curl\t\t\t\t\tcurl\ntext/vnd.curl.dcurl\t\t\t\tdcurl\ntext/vnd.curl.mcurl\t\t\t\tmcurl\ntext/vnd.curl.scurl\t\t\t\tscurl\ntext/vnd.dvb.subtitle\t\t\t\tsub\ntext/vnd.fly\t\t\t\t\tfly\ntext/vnd.fmi.flexstor\t\t\t\tflx\ntext/vnd.graphviz\t\t\t\tgv\ntext/vnd.in3d.3dml\t\t\t\t3dml\ntext/vnd.in3d.spot\t\t\t\tspot\ntext/vnd.sun.j2me.app-descriptor\t\tjad\ntext/vnd.wap.wml\t\t\t\twml\ntext/vnd.wap.wmlscript\t\t\t\twmls\ntext/x-asm\t\t\t\t\ts asm\ntext/x-c\t\t\t\t\tc cc cxx cpp h hh dic\ntext/x-fortran\t\t\t\t\tf for f77 f90\ntext/x-java-source\t\t\t\tjava\ntext/x-nfo\t\t\t\t\tnfo\ntext/x-opml\t\t\t\t\topml\ntext/x-pascal\t\t\t\t\tp pas\ntext/x-setext\t\t\t\t\tetx\ntext/x-sfv\t\t\t\t\tsfv\ntext/x-uuencode\t\t\t\t\tuu\ntext/x-vcalendar\t\t\t\tvcs\ntext/x-vcard\t\t\t\t\tvcf\nvideo/3gpp\t\t\t\t\t3gp\nvideo/3gpp2\t\t\t\t\t3g2\nvideo/h261\t\t\t\t\th261\nvideo/h263\t\t\t\t\th263\nvideo/h264\t\t\t\t\th264\nvideo/jpeg\t\t\t\t\tjpgv\nvideo/jpm\t\t\t\t\tjpm jpgm\nvideo/mj2\t\t\t\t\tmj2 mjp2\nvideo/mp4\t\t\t\t\tmp4 mp4v mpg4\nvideo/mpeg\t\t\t\t\tmpeg mpg mpe m1v m2v\nvideo/ogg\t\t\t\t\togv\nvideo/quicktime\t\t\t\t\tqt mov\nvideo/vnd.dece.hd\t\t\t\tuvh uvvh\nvideo/vnd.dece.mobile\t\t\t\tuvm uvvm\nvideo/vnd.dece.pd\t\t\t\tuvp uvvp\nvideo/vnd.dece.sd\t\t\t\tuvs uvvs\nvideo/vnd.dece.video\t\t\t\tuvv uvvv\nvideo/vnd.dvb.file\t\t\t\tdvb\nvideo/vnd.fvt\t\t\t\t\tfvt\nvideo/vnd.mpegurl\t\t\t\tmxu m4u\nvideo/vnd.ms-playready.media.pyv\t\tpyv\nvideo/vnd.uvvu.mp4\t\t\t\tuvu uvvu\nvideo/vnd.vivo\t\t\t\t\tviv\nvideo/webm\t\t\t\t\twebm\nvideo/x-f4v\t\t\t\t\tf4v\nvideo/x-fli\t\t\t\t\tfli\nvideo/x-flv\t\t\t\t\tflv\nvideo/x-m4v\t\t\t\t\tm4v\nvideo/x-matroska\t\t\t\tmkv mk3d mks\nvideo/x-mng\t\t\t\t\tmng\nvideo/x-ms-asf\t\t\t\t\tasf asx\nvideo/x-ms-vob\t\t\t\t\tvob\nvideo/x-ms-wm\t\t\t\t\twm\nvideo/x-ms-wmv\t\t\t\t\twmv\nvideo/x-ms-wmx\t\t\t\t\twmx\nvideo/x-ms-wvx\t\t\t\t\twvx\nvideo/x-msvideo\t\t\t\t\tavi\nvideo/x-sgi-movie\t\t\t\tmovie\nvideo/x-smv\t\t\t\t\tsmv\nx-conference/x-cooltalk\t\t\t\tice\n";

const map = new Map();

mime_raw.split('\n').forEach((row) => {
	const match = /(.+?)\t+(.+)/.exec(row);
	if (!match) return;

	const type = match[1];
	const extensions = match[2].split(' ');

	extensions.forEach(ext => {
		map.set(ext, type);
	});
});

function lookup(file) {
	const match = /\.([^\.]+)$/.exec(file);
	return match && map.get(match[1]);
}

function middleware(opts


 = {}) {
	const { session, ignore } = opts;

	let emitted_basepath = false;

	return compose_handlers(ignore, [
		(req, res, next) => {
			if (req.baseUrl === undefined) {
				let { originalUrl } = req;
				if (req.url === '/' && originalUrl[originalUrl.length - 1] !== '/') {
					originalUrl += '/';
				}

				req.baseUrl = originalUrl
					? originalUrl.slice(0, -req.url.length)
					: '';
			}

			if (!emitted_basepath && process.send) {
				process.send({
					__sapper__: true,
					event: 'basepath',
					basepath: req.baseUrl
				});

				emitted_basepath = true;
			}

			if (req.path === undefined) {
				req.path = req.url.replace(/\?.*/, '');
			}

			next();
		},

		fs.existsSync(path.join(build_dir, 'service-worker.js')) && serve({
			pathname: '/service-worker.js',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		fs.existsSync(path.join(build_dir, 'service-worker.js.map')) && serve({
			pathname: '/service-worker.js.map',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		serve({
			prefix: '/client/',
			cache_control:  'no-cache' 
		}),

		get_server_route_handler(manifest.server_routes),

		get_page_handler(manifest, session || noop$1)
	].filter(Boolean));
}

function compose_handlers(ignore, handlers) {
	const total = handlers.length;

	function nth_handler(n, req, res, next) {
		if (n >= total) {
			return next();
		}

		handlers[n](req, res, () => nth_handler(n+1, req, res, next));
	}

	return !ignore
		? (req, res, next) => nth_handler(0, req, res, next)
		: (req, res, next) => {
			if (should_ignore(req.path, ignore)) {
				next();
			} else {
				nth_handler(0, req, res, next);
			}
		};
}

function should_ignore(uri, val) {
	if (Array.isArray(val)) return val.some(x => should_ignore(uri, x));
	if (val instanceof RegExp) return val.test(uri);
	if (typeof val === 'function') return val(uri);
	return uri.startsWith(val.charCodeAt(0) === 47 ? val : `/${val}`);
}

function serve({ prefix, pathname, cache_control }



) {
	const filter = pathname
		? (req) => req.path === pathname
		: (req) => req.path.startsWith(prefix);

	const read =  (file) => fs.readFileSync(path.join(build_dir, file))
		;

	return (req, res, next) => {
		if (filter(req)) {
			const type = lookup(req.path);

			try {
				const file = path.posix.normalize(decodeURIComponent(req.path));
				const data = read(file);

				res.setHeader('Content-Type', type);
				res.setHeader('Cache-Control', cache_control);
				res.end(data);
			} catch (err) {
				res.statusCode = 404;
				res.end('not found');
			}
		} else {
			next();
		}
	};
}

function noop$1(){}

const { PORT, NODE_ENV } = process.env;
const dev = NODE_ENV === 'development';

polka() // You can also use Express

.get('/users/:id', (req, res) => {
	console.log(`~> Hello, ${req.hello}`);
	res.end(`User: ${req.params.id}`);
})
	.use(
		compression({ threshold: 0 }),
		sirv('static', { dev }),
		middleware()
	)


	.listen(PORT, `0.0.0.0`, err => {
		if (err) console.log('error', err);
	});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
