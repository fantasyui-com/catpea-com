import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, L as onMount, e as element, a as space, t as text, c as claim_element, b as children, f as detach_dev, g as claim_space, h as claim_text, j as attr_dev, k as add_location, o as insert_dev, p as append_dev, C as set_data_dev, M as set_style, l as toggle_class, n as noop, N as destroy_each, m as listen_dev } from './index.528a8661.js';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var rngBrowser = createCommonjsModule(function (module) {
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}
});

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]], 
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

var bytesToUuid_1 = bytesToUuid;

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rngBrowser)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid_1(rnds);
}

var v4_1 = v4;

/* src/routes/old_index.svelte generated by Svelte v3.16.7 */
const file = "src/routes/old_index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (139:4) {#each posts as post}
function create_each_block(ctx) {
	let div2;
	let div1;
	let a;
	let img;
	let img_src_value;
	let img_alt_value;
	let a_href_value;
	let t0;
	let div0;
	let h5;
	let t1_value = /*post*/ ctx[14].title + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			a = element("a");
			img = element("img");
			t0 = space();
			div0 = element("div");
			h5 = element("h5");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a = claim_element(div1_nodes, "A", { href: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { src: true, class: true, alt: true });
			a_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h5 = claim_element(div0_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t1 = claim_text(h5_nodes, t1_value);
			h5_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*post*/ ctx[14].image)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "card-img-top");
			attr_dev(img, "alt", img_alt_value = /*post*/ ctx[14].title);
			add_location(img, file, 143, 31, 2440);
			attr_dev(a, "href", a_href_value = /*post*/ ctx[14].url);
			add_location(a, file, 143, 10, 2419);
			attr_dev(h5, "class", "card-text small");
			add_location(h5, file, 146, 12, 2560);
			attr_dev(div0, "class", "card-body p-3");
			add_location(div0, file, 145, 10, 2520);
			attr_dev(div1, "class", "card bg-secondary text-white shadow p-0 m-0");
			add_location(div1, file, 141, 8, 2350);
			attr_dev(div2, "class", "col mb-4");
			add_location(div2, file, 140, 6, 2319);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, a);
			append_dev(a, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, h5);
			append_dev(h5, t1);
			append_dev(div2, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 2 && img.src !== (img_src_value = /*post*/ ctx[14].image)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*posts*/ 2 && img_alt_value !== (img_alt_value = /*post*/ ctx[14].title)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*posts*/ 2 && a_href_value !== (a_href_value = /*post*/ ctx[14].url)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*posts*/ 2 && t1_value !== (t1_value = /*post*/ ctx[14].title + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(139:4) {#each posts as post}",
		ctx
	});

	return block;
}

// (163:6) {:else}
function create_else_block(ctx) {
	let button;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("Page ");
			t1 = text(/*page*/ ctx[3]);
			t2 = text("/");
			t3 = text(/*pages*/ ctx[4]);
			t4 = text(" »");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Page ");
			t1 = claim_text(button_nodes, /*page*/ ctx[3]);
			t2 = claim_text(button_nodes, "/");
			t3 = claim_text(button_nodes, /*pages*/ ctx[4]);
			t4 = claim_text(button_nodes, " »");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "btn btn-secondary btn-lg btn-block shadow");
			add_location(button, file, 163, 8, 2886);
			dispose = listen_dev(button, "click", /*nextPage*/ ctx[5], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);
			append_dev(button, t2);
			append_dev(button, t3);
			append_dev(button, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*page*/ 8) set_data_dev(t1, /*page*/ ctx[3]);
			if (dirty & /*pages*/ 16) set_data_dev(t3, /*pages*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(163:6) {:else}",
		ctx
	});

	return block;
}

// (161:6) {#if exhausted}
function create_if_block(ctx) {
	let button;
	let t;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text("Shuffle ∞");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Shuffle ∞");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "btn btn-secondary btn-lg btn-block shadow");
			add_location(button, file, 161, 8, 2761);
			dispose = listen_dev(button, "click", /*nextPage*/ ctx[5], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(161:6) {#if exhausted}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div3;
	let div0;
	let t1;
	let div2;
	let div1;
	let each_value = /*posts*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function select_block_type(ctx, dirty) {
		if (/*exhausted*/ ctx[2]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			t0 = space();
			div3 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Cat Pea";
			attr_dev(div0, "class", "row row-cols-1 row-cols-md-2 row-cols-xl-4");
			add_location(div0, file, 136, 4, 2228);
			attr_dev(div1, "class", "col mb-4");
			add_location(div1, file, 158, 6, 2707);
			attr_dev(div2, "class", "row");
			add_location(div2, file, 157, 4, 2683);
			attr_dev(div3, "class", "container-fluid");
			set_style(div3, "visibility", "hidden");
			toggle_class(div3, "visible", /*ready*/ ctx[0]);
			add_location(div3, file, 133, 0, 2140);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div2, div1);
			if_block.m(div1, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 2) {
				each_value = /*posts*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div1, null);
				}
			}

			if (dirty & /*ready*/ 1) {
				toggle_class(div3, "visible", /*ready*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div3);
			destroy_each(each_blocks, detaching);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function shuffle(a) {
	for (let i = a.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1));
		[a[i], a[j]] = [a[j], a[i]];
	}

	return a;
}

function instance($$self, $$props, $$invalidate) {
	let ready = false;
	const date = new Date();
	const year = date.getFullYear();
	let showPerPage = 8;
	let startAt = 0;
	let database = [];
	let posts = [];
	let pageId = v4_1();

	onMount(async function () {
		const res = await fetch("youtube.json");
		const json = await res.json();
		database = json;
		renderPage();
		$$invalidate(0, ready = true);
	});

	let exhausted = false;
	let page = 0;
	let pages = 0;

	function nextPage() {
		advancePage();
		renderPage();
	}

	function advancePage() {
		if (startAt > database.length - 1) $$invalidate(2, exhausted = true);
		console.log("exhausted", exhausted);

		if (exhausted) {
			shuffle(database);
		} else {
			startAt = startAt + showPerPage;
		}
	}

	function renderPage() {
		if (startAt > database.length - 1) $$invalidate(2, exhausted = true);
		$$invalidate(4, pages = Math.floor((database.length - 1) / showPerPage + 1));
		$$invalidate(3, page = startAt / showPerPage + 1);

		if (exhausted) {
			$$invalidate(1, posts = database.slice(0, showPerPage));
		} else {
			$$invalidate(1, posts = database.slice(startAt, startAt + showPerPage));
		}

		setTimeout(
			function () {
				window.scrollTo({ top: 0, left: 0 });
			},
			2
		);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("ready" in $$props) $$invalidate(0, ready = $$props.ready);
		if ("showPerPage" in $$props) showPerPage = $$props.showPerPage;
		if ("startAt" in $$props) startAt = $$props.startAt;
		if ("database" in $$props) database = $$props.database;
		if ("posts" in $$props) $$invalidate(1, posts = $$props.posts);
		if ("pageId" in $$props) pageId = $$props.pageId;
		if ("exhausted" in $$props) $$invalidate(2, exhausted = $$props.exhausted);
		if ("page" in $$props) $$invalidate(3, page = $$props.page);
		if ("pages" in $$props) $$invalidate(4, pages = $$props.pages);
	};

	return [ready, posts, exhausted, page, pages, nextPage];
}

class Old_index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Old_index",
			options,
			id: create_fragment.name
		});
	}
}

export default Old_index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
