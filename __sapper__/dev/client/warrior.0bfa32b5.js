import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, R as onMount, e as element, r as create_component, a as space, c as claim_element, b as children, u as claim_component, g as claim_space, f as detach_dev, j as attr_dev, k as add_location, m as insert_dev, v as mount_component, o as append_dev, H as get_spread_update, I as get_spread_object, z as transition_out, K as check_outros, y as transition_in, A as destroy_component, t as text, E as query_selector_all, h as claim_text, Q as set_style, l as toggle_class, C as set_data_dev, P as destroy_each, F as assign, J as group_outros } from './index.c2c7d28a.js';
import { a as stores$1 } from './app.3f7c34c6.js';
import './index.62db1c9d.js';

/* src/routes/warrior.svelte generated by Svelte v3.17.3 */
const file = "src/routes/warrior.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (67:2) {#each content.data as item}
function create_each_block(ctx) {
	let div;
	let t;
	let current;
	const switch_instance_spread_levels = [/*item*/ ctx[6]];
	var switch_value = "Standard";

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (switch_instance) claim_component(switch_instance.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "col");
			add_location(div, file, 67, 4, 1298);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			append_dev(div, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*content*/ 4)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*item*/ ctx[6])])
			: {};

			if (switch_value !== (switch_value = "Standard")) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, t);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(67:2) {#each content.data as item}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div;
	let t1;
	let t2_value = /*database*/ ctx[1].length + "";
	let t2;
	let t3;
	let current;
	let each_value = /*content*/ ctx[2].data;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			t1 = text("Database has ");
			t2 = text(t2_value);
			t3 = text(" chapters;\n\n\n  ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-zombrn\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			t1 = claim_text(div_nodes, "Database has ");
			t2 = claim_text(div_nodes, t2_value);
			t3 = claim_text(div_nodes, " chapters;\n\n\n  ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Cat Pea";
			attr_dev(div, "class", "container-fluid text-warning");
			set_style(div, "visibility", "hidden");
			toggle_class(div, "visible", /*pageReady*/ ctx[0]);
			add_location(div, file, 61, 0, 1118);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, t1);
			append_dev(div, t2);
			append_dev(div, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*database*/ 2) && t2_value !== (t2_value = /*database*/ ctx[1].length + "")) set_data_dev(t2, t2_value);

			if (dirty & /*content*/ 4) {
				each_value = /*content*/ ctx[2].data;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div, "visible", /*pageReady*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function toc() {
	return {
		meta: {},
		data: [
			{
				"type": "text",
				"title": "Table of Contents",
				"text": ["Chapter One: ...", "<a href=\"...\">Chapter Two</a>"]
			}
		]
	};
}

function instance($$self, $$props, $$invalidate) {
	const { page } = stores$1();
	let pageReady = false;
	let database = [];
	let chapter = "toc";
	let content = { meta: {}, data: [] };

	//DEV
	let types = new Set();

	onMount(async function () {
		const res = await fetch("book.json");
		const json = await res.json();
		$$invalidate(0, pageReady = true);
		$$invalidate(1, database = json);

		page.subscribe(value => {
			$$invalidate(2, content = database.find(content => content.meta.name == value.query.chapter) || toc());
		});

		//database.forEach(chapter => chapter.data.forEach(item=>types.add(item.type)))
		database.forEach(chapter => chapter.data.forEach(item => Object.keys(item).forEach(item => types.add(item))));

		console.log(Array.from(types), types);
	});

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("pageReady" in $$props) $$invalidate(0, pageReady = $$props.pageReady);
		if ("database" in $$props) $$invalidate(1, database = $$props.database);
		if ("chapter" in $$props) chapter = $$props.chapter;
		if ("content" in $$props) $$invalidate(2, content = $$props.content);
		if ("types" in $$props) types = $$props.types;
	};

	return [pageReady, database, content];
}

class Warrior extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Warrior",
			options,
			id: create_fragment.name
		});
	}
}

export default Warrior;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Fycmlvci4wYmZhMzJiNS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy93YXJyaW9yLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXG5pbXBvcnQgU3RhbmRhcmQgZnJvbSAnLi4vYm9vay9TdGFuZGFyZC5zdmVsdGUnO1xuXG5cbmltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5pbXBvcnQgeyBzdG9yZXMgfSBmcm9tICdAc2FwcGVyL2FwcCc7XG5jb25zdCB7IHBhZ2UgfSA9IHN0b3JlcygpO1xuXG5sZXQgcGFnZVJlYWR5ID0gZmFsc2U7XG5sZXQgZGF0YWJhc2UgPSBbXTtcblxubGV0IGNoYXB0ZXIgPSAndG9jJztcbmxldCBjb250ZW50ID0ge21ldGE6e30sIGRhdGE6W119O1xuXG4vL0RFVlxubGV0IHR5cGVzID0gbmV3IFNldCgpO1xuLy9ERVZcblxuZnVuY3Rpb24gdG9jKCl7XG4gIHJldHVybiB7bWV0YTp7fSwgZGF0YTpbXG4gICAge1xuICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgIFwidGl0bGVcIjogXCJUYWJsZSBvZiBDb250ZW50c1wiLFxuICAgICBcInRleHRcIjogW1xuICAgICAgXCJDaGFwdGVyIE9uZTogLi4uXCIsXG4gICAgICBcIjxhIGhyZWY9XFxcIi4uLlxcXCI+Q2hhcHRlciBUd288L2E+XCJcbiAgICAgXVxuICAgIH0sXG4gIF19O1xufVxuXG5vbk1vdW50KGFzeW5jIGZ1bmN0aW9uKCkge1xuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXCJib29rLmpzb25cIik7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcGFnZVJlYWR5ID0gdHJ1ZTtcbiAgICBkYXRhYmFzZSA9IGpzb247XG5cbiAgICBwYWdlLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICBjb250ZW50ID0gZGF0YWJhc2UuZmluZCgoY29udGVudCkgPT4gY29udGVudC5tZXRhLm5hbWUgPT0gdmFsdWUucXVlcnkuY2hhcHRlciApIHx8IHRvYygpO1xuICAgIH0pO1xuXG4gICAgLy9kYXRhYmFzZS5mb3JFYWNoKGNoYXB0ZXIgPT4gY2hhcHRlci5kYXRhLmZvckVhY2goaXRlbT0+dHlwZXMuYWRkKGl0ZW0udHlwZSkpKVxuICAgIGRhdGFiYXNlLmZvckVhY2goY2hhcHRlciA9PiBjaGFwdGVyLmRhdGEuZm9yRWFjaChpdGVtPT5PYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGl0ZW09PnR5cGVzLmFkZChpdGVtKSkgKSlcbiAgICBjb25zb2xlLmxvZyhBcnJheS5mcm9tKHR5cGVzKSwgdHlwZXMpO1xuXG59KTtcblxuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkNhdCBQZWE8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGRpdiBjbGFzcz1cImNvbnRhaW5lci1mbHVpZCB0ZXh0LXdhcm5pbmdcIiBzdHlsZT1cInZpc2liaWxpdHk6IGhpZGRlbjtcIiBjbGFzczp2aXNpYmxlPSd7cGFnZVJlYWR5fSc+XG5cbiAgRGF0YWJhc2UgaGFzIHtkYXRhYmFzZS5sZW5ndGh9IGNoYXB0ZXJzO1xuXG5cbiAgeyNlYWNoIGNvbnRlbnQuZGF0YSBhcyBpdGVtfVxuICAgIDxkaXYgY2xhc3M9XCJjb2xcIj5cblxuICAgIDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9e1wiU3RhbmRhcmRcIn0gey4uLml0ZW19Lz5cblxuICAgIDwvZGl2PlxuICB7L2VhY2h9XG5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbInN0b3JlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFxRTRCLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dDQUFWLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFOdEIsR0FBUSxJQUFDLE1BQU07Ozs7OEJBR3RCLEdBQU8sSUFBQyxJQUFJOzs7Z0NBQWpCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OENBTDhFLEdBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7O3FGQUUvRSxHQUFRLElBQUMsTUFBTTs7OzZCQUd0QixHQUFPLElBQUMsSUFBSTs7OytCQUFqQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFKLE1BQUk7Ozs7Ozs7OytDQUw4RSxHQUFTOzs7Ozs7a0NBSzNGLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQS9DQyxHQUFHOztFQUNGLElBQUk7RUFBSyxJQUFJOztJQUVsQixNQUFNLEVBQUUsTUFBTTtJQUNkLE9BQU8sRUFBRSxtQkFBbUI7SUFDNUIsTUFBTSxHQUNMLGtCQUFrQixFQUNsQixpQ0FBaUM7Ozs7Ozs7U0FuQi9CLElBQUksS0FBS0EsUUFBTTtLQUVuQixTQUFTLEdBQUcsS0FBSztLQUNqQixRQUFRO0tBRVIsT0FBTyxHQUFHLEtBQUs7S0FDZixPQUFPLEtBQUksSUFBSSxNQUFLLElBQUk7OztLQUd4QixLQUFLLE9BQU8sR0FBRzs7Q0FnQm5CLE9BQU87UUFFRyxHQUFHLFNBQVMsS0FBSyxDQUFDLFdBQVc7UUFDN0IsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJO2tCQUMzQixTQUFTLEdBQUcsSUFBSTtrQkFDaEIsUUFBUSxHQUFHLElBQUk7O0VBRWYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLO21CQUNsQixPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBRSxPQUFPLElBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQU0sR0FBRzs7OztFQUl4RixRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUk7O0VBQ3JHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
