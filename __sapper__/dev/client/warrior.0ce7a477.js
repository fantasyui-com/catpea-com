import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, q as create_slot, F as assign, V as exclude_internal_props, e as element, c as claim_element, b as children, f as detach_dev, W as set_attributes, k as add_location, m as insert_dev, p as listen_dev, w as get_slot_context, x as get_slot_changes, H as get_spread_update, y as transition_in, z as transition_out, X as bubble, n as noop, r as create_component, u as claim_component, v as mount_component, I as get_spread_object, A as destroy_component, a as space, g as claim_space, J as group_outros, K as check_outros, D as empty, P as destroy_each, t as text, h as claim_text, o as append_dev, C as set_data_dev, T as HtmlTag, j as attr_dev, Q as set_style, l as toggle_class, R as onMount, E as query_selector_all } from './index.70a72d4b.js';
import { a as stores$1 } from './app.cba9b84c.js';
import { o as octicons, d as calculatePercent } from './index.a9aa74f7.js';

function toVal(mix) {
	var k, y, str='';
	if (mix) {
		if (typeof mix === 'object') {
			if (!!mix.push) {
				for (k=0; k < mix.length; k++) {
					if (mix[k] && (y = toVal(mix[k]))) {
						str && (str += ' ');
						str += y;
					}
				}
			} else {
				for (k in mix) {
					if (mix[k] && (y = toVal(k))) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else if (typeof mix !== 'boolean' && !mix.call) {
			str && (str += ' ');
			str += mix;
		}
	}
	return str;
}

function clsx () {
	var i=0, x, str='';
	while (i < arguments.length) {
		if (x = toVal(arguments[i++])) {
			str && (str += ' ');
			str += x;
		}
	}
	return str;
}

function clean($$props) {
  const rest = {};
  for (const key of Object.keys($$props)) {
    if (key !== "children" && key !== "$$scope" && key !== "$$slots") {
      rest[key] = $$props[key];
    }
  }
  return rest;
}

/* node_modules/sveltestrap/src/Card.svelte generated by Svelte v3.17.3 */
const file = "node_modules/sveltestrap/src/Card.svelte";

function create_fragment(ctx) {
	let div;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		/*props*/ ctx[3],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[2] },
		{ style: /*style*/ ctx[1] }
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true, style: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file, 24, 0, 512);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
			dispose = listen_dev(div, "click", /*click_handler*/ ctx[12], false, false, false);
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 1024) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[10], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 8 && /*props*/ ctx[3],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
				dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { body = false } = $$props;
	let { color = "" } = $$props;
	let { id = "" } = $$props;
	let { inverse = false } = $$props;
	let { outline = false } = $$props;
	let { style = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("body" in $$new_props) $$invalidate(5, body = $$new_props.body);
		if ("color" in $$new_props) $$invalidate(6, color = $$new_props.color);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("inverse" in $$new_props) $$invalidate(7, inverse = $$new_props.inverse);
		if ("outline" in $$new_props) $$invalidate(8, outline = $$new_props.outline);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			body,
			color,
			id,
			inverse,
			outline,
			style,
			classes
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
		if ("body" in $$props) $$invalidate(5, body = $$new_props.body);
		if ("color" in $$props) $$invalidate(6, color = $$new_props.color);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("inverse" in $$props) $$invalidate(7, inverse = $$new_props.inverse);
		if ("outline" in $$props) $$invalidate(8, outline = $$new_props.outline);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, inverse, body, color, outline*/ 496) {
			 $$invalidate(2, classes = clsx(className, "card", inverse ? "text-white" : false, body ? "card-body" : false, color ? `${outline ? "border" : "bg"}-${color}` : false));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		classes,
		props,
		className,
		body,
		color,
		inverse,
		outline,
		$$props,
		$$scope,
		$$slots,
		click_handler
	];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 4,
			body: 5,
			color: 6,
			id: 0,
			inverse: 7,
			outline: 8,
			style: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get body() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set body(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inverse() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inverse(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outline() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outline(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardBody.svelte generated by Svelte v3.17.3 */
const file$1 = "node_modules/sveltestrap/src/CardBody.svelte";

function create_fragment$1(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [/*props*/ ctx[2], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[1] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$1, 13, 0, 239);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 32) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[5], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 4 && /*props*/ ctx[2],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 2 && { class: /*classes*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, id, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("classes" in $$props) $$invalidate(1, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 8) {
			 $$invalidate(1, classes = clsx(className, "card-body"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [id, classes, props, className, $$props, $$scope, $$slots];
}

class CardBody extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { class: 3, id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardBody",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<CardBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CardBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CardBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardImg.svelte generated by Svelte v3.17.3 */
const file$2 = "node_modules/sveltestrap/src/CardImg.svelte";

function create_fragment$2(ctx) {
	let img;

	let img_levels = [
		/*props*/ ctx[3],
		{ class: /*classes*/ ctx[2] },
		{ src: /*src*/ ctx[0] },
		{ alt: /*alt*/ ctx[1] }
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			set_attributes(img, img_data);
			add_location(img, file$2, 26, 0, 517);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, [dirty]) {
			set_attributes(img, get_spread_update(img_levels, [
				dirty & /*props*/ 8 && /*props*/ ctx[3],
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
				dirty & /*src*/ 1 && { src: /*src*/ ctx[0] },
				dirty & /*alt*/ 2 && { alt: /*alt*/ ctx[1] }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { top = false } = $$props;
	let { bottom = false } = $$props;
	let { src } = $$props;
	let { alt = "" } = $$props;
	const props = clean($$props);
	let classes = "";

	$$self.$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("top" in $$new_props) $$invalidate(5, top = $$new_props.top);
		if ("bottom" in $$new_props) $$invalidate(6, bottom = $$new_props.bottom);
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(1, alt = $$new_props.alt);
	};

	$$self.$capture_state = () => {
		return {
			className,
			top,
			bottom,
			src,
			alt,
			classes
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
		if ("top" in $$props) $$invalidate(5, top = $$new_props.top);
		if ("bottom" in $$props) $$invalidate(6, bottom = $$new_props.bottom);
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$new_props.alt);
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*top, bottom, className*/ 112) {
			 {
				let cardImgClassName = "card-img";

				if (top) {
					cardImgClassName = "card-img-top";
				}

				if (bottom) {
					cardImgClassName = "card-img-bottom";
				}

				$$invalidate(2, classes = clsx(className, cardImgClassName));
			}
		}
	};

	$$props = exclude_internal_props($$props);
	return [src, alt, classes, props, className, top, bottom];
}

class CardImg extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			class: 4,
			top: 5,
			bottom: 6,
			src: 0,
			alt: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardImg",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<CardImg> was created without expected prop 'src'");
		}
	}

	get class() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get top() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set top(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bottom() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bottom(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get src() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardText.svelte generated by Svelte v3.17.3 */
const file$3 = "node_modules/sveltestrap/src/CardText.svelte";

function create_fragment$3(ctx) {
	let p;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let p_levels = [/*props*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	const block = {
		c: function create() {
			p = element("p");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			if (default_slot) default_slot.l(p_nodes);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(p, p_data);
			add_location(p, file$3, 12, 0, 217);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}

			set_attributes(p, get_spread_update(p_levels, [
				dirty & /*props*/ 2 && /*props*/ ctx[1],
				dirty & /*classes*/ 1 && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			 $$invalidate(0, classes = clsx(className, "card-text"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [classes, props, className, $$props, $$scope, $$slots];
}

class CardText extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardText",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<CardText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardTitle.svelte generated by Svelte v3.17.3 */
const file$4 = "node_modules/sveltestrap/src/CardTitle.svelte";

function create_fragment$4(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*props*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$4, 12, 0, 218);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 2 && /*props*/ ctx[1],
				dirty & /*classes*/ 1 && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			 $$invalidate(0, classes = clsx(className, "card-title"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [classes, props, className, $$props, $$scope, $$slots];
}

class CardTitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardTitle",
			options,
			id: create_fragment$4.name
		});
	}

	get class() {
		throw new Error("<CardTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function clean$1($$props) {
  const rest = {};
  for (const key of Object.keys($$props)) {
    if (key !== "children" && key !== "$$scope" && key !== "$$slots") {
      rest[key] = $$props[key];
    }
  }
  return rest;
}

/* node_modules/book-gui/src/Illustration.svelte generated by Svelte v3.17.3 */
const file$5 = "node_modules/book-gui/src/Illustration.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[16] = i;
	return child_ctx;
}

const get_body_slot_changes = dirty => ({});
const get_body_slot_context = ctx => ({});

// (41:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}
function create_if_block(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, text, classesCardTitle, title*/ 8276) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(41:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}",
		ctx
	});

	return block;
}

// (43:4) {#if title}
function create_if_block_1(ctx) {
	let current;

	const cardtitle = new CardTitle({
			props: {
				class: /*classesCardTitle*/ ctx[6],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtitle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtitle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtitle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtitle_changes = {};
			if (dirty & /*classesCardTitle*/ 64) cardtitle_changes.class = /*classesCardTitle*/ ctx[6];

			if (dirty & /*$$scope, title*/ 8196) {
				cardtitle_changes.$$scope = { dirty, ctx };
			}

			cardtitle.$set(cardtitle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtitle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(43:4) {#if title}",
		ctx
	});

	return block;
}

// (44:6) <CardTitle class={classesCardTitle}>
function create_default_slot_3(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[2]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$5, 43, 42, 865);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(44:6) <CardTitle class={classesCardTitle}>",
		ctx
	});

	return block;
}

// (48:6) <CardText>
function create_default_slot_2(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[14] + "";

	const block = {
		c: function create() {
			this.h();
		},
		l: function claim(nodes) {
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 16 && raw_value !== (raw_value = /*line*/ ctx[14] + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(48:6) <CardText>",
		ctx
	});

	return block;
}

// (47:4) {#each text as line, index}
function create_each_block(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, text*/ 8208) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(47:4) {#each text as line, index}",
		ctx
	});

	return block;
}

// (42:2) <CardBody>
function create_default_slot_1(ctx) {
	let t0;
	let t1;
	let each_1_anchor;
	let current;
	let if_block = /*title*/ ctx[2] && create_if_block_1(ctx);
	const body_slot_template = /*$$slots*/ ctx[11].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context);
	let each_value = /*text*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			if (body_slot) body_slot.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t0 = claim_space(nodes);
			if (body_slot) body_slot.l(nodes);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t0, anchor);

			if (body_slot) {
				body_slot.m(target, anchor);
			}

			insert_dev(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (body_slot && body_slot.p && dirty & /*$$scope*/ 8192) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context), get_slot_changes(body_slot_template, /*$$scope*/ ctx[13], dirty, get_body_slot_changes));
			}

			if (dirty & /*text*/ 16) {
				each_value = /*text*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(body_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(body_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			if (body_slot) body_slot.d(detaching);
			if (detaching) detach_dev(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(42:2) <CardBody>",
		ctx
	});

	return block;
}

// (36:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let current;

	const cardimg = new CardImg({
			props: {
				src: /*url*/ ctx[3],
				alt: /*title*/ ctx[2]
			},
			$$inline: true
		});

	let if_block = (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) && create_if_block(ctx);
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			create_component(cardimg.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			claim_component(cardimg.$$.fragment, nodes);
			t0 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardimg, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const cardimg_changes = {};
			if (dirty & /*url*/ 8) cardimg_changes.src = /*url*/ ctx[3];
			if (dirty & /*title*/ 4) cardimg_changes.alt = /*title*/ ctx[2];
			cardimg.$set(cardimg_changes);

			if (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8192) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[13], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardimg.$$.fragment, local);
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardimg.$$.fragment, local);
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardimg, detaching);
			if (detaching) detach_dev(t0);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(36:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[8],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[5] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 291)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 256 && get_spread_object(/*props*/ ctx[8]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 32 && { class: /*classes*/ ctx[5] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, text, classesCardTitle, title, url*/ 8284) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(9, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$new_props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			title,
			url,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(9, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$props) $$invalidate(4, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) $$invalidate(6, classesCardTitle = $$new_props.classesCardTitle);
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 512) {
			 $$invalidate(5, classes = clsx(className, "card", "bg-danger", "text-white"));
		}

		if ($$self.$$.dirty & /*text*/ 16) {
			 $$invalidate(6, classesCardTitle = clsx(text.length == 0 ? "mb-0" : false));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		url,
		text,
		classes,
		classesCardTitle,
		SLOTS,
		props,
		className,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Illustration extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			class: 9,
			id: 0,
			style: 1,
			title: 2,
			url: 3,
			text: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Illustration",
			options,
			id: create_fragment$5.name
		});
	}

	get class() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/Container.svelte generated by Svelte v3.17.3 */
const file$6 = "src/book/Container.svelte";
const get_preferences_footer_slot_changes = dirty => ({});
const get_preferences_footer_slot_context = ctx => ({});
const get_preferences_slot_changes = dirty => ({});
const get_preferences_slot_context = ctx => ({});

// (43:20) 
function create_if_block_1$1(ctx) {
	let div1;
	let div0;
	let p;
	let t;
	let div1_class_value;
	let current;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div1 = element("div");

			if (!default_slot) {
				div0 = element("div");
				p = element("p");
				t = text("Application Empty");
			}

			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			if (!default_slot) {
				div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
				var div0_nodes = children(div0);
				p = claim_element(div0_nodes, "P", { class: true });
				var p_nodes = children(p);
				t = claim_text(p_nodes, "Application Empty");
				p_nodes.forEach(detach_dev);
				div0_nodes.forEach(detach_dev);
			}

			if (default_slot) default_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (!default_slot) {
				attr_dev(p, "class", "card-text");
				add_location(p, file$6, 53, 10, 1202);
				attr_dev(div0, "class", "card-body p-2");
				set_style(div0, "box-shadow", "inset 0 0 10px #000000");
				add_location(div0, file$6, 52, 6, 1120);
			}

			attr_dev(div1, "class", div1_class_value = "card text-white bg-" + /*context*/ ctx[0] + " shadow");
			add_location(div1, file$6, 44, 2, 888);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);

			if (!default_slot) {
				append_dev(div1, div0);
				append_dev(div0, p);
				append_dev(p, t);
			}

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[2], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null));
			}

			if (!current || dirty & /*context*/ 1 && div1_class_value !== (div1_class_value = "card text-white bg-" + /*context*/ ctx[0] + " shadow")) {
				attr_dev(div1, "class", div1_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(43:20) ",
		ctx
	});

	return block;
}

// (16:0) {#if view == 0}
function create_if_block$1(ctx) {
	let div3;
	let div0;
	let t0;
	let button;
	let raw_value = octicons.checklist.toSVG({ "class": "fill-white" }) + "";
	let t1;
	let div1;
	let p;
	let t2;
	let t3;
	let div2;
	let current;
	let dispose;
	const preferences_slot_template = /*$$slots*/ ctx[3].preferences;
	const preferences_slot = create_slot(preferences_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_slot_context);
	const preferences_footer_slot_template = /*$$slots*/ ctx[3]["preferences-footer"];
	const preferences_footer_slot = create_slot(preferences_footer_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_footer_slot_context);

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = text("Preferences\n      ");
			button = element("button");
			t1 = space();
			div1 = element("div");

			if (!preferences_slot) {
				p = element("p");
				t2 = text("Preferences Empty");
			}

			if (preferences_slot) preferences_slot.c();
			t3 = space();
			div2 = element("div");
			if (preferences_footer_slot) preferences_footer_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Preferences\n      ");
			button = claim_element(div0_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			button_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);

			if (!preferences_slot) {
				p = claim_element(div1_nodes, "P", { class: true });
				var p_nodes = children(p);
				t2 = claim_text(p_nodes, "Preferences Empty");
				p_nodes.forEach(detach_dev);
			}

			if (preferences_slot) preferences_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (preferences_footer_slot) preferences_footer_slot.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "btn btn-text btn-sm border border-secondary float-right");
			add_location(button, file$6, 21, 6, 363);
			attr_dev(div0, "class", "card-header lead");
			add_location(div0, file$6, 19, 4, 308);

			if (!preferences_slot) {
				attr_dev(p, "class", "card-text");
				add_location(p, file$6, 26, 6, 656);
			}

			attr_dev(div1, "class", "card-body p-2");
			set_style(div1, "max-height", "25rem");
			set_style(div1, "overflow-y", "auto");
			add_location(div1, file$6, 23, 4, 546);
			attr_dev(div2, "class", "card-footer text-muted small");
			add_location(div2, file$6, 33, 4, 744);
			attr_dev(div3, "class", "card text-white bg-dark shadow");
			add_location(div3, file$6, 18, 2, 259);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, t0);
			append_dev(div0, button);
			button.innerHTML = raw_value;
			append_dev(div3, t1);
			append_dev(div3, div1);

			if (!preferences_slot) {
				append_dev(div1, p);
				append_dev(p, t2);
			}

			if (preferences_slot) {
				preferences_slot.m(div1, null);
			}

			append_dev(div3, t3);
			append_dev(div3, div2);

			if (preferences_footer_slot) {
				preferences_footer_slot.m(div2, null);
			}

			current = true;
			dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (preferences_slot && preferences_slot.p && dirty & /*$$scope*/ 4) {
				preferences_slot.p(get_slot_context(preferences_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_slot_context), get_slot_changes(preferences_slot_template, /*$$scope*/ ctx[2], dirty, get_preferences_slot_changes));
			}

			if (preferences_footer_slot && preferences_footer_slot.p && dirty & /*$$scope*/ 4) {
				preferences_footer_slot.p(get_slot_context(preferences_footer_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_footer_slot_context), get_slot_changes(preferences_footer_slot_template, /*$$scope*/ ctx[2], dirty, get_preferences_footer_slot_changes));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(preferences_slot, local);
			transition_in(preferences_footer_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(preferences_slot, local);
			transition_out(preferences_footer_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (preferences_slot) preferences_slot.d(detaching);
			if (preferences_footer_slot) preferences_footer_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(16:0) {#if view == 0}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_if_block_1$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*view*/ ctx[1] == 0) return 0;
		if (/*view*/ ctx[1] == 1) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { context = "secondary" } = $$props;

	/*
  0 is Preference View
  1 is Application View
*/
	let view = 1; // controlled via UI icons

	const writable_props = ["context"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Container> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	const click_handler = e => $$invalidate(1, view = 1);

	$$self.$set = $$props => {
		if ("context" in $$props) $$invalidate(0, context = $$props.context);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { context, view };
	};

	$$self.$inject_state = $$props => {
		if ("context" in $$props) $$invalidate(0, context = $$props.context);
		if ("view" in $$props) $$invalidate(1, view = $$props.view);
	};

	return [context, view, $$scope, $$slots, click_handler];
}

class Container extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { context: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Container",
			options,
			id: create_fragment$6.name
		});
	}

	get context() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set context(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/BusinessComponent.svelte generated by Svelte v3.17.3 */
const file$7 = "src/book/BusinessComponent.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (37:6) {#if title}
function create_if_block$2(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "card-title");
			toggle_class(h5, "mb-0", /*text*/ ctx[2].length == 0);
			add_location(h5, file$7, 36, 17, 522);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);

			if (dirty & /*text*/ 4) {
				toggle_class(h5, "mb-0", /*text*/ ctx[2].length == 0);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(37:6) {#if title}",
		ctx
	});

	return block;
}

// (38:8) {#each text as line, index}
function create_each_block$1(ctx) {
	let p;
	let raw_value = /*line*/ ctx[4] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead");
			add_location(p, file$7, 38, 10, 639);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4 && raw_value !== (raw_value = /*line*/ ctx[4] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(38:8) {#each text as line, index}",
		ctx
	});

	return block;
}

// (32:0) <Container context="warning">
function create_default_slot$1(ctx) {
	let img;
	let img_src_value;
	let t0;
	let div;
	let t1;
	let if_block = /*title*/ ctx[1] && create_if_block$2(ctx);
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			img = element("img");
			t0 = space();
			div = element("div");
			if (if_block) if_block.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, class: true, alt: true });
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t1 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*url*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "card-img-top");
			attr_dev(img, "alt", /*title*/ ctx[1]);
			add_location(img, file$7, 33, 2, 403);
			attr_dev(div, "class", "card-body text-dark");
			add_location(div, file$7, 35, 4, 462);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*url*/ 1 && img.src !== (img_src_value = /*url*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*title*/ 2) {
				attr_dev(img, "alt", /*title*/ ctx[1]);
			}

			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(div, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(32:0) <Container context=\\\"warning\\\">",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "warning",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, title, url*/ 135) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { url = "" } = $$props;
	let { title = "" } = $$props;
	let { text = [] } = $$props;
	const writable_props = ["type", "url", "title", "text"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BusinessComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
	};

	$$self.$capture_state = () => {
		return { type, url, title, text };
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
	};

	return [url, title, text, type];
}

class BusinessComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { type: 3, url: 0, title: 1, text: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BusinessComponent",
			options,
			id: create_fragment$7.name
		});
	}

	get type() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/TextComponent.svelte generated by Svelte v3.17.3 */
const file$8 = "src/book/TextComponent.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (34:2) {#if text.length}
function create_if_block$3(ctx) {
	let div;
	let t;
	let if_block = /*author*/ ctx[1] && create_if_block_1$2(ctx);
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$8, 34, 4, 432);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (/*author*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$2(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(34:2) {#if text.length}",
		ctx
	});

	return block;
}

// (36:6) {#if author}
function create_if_block_1$2(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*author*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*author*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "card-title");
			add_location(h5, file$8, 35, 18, 483);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*author*/ 2) set_data_dev(t, /*author*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(36:6) {#if author}",
		ctx
	});

	return block;
}

// (37:6) {#each text as line, index}
function create_each_block$2(ctx) {
	let p;
	let raw_value = /*line*/ ctx[7] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead");
			add_location(p, file$8, 37, 8, 567);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4 && raw_value !== (raw_value = /*line*/ ctx[7] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(37:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="danger">
function create_default_slot$2(ctx) {
	let div;
	let t0;
	let t1;
	let if_block_anchor;
	let if_block = /*text*/ ctx[2].length && create_if_block$3(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow");
			add_location(div, file$8, 29, 2, 348);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (/*text*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"danger\\\">",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "danger",
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, author, title*/ 1031) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TextComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, author, text, type, video, url, label];
}

class TextComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			type: 3,
			title: 0,
			author: 1,
			text: 2,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TextComponent",
			options,
			id: create_fragment$8.name
		});
	}

	get type() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/YoutubeComponent.svelte generated by Svelte v3.17.3 */
const file$9 = "src/book/YoutubeComponent.svelte";

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (36:2) {#if text.length}
function create_if_block$4(ctx) {
	let div;
	let t;
	let if_block = /*author*/ ctx[1] && create_if_block_1$3(ctx);
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$9, 36, 4, 614);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (/*author*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$3(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(36:2) {#if text.length}",
		ctx
	});

	return block;
}

// (38:6) {#if author}
function create_if_block_1$3(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*author*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*author*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "card-title");
			add_location(h5, file$9, 37, 18, 665);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*author*/ 2) set_data_dev(t, /*author*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(38:6) {#if author}",
		ctx
	});

	return block;
}

// (39:6) {#each text as line, index}
function create_each_block$3(ctx) {
	let p;
	let raw_value = /*line*/ ctx[7] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$9, 39, 8, 749);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4 && raw_value !== (raw_value = /*line*/ ctx[7] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(39:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="dark">
function create_default_slot$3(ctx) {
	let div;
	let t0;
	let t1;
	let a;
	let img;
	let img_src_value;
	let a_href_value;
	let t2;
	let if_block_anchor;
	let if_block = /*text*/ ctx[2].length && create_if_block$4(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			a = element("a");
			img = element("img");
			t2 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true, rel: true, target: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { class: true, src: true, alt: true });
			a_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow");
			add_location(div, file$9, 29, 2, 346);
			attr_dev(img, "class", "card-img-bottom");
			if (img.src !== (img_src_value = "warrior/images/youtube-" + /*video*/ ctx[3] + ".jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*title*/ ctx[0]);
			add_location(img, file$9, 33, 94, 500);
			attr_dev(a, "href", a_href_value = "https://www.youtube.com/watch?v=" + /*video*/ ctx[3]);
			attr_dev(a, "rel", "noopener noreferrer");
			attr_dev(a, "target", "_blank");
			add_location(a, file$9, 33, 2, 408);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, img);
			insert_dev(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (dirty & /*video*/ 8 && img.src !== (img_src_value = "warrior/images/youtube-" + /*video*/ ctx[3] + ".jpg")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*title*/ 1) {
				attr_dev(img, "alt", /*title*/ ctx[0]);
			}

			if (dirty & /*video*/ 8 && a_href_value !== (a_href_value = "https://www.youtube.com/watch?v=" + /*video*/ ctx[3])) {
				attr_dev(a, "href", a_href_value);
			}

			if (/*text*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"dark\\\">",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "dark",
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, author, video, title*/ 1039) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<YoutubeComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(4, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(3, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(4, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(3, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, author, text, video, type, url, label];
}

class YoutubeComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			type: 4,
			title: 0,
			author: 1,
			text: 2,
			video: 3,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "YoutubeComponent",
			options,
			id: create_fragment$9.name
		});
	}

	get type() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/QuoteComponent.svelte generated by Svelte v3.17.3 */
const file$a = "src/book/QuoteComponent.svelte";

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (30:2) {#if text.length}
function create_if_block$5(ctx) {
	let div;
	let blockquote;
	let t0;
	let footer;
	let span;
	let t1;
	let each_value = /*text*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			blockquote = element("blockquote");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			footer = element("footer");
			span = element("span");
			t1 = text(/*author*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			blockquote = claim_element(div_nodes, "BLOCKQUOTE", { class: true });
			var blockquote_nodes = children(blockquote);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(blockquote_nodes);
			}

			t0 = claim_space(blockquote_nodes);
			footer = claim_element(blockquote_nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			span = claim_element(footer_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, /*author*/ ctx[0]);
			span_nodes.forEach(detach_dev);
			footer_nodes.forEach(detach_dev);
			blockquote_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "text-light");
			add_location(span, file$a, 38, 40, 561);
			attr_dev(footer, "class", "blockquote-footer");
			add_location(footer, file$a, 38, 6, 527);
			attr_dev(blockquote, "class", "blockquote mb-0");
			add_location(blockquote, file$a, 32, 4, 406);
			attr_dev(div, "class", "card-body");
			add_location(div, file$a, 30, 4, 368);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, blockquote);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(blockquote, null);
			}

			append_dev(blockquote, t0);
			append_dev(blockquote, footer);
			append_dev(footer, span);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2) {
				each_value = /*text*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(blockquote, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*author*/ 1) set_data_dev(t1, /*author*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(30:2) {#if text.length}",
		ctx
	});

	return block;
}

// (35:6) {#each text as line, index}
function create_each_block$4(ctx) {
	let p;
	let raw_value = /*line*/ ctx[7] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$a, 35, 8, 486);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2 && raw_value !== (raw_value = /*line*/ ctx[7] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(35:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="info">
function create_default_slot$4(ctx) {
	let if_block_anchor;
	let if_block = /*text*/ ctx[1].length && create_if_block$5(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*text*/ ctx[1].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"info\\\">",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "info",
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, author, text*/ 1027) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<QuoteComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("author" in $$props) $$invalidate(0, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("author" in $$props) $$invalidate(0, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [author, text, type, title, video, url, label];
}

class QuoteComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
			type: 2,
			title: 3,
			author: 0,
			text: 1,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "QuoteComponent",
			options,
			id: create_fragment$a.name
		});
	}

	get type() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/PoemComponent.svelte generated by Svelte v3.17.3 */
const file$b = "src/book/PoemComponent.svelte";

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (34:2) {#if text.length}
function create_if_block$6(ctx) {
	let div;
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$b, 34, 4, 445);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(34:2) {#if text.length}",
		ctx
	});

	return block;
}

// (36:6) {#each text as line, index}
function create_each_block$5(ctx) {
	let p;
	let raw_value = /*line*/ ctx[7] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead");
			add_location(p, file$b, 36, 8, 520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4 && raw_value !== (raw_value = /*line*/ ctx[7] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$5.name,
		type: "each",
		source: "(36:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="success">
function create_default_slot$5(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let if_block_anchor;
	let if_block = /*text*/ ctx[2].length && create_if_block$6(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = text(" by ");
			t2 = text(/*author*/ ctx[1]);
			t3 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			t1 = claim_text(div_nodes, " by ");
			t2 = claim_text(div_nodes, /*author*/ ctx[1]);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow");
			add_location(div, file$b, 29, 2, 349);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
			insert_dev(target, t3, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);
			if (dirty & /*author*/ 2) set_data_dev(t2, /*author*/ ctx[1]);

			if (/*text*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t3);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"success\\\">",
		ctx
	});

	return block;
}

function create_fragment$b(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "success",
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, author, title*/ 1031) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PoemComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, author, text, type, video, url, label];
}

class PoemComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
			type: 3,
			title: 0,
			author: 1,
			text: 2,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PoemComponent",
			options,
			id: create_fragment$b.name
		});
	}

	get type() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/SubtitleComponent.svelte generated by Svelte v3.17.3 */
const file$c = "src/book/SubtitleComponent.svelte";

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (35:2) {#if text.length}
function create_if_block$7(ctx) {
	let div;
	let each_value = /*text*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$c, 35, 4, 481);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2) {
				each_value = /*text*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(35:2) {#if text.length}",
		ctx
	});

	return block;
}

// (37:6) {#each text as line, index}
function create_each_block$6(ctx) {
	let p;
	let raw_value = /*line*/ ctx[7] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$c, 37, 8, 556);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2 && raw_value !== (raw_value = /*line*/ ctx[7] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$6.name,
		type: "each",
		source: "(37:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (29:0) <Container context="secondary">
function create_default_slot$6(ctx) {
	let div;
	let t0;
	let t1;
	let if_block_anchor;
	let if_block = /*text*/ ctx[1].length && create_if_block$7(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow text-center");
			add_location(div, file$c, 30, 2, 385);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (/*text*/ ctx[1].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(29:0) <Container context=\\\"secondary\\\">",
		ctx
	});

	return block;
}

function create_fragment$c(ctx) {
	let div;
	let t;
	let current;

	const container = new Container({
			props: {
				context: "secondary",
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			t = space();
			create_component(container.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			children(div).forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(container.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "height", "5rem");
			add_location(div, file$c, 26, 0, 315);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			insert_dev(target, t, anchor);
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, title*/ 1027) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t);
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SubtitleComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, text, type, author, video, url, label];
}

class SubtitleComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
			type: 2,
			title: 0,
			author: 3,
			text: 1,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SubtitleComponent",
			options,
			id: create_fragment$c.name
		});
	}

	get type() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/LinkComponent.svelte generated by Svelte v3.17.3 */
const file$d = "src/book/LinkComponent.svelte";

// (28:0) <Container context="secondary">
function create_default_slot$7(ctx) {
	let a;
	let t0;
	let t1;

	const block = {
		c: function create() {
			a = element("a");
			t0 = text(/*title*/ ctx[0]);
			t1 = text(" »");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				href: true,
				rel: true,
				target: true,
				class: true
			});

			var a_nodes = children(a);
			t0 = claim_text(a_nodes, /*title*/ ctx[0]);
			t1 = claim_text(a_nodes, " »");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*url*/ ctx[1]);
			attr_dev(a, "rel", "noopener noreferrer");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "class", "btn btn-primary btn-lg");
			add_location(a, file$d, 29, 2, 351);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t0);
			append_dev(a, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (dirty & /*url*/ 2) {
				attr_dev(a, "href", /*url*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"secondary\\\">",
		ctx
	});

	return block;
}

function create_fragment$d(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "secondary",
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, url, title*/ 131) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<LinkComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(4, text = $$props.text);
		if ("video" in $$props) $$invalidate(5, video = $$props.video);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(4, text = $$props.text);
		if ("video" in $$props) $$invalidate(5, video = $$props.video);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, url, type, author, text, video, label];
}

class LinkComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
			type: 2,
			title: 0,
			author: 3,
			text: 4,
			video: 5,
			url: 1,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LinkComponent",
			options,
			id: create_fragment$d.name
		});
	}

	get type() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/warrior.svelte generated by Svelte v3.17.3 */
const file$e = "src/routes/warrior.svelte";

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (129:0) {#each content.data as item}
function create_each_block$7(ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let current;
	const switch_instance_spread_levels = [/*item*/ ctx[12]];
	var switch_value = /*componentLookup*/ ctx[5][/*item*/ ctx[12].type];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t1 = space();
			div2 = element("div");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (switch_instance) claim_component(switch_instance.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "col-md-2 col-lg-3 col-xl-4");
			add_location(div0, file$e, 131, 2, 3278);
			attr_dev(div1, "class", "col-12 col-md-8 col-lg-6 col-xl-4 mb-5");
			add_location(div1, file$e, 134, 4, 3333);
			attr_dev(div2, "class", "col-md-2 col-lg-3 col-xl-4");
			add_location(div2, file$e, 138, 2, 3468);
			attr_dev(div3, "class", "row");
			add_location(div3, file$e, 129, 2, 3257);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div1);

			if (switch_instance) {
				mount_component(switch_instance, div1, null);
			}

			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div3, t2);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*content*/ 2)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*item*/ ctx[12])])
			: {};

			if (switch_value !== (switch_value = /*componentLookup*/ ctx[5][/*item*/ ctx[12].type])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div1, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$7.name,
		type: "each",
		source: "(129:0) {#each content.data as item}",
		ctx
	});

	return block;
}

function create_fragment$e(ctx) {
	let t0;
	let div0;
	let nav0;
	let ol;
	let li0;
	let a0;
	let t1;
	let t2;
	let li1;
	let t3_value = /*content*/ ctx[1].meta.title + "";
	let t3;
	let t4;
	let div1;
	let t5;
	let div4;
	let div3;
	let div2;
	let t6;
	let nav1;
	let p0;
	let a1;
	let t7_value = /*contentNext*/ ctx[3].meta.title + "";
	let t7;
	let t8;
	let img0;
	let img0_src_value;
	let img0_alt_value;
	let a1_href_value;
	let t9;
	let p1;
	let a2;
	let img1;
	let img1_src_value;
	let img1_alt_value;
	let t10;
	let t11_value = /*contentPrev*/ ctx[4].meta.title + "";
	let t11;
	let a2_href_value;
	let t12;
	let a3;
	let img2;
	let img2_src_value;
	let current;
	let each_value = /*content*/ ctx[1].data;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			div0 = element("div");
			nav0 = element("nav");
			ol = element("ol");
			li0 = element("li");
			a0 = element("a");
			t1 = text("Warrior");
			t2 = space();
			li1 = element("li");
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			t6 = space();
			nav1 = element("nav");
			p0 = element("p");
			a1 = element("a");
			t7 = text(t7_value);
			t8 = space();
			img0 = element("img");
			t9 = space();
			p1 = element("p");
			a2 = element("a");
			img1 = element("img");
			t10 = text(" ");
			t11 = text(t11_value);
			t12 = space();
			a3 = element("a");
			img2 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-zombrn\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			nav0 = claim_element(div0_nodes, "NAV", { class: true, "aria-label": true });
			var nav0_nodes = children(nav0);
			ol = claim_element(nav0_nodes, "OL", { class: true });
			var ol_nodes = children(ol);
			li0 = claim_element(ol_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Warrior");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ol_nodes);
			li1 = claim_element(ol_nodes, "LI", { class: true, "aria-current": true });
			var li1_nodes = children(li1);
			t3 = claim_text(li1_nodes, t3_value);
			li1_nodes.forEach(detach_dev);
			ol_nodes.forEach(detach_dev);
			nav0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true, style: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			div2 = claim_element(div3_nodes, "DIV", {
				class: true,
				role: true,
				"aria-valuenow": true,
				"aria-valuemin": true,
				"aria-valuemax": true,
				style: true
			});

			children(div2).forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(div4_nodes);
			nav1 = claim_element(div4_nodes, "NAV", { "aria-label": true });
			var nav1_nodes = children(nav1);
			p0 = claim_element(nav1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			a1 = claim_element(p0_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t7 = claim_text(a1_nodes, t7_value);
			t8 = claim_space(a1_nodes);
			img0 = claim_element(a1_nodes, "IMG", { style: true, src: true, alt: true });
			a1_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t9 = claim_space(nav1_nodes);
			p1 = claim_element(nav1_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			a2 = claim_element(p1_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			img1 = claim_element(a2_nodes, "IMG", { style: true, src: true, alt: true });
			t10 = claim_text(a2_nodes, " ");
			t11 = claim_text(a2_nodes, t11_value);
			a2_nodes.forEach(detach_dev);
			t12 = claim_space(p1_nodes);
			a3 = claim_element(p1_nodes, "A", { href: true, class: true });
			var a3_nodes = children(a3);
			img2 = claim_element(a3_nodes, "IMG", { alt: true, style: true, src: true });
			a3_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			nav1_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Cat Pea";
			attr_dev(a0, "href", "warrior?chapter=index");
			add_location(a0, file$e, 119, 32, 2959);
			attr_dev(li0, "class", "breadcrumb-item");
			add_location(li0, file$e, 119, 4, 2931);
			attr_dev(li1, "class", "breadcrumb-item active");
			attr_dev(li1, "aria-current", "page");
			add_location(li1, file$e, 120, 4, 3012);
			attr_dev(ol, "class", "breadcrumb bg-dark text-white");
			add_location(ol, file$e, 118, 4, 2884);
			attr_dev(nav0, "class", "mb-5");
			attr_dev(nav0, "aria-label", "breadcrumb");
			add_location(nav0, file$e, 117, 2, 2837);
			attr_dev(div0, "class", "container-fluid text-warning");
			set_style(div0, "visibility", "hidden");
			toggle_class(div0, "visible", /*pageReady*/ ctx[0]);
			add_location(div0, file$e, 115, 0, 2735);
			attr_dev(div1, "class", "container-fluid text-warning py-5");
			set_style(div1, "visibility", "hidden");
			toggle_class(div1, "visible", /*pageReady*/ ctx[0]);
			add_location(div1, file$e, 126, 0, 3121);
			attr_dev(div2, "class", "progress-bar progress-bar-striped progress-bar-animated-x");
			attr_dev(div2, "role", "progressbar");
			attr_dev(div2, "aria-valuenow", /*percent*/ ctx[2]);
			attr_dev(div2, "aria-valuemin", "0");
			attr_dev(div2, "aria-valuemax", "100");
			set_style(div2, "width", /*percent*/ ctx[2] + "%");
			add_location(div2, file$e, 152, 4, 3687);
			attr_dev(div3, "class", "progress bg-dark");
			add_location(div3, file$e, 151, 2, 3652);
			set_style(img0, "width", "1rem");
			set_style(img0, "height", "1rem");
			if (img0.src !== (img0_src_value = "warrior/images/arrow-alt-circle-right.svg")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", img0_alt_value = /*contentNext*/ ctx[3].meta.title);
			add_location(img0, file$e, 158, 122, 4065);
			attr_dev(a1, "href", a1_href_value = "warrior?chapter=" + /*contentNext*/ ctx[3].meta.name);
			attr_dev(a1, "class", "btn btn-lg btn-primary btn-block");
			add_location(a1, file$e, 158, 6, 3949);
			attr_dev(p0, "class", "py-3");
			add_location(p0, file$e, 157, 4, 3926);
			set_style(img1, "width", "1rem");
			set_style(img1, "height", "1rem");
			if (img1.src !== (img1_src_value = "warrior/images/arrow-alt-circle-left.svg")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", img1_alt_value = /*contentPrev*/ ctx[4].meta.title);
			add_location(img1, file$e, 162, 82, 4301);
			attr_dev(a2, "href", a2_href_value = "warrior?chapter=" + /*contentPrev*/ ctx[4].meta.name);
			attr_dev(a2, "class", "btn btn-secondary");
			add_location(a2, file$e, 162, 6, 4225);
			attr_dev(img2, "alt", "Index");
			set_style(img2, "width", "1rem");
			set_style(img2, "height", "1rem");
			if (img2.src !== (img2_src_value = "warrior/images/list-alt.svg")) attr_dev(img2, "src", img2_src_value);
			add_location(img2, file$e, 163, 64, 4517);
			attr_dev(a3, "href", "warrior?chapter=index");
			attr_dev(a3, "class", "btn btn-secondary");
			add_location(a3, file$e, 163, 6, 4459);
			attr_dev(p1, "class", "py-3");
			add_location(p1, file$e, 161, 4, 4202);
			attr_dev(nav1, "aria-label", "Page Navigation");
			add_location(nav1, file$e, 155, 2, 3886);
			attr_dev(div4, "class", "container-fluid text-warning");
			set_style(div4, "visibility", "hidden");
			toggle_class(div4, "visible", /*pageReady*/ ctx[0]);
			add_location(div4, file$e, 147, 0, 3548);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);
			append_dev(div0, nav0);
			append_dev(nav0, ol);
			append_dev(ol, li0);
			append_dev(li0, a0);
			append_dev(a0, t1);
			append_dev(ol, t2);
			append_dev(ol, li1);
			append_dev(li1, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			insert_dev(target, t5, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div4, t6);
			append_dev(div4, nav1);
			append_dev(nav1, p0);
			append_dev(p0, a1);
			append_dev(a1, t7);
			append_dev(a1, t8);
			append_dev(a1, img0);
			append_dev(nav1, t9);
			append_dev(nav1, p1);
			append_dev(p1, a2);
			append_dev(a2, img1);
			append_dev(a2, t10);
			append_dev(a2, t11);
			append_dev(p1, t12);
			append_dev(p1, a3);
			append_dev(a3, img2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*content*/ 2) && t3_value !== (t3_value = /*content*/ ctx[1].meta.title + "")) set_data_dev(t3, t3_value);

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div0, "visible", /*pageReady*/ ctx[0]);
			}

			if (dirty & /*componentLookup, content*/ 34) {
				each_value = /*content*/ ctx[1].data;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$7(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$7(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div1, "visible", /*pageReady*/ ctx[0]);
			}

			if (!current || dirty & /*percent*/ 4) {
				attr_dev(div2, "aria-valuenow", /*percent*/ ctx[2]);
			}

			if (!current || dirty & /*percent*/ 4) {
				set_style(div2, "width", /*percent*/ ctx[2] + "%");
			}

			if ((!current || dirty & /*contentNext*/ 8) && t7_value !== (t7_value = /*contentNext*/ ctx[3].meta.title + "")) set_data_dev(t7, t7_value);

			if (!current || dirty & /*contentNext*/ 8 && img0_alt_value !== (img0_alt_value = /*contentNext*/ ctx[3].meta.title)) {
				attr_dev(img0, "alt", img0_alt_value);
			}

			if (!current || dirty & /*contentNext*/ 8 && a1_href_value !== (a1_href_value = "warrior?chapter=" + /*contentNext*/ ctx[3].meta.name)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (!current || dirty & /*contentPrev*/ 16 && img1_alt_value !== (img1_alt_value = /*contentPrev*/ ctx[4].meta.title)) {
				attr_dev(img1, "alt", img1_alt_value);
			}

			if ((!current || dirty & /*contentPrev*/ 16) && t11_value !== (t11_value = /*contentPrev*/ ctx[4].meta.title + "")) set_data_dev(t11, t11_value);

			if (!current || dirty & /*contentPrev*/ 16 && a2_href_value !== (a2_href_value = "warrior?chapter=" + /*contentPrev*/ ctx[4].meta.name)) {
				attr_dev(a2, "href", a2_href_value);
			}

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div4, "visible", /*pageReady*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$e.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$e($$self, $$props, $$invalidate) {
	const componentLookup = {
		image: Illustration,
		business: BusinessComponent,
		text: TextComponent,
		youtube: YoutubeComponent,
		quote: QuoteComponent,
		poem: PoemComponent,
		subtitle: SubtitleComponent,
		link: LinkComponent
	};

	const { page } = stores$1();
	let pageReady = false;
	let database = [];
	let chapter = "index";
	let content = { meta: {}, data: [] };
	let percent = 0;
	let contentNext = { meta: {}, data: [] };
	let contentPrev = { meta: {}, data: [] };

	// Calculations
	let currentIndex = null;

	//DEV
	let types = new Set();

	//DEV
	function index() {
		const response = {
			meta: { "name": "index", "title": "Index" },
			data: [
				{
					"type": "text",
					"title": "Table of Contents",
					"text": []
				}
			]
		};

		database.forEach(function (item) {
			response.data[0].text.push(`<a href="warrior?chapter=${item.meta.name}">${item.meta.title}</a>`);
		});

		return response;
	}

	onMount(async function () {
		const res = await fetch("book.json");
		const json = await res.json();
		$$invalidate(0, pageReady = true);
		database = json;

		page.subscribe(value => {
			$$invalidate(1, content = database.find(content => content.meta.name == value.query.chapter) || index());
			currentIndex = database.indexOf(content);
			console.log("currentIndex", currentIndex);
			let prevIndex = currentIndex - 1;
			if (prevIndex < 0) prevIndex = database.length - 1;
			let nextIndex = currentIndex + 1;
			if (nextIndex > database.length - 1) nextIndex = 0;
			$$invalidate(3, contentNext = database[nextIndex]);
			$$invalidate(4, contentPrev = database[prevIndex]);
			console.log("prevIndex", prevIndex);
			console.log("nextIndex", nextIndex);
			$$invalidate(2, percent = calculatePercent(currentIndex + 1, database.length) * 100);
		});
	}); //database.forEach(chapter => chapter.data.forEach(item=>types.add(item.type))) // database.forEach(chapter => chapter.data.forEach(item=>Object.keys(item).forEach(item=>types.add(item)) )) // console.log(Array.from(types), types);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("pageReady" in $$props) $$invalidate(0, pageReady = $$props.pageReady);
		if ("database" in $$props) database = $$props.database;
		if ("chapter" in $$props) chapter = $$props.chapter;
		if ("content" in $$props) $$invalidate(1, content = $$props.content);
		if ("percent" in $$props) $$invalidate(2, percent = $$props.percent);
		if ("contentNext" in $$props) $$invalidate(3, contentNext = $$props.contentNext);
		if ("contentPrev" in $$props) $$invalidate(4, contentPrev = $$props.contentPrev);
		if ("currentIndex" in $$props) currentIndex = $$props.currentIndex;
		if ("types" in $$props) types = $$props.types;
	};

	return [pageReady, content, percent, contentNext, contentPrev, componentLookup];
}

class Warrior extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Warrior",
			options,
			id: create_fragment$e.name
		});
	}
}

export default Warrior;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Fycmlvci4wY2U3YTQ3Ny5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlc3RyYXAvc3JjL3V0aWxzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZXN0cmFwL3NyYy9DYXJkLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGVzdHJhcC9zcmMvQ2FyZEJvZHkuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZXN0cmFwL3NyYy9DYXJkSW1nLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGVzdHJhcC9zcmMvQ2FyZFRleHQuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZXN0cmFwL3NyYy9DYXJkVGl0bGUuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jvb2stZ3VpL3NyYy91dGlscy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib29rLWd1aS9zcmMvSWxsdXN0cmF0aW9uLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9ib29rL0NvbnRhaW5lci5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYm9vay9CdXNpbmVzc0NvbXBvbmVudC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYm9vay9UZXh0Q29tcG9uZW50LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9ib29rL1lvdXR1YmVDb21wb25lbnQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2Jvb2svUXVvdGVDb21wb25lbnQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2Jvb2svUG9lbUNvbXBvbmVudC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYm9vay9TdWJ0aXRsZUNvbXBvbmVudC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvYm9vay9MaW5rQ29tcG9uZW50LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvd2Fycmlvci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cdGlmIChtaXgpIHtcblx0XHRpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGlmICghIW1peC5wdXNoKSB7XG5cdFx0XHRcdGZvciAoaz0wOyBrIDwgbWl4Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0aWYgKG1peFtrXSAmJiAoeSA9IHRvVmFsKG1peFtrXSkpKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdFx0aWYgKG1peFtrXSAmJiAoeSA9IHRvVmFsKGspKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG1peCAhPT0gJ2Jvb2xlYW4nICYmICFtaXguY2FsbCkge1xuXHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdHN0ciArPSBtaXg7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblx0dmFyIGk9MCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAoeCA9IHRvVmFsKGFyZ3VtZW50c1tpKytdKSkge1xuXHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdHN0ciArPSB4XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0T3JpZ2luYWxCb2R5UGFkZGluZygpIHtcbiAgY29uc3Qgc3R5bGUgPSB3aW5kb3cgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKSA6IHt9O1xuXG4gIHJldHVybiBwYXJzZUludCgoc3R5bGUgJiYgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpKSB8fCAwLCAxMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgbGV0IHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAvLyAubW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUgc3R5bGVzIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL3Y0LjAuMC1hbHBoYS40L3Njc3MvX21vZGFsLnNjc3MjTDEwNi1MMTEzXG4gIHNjcm9sbERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc1MHB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgY29uc3Qgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0U2Nyb2xsYmFyV2lkdGgocGFkZGluZykge1xuICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmcgPiAwID8gYCR7cGFkZGluZ31weGAgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb2R5T3ZlcmZsb3dpbmcoKSB7XG4gIHJldHVybiB3aW5kb3cgPyBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgd2luZG93LmlubmVyV2lkdGggOiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25kaXRpb25hbGx5VXBkYXRlU2Nyb2xsYmFyKCkge1xuICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IGdldFNjcm9sbGJhcldpZHRoKCk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL3Y0LjAuMC1hbHBoYS42L2pzL3NyYy9tb2RhbC5qcyNMNDMzXG4gIGNvbnN0IGZpeGVkQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnXG4gIClbMF07XG4gIGNvbnN0IGJvZHlQYWRkaW5nID0gZml4ZWRDb250ZW50XG4gICAgPyBwYXJzZUludChmaXhlZENvbnRlbnQuc3R5bGUucGFkZGluZ1JpZ2h0IHx8IDAsIDEwKVxuICAgIDogMDtcblxuICBpZiAoaXNCb2R5T3ZlcmZsb3dpbmcoKSkge1xuICAgIHNldFNjcm9sbGJhcldpZHRoKGJvZHlQYWRkaW5nICsgc2Nyb2xsYmFyV2lkdGgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2x1bW5TaXplQ2xhc3MoaXNYcywgY29sV2lkdGgsIGNvbFNpemUpIHtcbiAgaWYgKGNvbFNpemUgPT09IHRydWUgfHwgY29sU2l6ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gaXNYcyA/ICdjb2wnIDogYGNvbC0ke2NvbFdpZHRofWA7XG4gIH0gZWxzZSBpZiAoY29sU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgcmV0dXJuIGlzWHMgPyAnY29sLWF1dG8nIDogYGNvbC0ke2NvbFdpZHRofS1hdXRvYDtcbiAgfVxuXG4gIHJldHVybiBpc1hzID8gYGNvbC0ke2NvbFNpemV9YCA6IGBjb2wtJHtjb2xXaWR0aH0tJHtjb2xTaXplfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhbigkJHByb3BzKSB7XG4gIC8vIFRPRE8gc3VwcG9ydCBrZXlzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBjb25zdCB7IGNoaWxkcmVuLCAkJHNjb3BlLCAkJHNsb3RzIH0gPSAkJHByb3BzO1xuICBjb25zdCByZXN0ID0ge307XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKCQkcHJvcHMpKSB7XG4gICAgaWYgKGtleSAhPT0gXCJjaGlsZHJlblwiICYmIGtleSAhPT0gXCIkJHNjb3BlXCIgJiYga2V5ICE9PSBcIiQkc2xvdHNcIikge1xuICAgICAgcmVzdFtrZXldID0gJCRwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyb3dzZXJFdmVudCh0YXJnZXQsIC4uLmFyZ3MpIHtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoLi4uYXJncyk7XG5cbiAgcmV0dXJuICgpID0+IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKC4uLmFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV3Q2Fyb3VzZWxBY3RpdmVJbmRleChkaXJlY3Rpb24sIGl0ZW1zLCBhY3RpdmVJbmRleCkge1xuICBpZiAoZGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICByZXR1cm4gYWN0aXZlSW5kZXggPT09IDAgPyBpdGVtcy5sZW5ndGggLSAxIDogYWN0aXZlSW5kZXggLSAxO1xuICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUluZGV4ID09PSBpdGVtcy5sZW5ndGggLSAxID8gMCA6IGFjdGl2ZUluZGV4ICsgMTtcbiAgfVxufVxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG4gIGltcG9ydCB7IGNsZWFuIH0gZnJvbSAnLi91dGlscyc7XG5cbiAgbGV0IGNsYXNzTmFtZSA9ICcnO1xuICBleHBvcnQgeyBjbGFzc05hbWUgYXMgY2xhc3MgfTtcbiAgZXhwb3J0IGxldCBib2R5ID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgY29sb3IgPSAnJztcbiAgZXhwb3J0IGxldCBpZCA9ICcnO1xuICBleHBvcnQgbGV0IGludmVyc2UgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBvdXRsaW5lID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgc3R5bGUgPSAnJztcblxuICBjb25zdCBwcm9wcyA9IGNsZWFuKCQkcHJvcHMpO1xuXG4gICQ6IGNsYXNzZXMgPSBjbHN4KFxuICAgIGNsYXNzTmFtZSxcbiAgICAnY2FyZCcsXG4gICAgaW52ZXJzZSA/ICd0ZXh0LXdoaXRlJyA6IGZhbHNlLFxuICAgIGJvZHkgPyAnY2FyZC1ib2R5JyA6IGZhbHNlLFxuICAgIGNvbG9yID8gYCR7b3V0bGluZSA/ICdib3JkZXInIDogJ2JnJ30tJHtjb2xvcn1gIDogZmFsc2VcbiAgKTtcbjwvc2NyaXB0PlxuXG48ZGl2IHsuLi5wcm9wc30ge2lkfSBjbGFzcz17Y2xhc3Nlc30gb246Y2xpY2sge3N0eWxlfT5cbiAgPHNsb3QgLz5cbjwvZGl2PlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG4gIGltcG9ydCB7IGNsZWFuIH0gZnJvbSAnLi91dGlscyc7XG5cbiAgbGV0IGNsYXNzTmFtZSA9ICcnO1xuICBleHBvcnQgeyBjbGFzc05hbWUgYXMgY2xhc3MgfTtcbiAgZXhwb3J0IGxldCBpZCA9ICcnO1xuXG4gIGNvbnN0IHByb3BzID0gY2xlYW4oJCRwcm9wcyk7XG5cbiAgJDogY2xhc3NlcyA9IGNsc3goY2xhc3NOYW1lLCAnY2FyZC1ib2R5Jyk7XG48L3NjcmlwdD5cblxuPGRpdiB7Li4ucHJvcHN9IHtpZH0gY2xhc3M9e2NsYXNzZXN9PlxuICA8c2xvdCAvPlxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbiAgaW1wb3J0IHsgY2xlYW4gfSBmcm9tICcuL3V0aWxzJztcblxuICBsZXQgY2xhc3NOYW1lID0gJyc7XG4gIGV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xuICBleHBvcnQgbGV0IHRvcCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGJvdHRvbSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHNyYztcbiAgZXhwb3J0IGxldCBhbHQgPSAnJztcblxuICBjb25zdCBwcm9wcyA9IGNsZWFuKCQkcHJvcHMpO1xuXG4gIGxldCBjbGFzc2VzID0gJyc7XG4gICQ6IHtcbiAgICBsZXQgY2FyZEltZ0NsYXNzTmFtZSA9ICdjYXJkLWltZyc7XG4gICAgaWYgKHRvcCkge1xuICAgICAgY2FyZEltZ0NsYXNzTmFtZSA9ICdjYXJkLWltZy10b3AnO1xuICAgIH1cbiAgICBpZiAoYm90dG9tKSB7XG4gICAgICBjYXJkSW1nQ2xhc3NOYW1lID0gJ2NhcmQtaW1nLWJvdHRvbSc7XG4gICAgfVxuICAgIGNsYXNzZXMgPSBjbHN4KGNsYXNzTmFtZSwgY2FyZEltZ0NsYXNzTmFtZSk7XG4gIH1cbjwvc2NyaXB0PlxuXG48aW1nIHsuLi5wcm9wc30gY2xhc3M9e2NsYXNzZXN9IHtzcmN9IHthbHR9IC8+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbiAgaW1wb3J0IHsgY2xlYW4gfSBmcm9tICcuL3V0aWxzJztcblxuICBsZXQgY2xhc3NOYW1lID0gJyc7XG4gIGV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xuXG4gIGNvbnN0IHByb3BzID0gY2xlYW4oJCRwcm9wcyk7XG5cbiAgJDogY2xhc3NlcyA9IGNsc3goY2xhc3NOYW1lLCAnY2FyZC10ZXh0Jyk7XG48L3NjcmlwdD5cblxuPHAgey4uLnByb3BzfSBjbGFzcz17Y2xhc3Nlc30+XG4gIDxzbG90IC8+XG48L3A+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbiAgaW1wb3J0IHsgY2xlYW4gfSBmcm9tICcuL3V0aWxzJztcblxuICBsZXQgY2xhc3NOYW1lID0gJyc7XG4gIGV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xuXG4gIGNvbnN0IHByb3BzID0gY2xlYW4oJCRwcm9wcyk7XG5cbiAgJDogY2xhc3NlcyA9IGNsc3goY2xhc3NOYW1lLCAnY2FyZC10aXRsZScpO1xuPC9zY3JpcHQ+XG5cbjxkaXYgey4uLnByb3BzfSBjbGFzcz17Y2xhc3Nlc30+XG4gIDxzbG90IC8+XG48L2Rpdj5cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRPcmlnaW5hbEJvZHlQYWRkaW5nKCkge1xuICBjb25zdCBzdHlsZSA9IHdpbmRvdyA/IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHksIG51bGwpIDoge307XG5cbiAgcmV0dXJuIHBhcnNlSW50KChzdHlsZSAmJiBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JykpIHx8IDAsIDEwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbGJhcldpZHRoKCkge1xuICBsZXQgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIC8vIC5tb2RhbC1zY3JvbGxiYXItbWVhc3VyZSBzdHlsZXMgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvdjQuMC4wLWFscGhhLjQvc2Nzcy9fbW9kYWwuc2NzcyNMMTA2LUwxMTNcbiAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLndpZHRoID0gJzUwcHgnO1xuICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTY3JvbGxiYXJXaWR0aChwYWRkaW5nKSB7XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA+IDAgPyBgJHtwYWRkaW5nfXB4YCA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JvZHlPdmVyZmxvd2luZygpIHtcbiAgcmV0dXJuIHdpbmRvdyA/IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCB3aW5kb3cuaW5uZXJXaWR0aCA6IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmRpdGlvbmFsbHlVcGRhdGVTY3JvbGxiYXIoKSB7XG4gIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvdjQuMC4wLWFscGhhLjYvanMvc3JjL21vZGFsLmpzI0w0MzNcbiAgY29uc3QgZml4ZWRDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCdcbiAgKVswXTtcbiAgY29uc3QgYm9keVBhZGRpbmcgPSBmaXhlZENvbnRlbnRcbiAgICA/IHBhcnNlSW50KGZpeGVkQ29udGVudC5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgMCwgMTApXG4gICAgOiAwO1xuXG4gIGlmIChpc0JvZHlPdmVyZmxvd2luZygpKSB7XG4gICAgc2V0U2Nyb2xsYmFyV2lkdGgoYm9keVBhZGRpbmcgKyBzY3JvbGxiYXJXaWR0aCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHVtblNpemVDbGFzcyhpc1hzLCBjb2xXaWR0aCwgY29sU2l6ZSkge1xuICBpZiAoY29sU2l6ZSA9PT0gdHJ1ZSB8fCBjb2xTaXplID09PSAnJykge1xuICAgIHJldHVybiBpc1hzID8gJ2NvbCcgOiBgY29sLSR7Y29sV2lkdGh9YDtcbiAgfSBlbHNlIGlmIChjb2xTaXplID09PSAnYXV0bycpIHtcbiAgICByZXR1cm4gaXNYcyA/ICdjb2wtYXV0bycgOiBgY29sLSR7Y29sV2lkdGh9LWF1dG9gO1xuICB9XG5cbiAgcmV0dXJuIGlzWHMgPyBgY29sLSR7Y29sU2l6ZX1gIDogYGNvbC0ke2NvbFdpZHRofS0ke2NvbFNpemV9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuKCQkcHJvcHMpIHtcbiAgLy8gVE9ETyBzdXBwb3J0IGtleXNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGNvbnN0IHsgY2hpbGRyZW4sICQkc2NvcGUsICQkc2xvdHMgfSA9ICQkcHJvcHM7XG4gIGNvbnN0IHJlc3QgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoJCRwcm9wcykpIHtcbiAgICBpZiAoa2V5ICE9PSBcImNoaWxkcmVuXCIgJiYga2V5ICE9PSBcIiQkc2NvcGVcIiAmJiBrZXkgIT09IFwiJCRzbG90c1wiKSB7XG4gICAgICByZXN0W2tleV0gPSAkJHByb3BzW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJvd3NlckV2ZW50KHRhcmdldCwgLi4uYXJncykge1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lciguLi5hcmdzKTtcblxuICByZXR1cm4gKCkgPT4gdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoLi4uYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXdDYXJvdXNlbEFjdGl2ZUluZGV4KGRpcmVjdGlvbiwgaXRlbXMsIGFjdGl2ZUluZGV4KSB7XG4gIGlmIChkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgIHJldHVybiBhY3RpdmVJbmRleCA9PT0gMCA/IGl0ZW1zLmxlbmd0aCAtIDEgOiBhY3RpdmVJbmRleCAtIDE7XG4gIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICByZXR1cm4gYWN0aXZlSW5kZXggPT09IGl0ZW1zLmxlbmd0aCAtIDEgPyAwIDogYWN0aXZlSW5kZXggKyAxO1xuICB9XG59XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBDYXJkLCBDYXJkQm9keSwgQ2FyZEltZywgQ2FyZFRpdGxlLCBDYXJkVGV4dCB9IGZyb20gXCJzdmVsdGVzdHJhcFwiO1xuXG4gIGltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuICBpbXBvcnQgeyBjbGVhbiB9IGZyb20gJy4vdXRpbHMnO1xuXG4gIGNvbnN0IFNMT1RTID0gJCRwcm9wcy4kJHNsb3RzO1xuXG4gIGxldCBjbGFzc05hbWUgPSAnJztcbiAgZXhwb3J0IHsgY2xhc3NOYW1lIGFzIGNsYXNzIH07XG5cblxuICBleHBvcnQgbGV0IGlkID0gJyc7XG4gIGV4cG9ydCBsZXQgc3R5bGUgPSAnJztcblxuICAvLyBXaWRnZXQgUHJvcGVydGllc1xuICBleHBvcnQgbGV0IHRpdGxlID0gJyc7XG4gIGV4cG9ydCBsZXQgdXJsID0gJyc7XG4gIGV4cG9ydCBsZXQgdGV4dCA9IFtdO1xuXG4gIGNvbnN0IHByb3BzID0gY2xlYW4oJCRwcm9wcyk7XG5cbiAgJDogY2xhc3NlcyA9IGNsc3goXG4gICAgY2xhc3NOYW1lLFxuICAgICdjYXJkJyxcbiAgICAnYmctZGFuZ2VyJyxcbiAgICAndGV4dC13aGl0ZSdcbiAgKTtcblxuICAkOiBjbGFzc2VzQ2FyZFRpdGxlID0gY2xzeChcbiAgICB0ZXh0Lmxlbmd0aCA9PSAwID8gJ21iLTAnIDogZmFsc2UsXG4gICk7XG5cbjwvc2NyaXB0PlxuXG48Q2FyZCB7Li4ucHJvcHN9IHtpZH0gY2xhc3M9e2NsYXNzZXN9IG9uOmNsaWNrIHtzdHlsZX0+XG5cbiAgPENhcmRJbWcgc3JjPVwie3VybH1cIiBhbHQ9XCJ7dGl0bGV9XCIvPlxuXG4gIDwhLS0gcHJpbnQgb25seSBpZiB0aGVyZSBpcyBib2R5IHNsb3Qgb3IgdGV4dCAtLS0+XG4gIHsjaWYgKHRleHQubGVuZ3RoID4gMCl8fCgoU0xPVFMpJiYoU0xPVFMuYm9keSkpfVxuICA8Q2FyZEJvZHk+XG4gICAgeyNpZiB0aXRsZX1cbiAgICAgIDxDYXJkVGl0bGUgY2xhc3M9e2NsYXNzZXNDYXJkVGl0bGV9PjxoNT57dGl0bGV9PC9oNT48L0NhcmRUaXRsZT5cbiAgICB7L2lmfVxuICAgIDxzbG90IG5hbWU9XCJib2R5XCIvPlxuICAgIHsjZWFjaCB0ZXh0IGFzIGxpbmUsIGluZGV4fVxuICAgICAgPENhcmRUZXh0PntAaHRtbCBsaW5lfTwvQ2FyZFRleHQ+XG4gICAgey9lYWNofVxuICA8L0NhcmRCb2R5PlxuICB7L2lmfVxuXG4gIDxzbG90Lz5cblxuPC9DYXJkPlxuIiwiPHNjcmlwdD5cbmV4cG9ydCBsZXQgY29udGV4dCA9IFwic2Vjb25kYXJ5XCI7XG5pbXBvcnQgb2N0aWNvbnMgZnJvbSAnb2N0aWNvbnMnO1xuXG5cbi8qXG4gIDAgaXMgUHJlZmVyZW5jZSBWaWV3XG4gIDEgaXMgQXBwbGljYXRpb24gVmlld1xuKi9cbmxldCB2aWV3ID0gMTsgLy8gY29udHJvbGxlZCB2aWEgVUkgaWNvbnNcblxuPC9zY3JpcHQ+XG5cblxuXG57I2lmIHZpZXcgPT0gMH1cblxuICA8IS0tIFRPRE86IEFkZCB0aGlzPyBzdHlsZT1cIm1pbi1oZWlnaHQ6IDIwcmVtO1wiIC0tPlxuICA8ZGl2IGNsYXNzPVwiY2FyZCB0ZXh0LXdoaXRlIGJnLWRhcmsgc2hhZG93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyIGxlYWRcIj5cbiAgICAgIFByZWZlcmVuY2VzXG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi10ZXh0IGJ0bi1zbSBib3JkZXIgYm9yZGVyLXNlY29uZGFyeSBmbG9hdC1yaWdodFwiIG9uOmNsaWNrPVwie2UgPT4gdmlldyA9IDF9XCI+e0BodG1sIG9jdGljb25zLmNoZWNrbGlzdC50b1NWRyh7IFwiY2xhc3NcIjogXCJmaWxsLXdoaXRlXCIgfSl9PC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keSBwLTJcIiBzdHlsZT1cIm1heC1oZWlnaHQ6IDI1cmVtOyBvdmVyZmxvdy15OiBhdXRvO1wiPlxuXG4gICAgPHNsb3QgbmFtZT1cInByZWZlcmVuY2VzXCI+XG4gICAgICA8cCBjbGFzcz1cImNhcmQtdGV4dFwiPlxuICAgICAgICBQcmVmZXJlbmNlcyBFbXB0eVxuICAgICAgPC9wPlxuICAgIDwvc2xvdD5cblxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyIHRleHQtbXV0ZWQgc21hbGxcIj5cbiAgICAgIDxzbG90IG5hbWU9XCJwcmVmZXJlbmNlcy1mb290ZXJcIj5cbiAgICAgIDwvc2xvdD5cbiAgICA8L2Rpdj5cblxuXG5cbiAgPC9kaXY+XG5cbns6ZWxzZSBpZiB2aWV3ID09IDF9XG5cbiAgPGRpdiBjbGFzcz1cImNhcmQgdGV4dC13aGl0ZSBiZy17Y29udGV4dH0gc2hhZG93XCI+XG5cblxuXG4gICAgPHNsb3Q+XG4gICAgICA8IS0tXG4gICAgICBOT1RFOiB5b3UgYXJlIHJlcXVpcmVkIHRvIGNyZWF0ZSBhIGNhcmQtYm9keSBub2RlLCB0aGlzIGdpdmVzIHlvdSB0aGUgYWJpbGl0eSB0byBhZGQgZm9vdGVyIGFuZCBjYXJkLWltZywgY2FyZC1pbWctdG9wL2NhcmQtaW1nLWJvdHRvbVxuICAgICAgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5IHAtMlwiIHN0eWxlPVwiYm94LXNoYWRvdzogaW5zZXQgMCAwIDEwcHggIzAwMDAwMDtcIj5cbiAgICAgICAgICA8cCBjbGFzcz1cImNhcmQtdGV4dFwiPlxuICAgICAgICAgICAgQXBwbGljYXRpb24gRW1wdHlcbiAgICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICA8L3Nsb3Q+XG5cbiAgPC9kaXY+XG5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuXG4gIGltcG9ydCBDb250YWluZXIgZnJvbSAnLi9Db250YWluZXIuc3ZlbHRlJztcblxuICAvLyBEZWJ1Z1xuICBleHBvcnQgbGV0IHR5cGUgPSAnJztcblxuICAvLyBTZXR1cFxuICBleHBvcnQgbGV0IHVybCA9ICcnO1xuICBleHBvcnQgbGV0IHRpdGxlID0gJyc7XG4gIGV4cG9ydCBsZXQgdGV4dCA9IFtdO1xuXG4gIC8vIHtcbiAgLy8gIFwidHlwZVwiOiBcImltYWdlXCIsXG4gIC8vICBcInVybFwiOiBcImltYWdlcy9iZWFycy5qcGdcIixcbiAgLy8gIFwidGl0bGVcIjogXCJUaGUgQmVhciBIdW50XCIsXG4gIC8vICBcInRleHRcIjogW1xuICAvLyAgIFwiTGluZSAxXCIsXG4gIC8vICAgXCJMaW5lIDJcIlxuICAvLyAgXVxuICAvLyB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cblxuPC9zdHlsZT5cblxuXG5cbjxDb250YWluZXIgY29udGV4dD1cIndhcm5pbmdcIj5cblxuICA8aW1nIHNyYz1cInt1cmx9XCIgY2xhc3M9XCJjYXJkLWltZy10b3BcIiBhbHQ9XCJ7dGl0bGV9XCIvPlxuXG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keSB0ZXh0LWRhcmtcIiBzdHlsZT1cIlwiPlxuICAgICAgeyNpZiB0aXRsZX08aDUgY2xhc3M9XCJjYXJkLXRpdGxlXCIgY2xhc3M6bWItMD0ne3RleHQubGVuZ3RoPT0wfSc+e3RpdGxlfTwvaDU+ey9pZn1cbiAgICAgICAgeyNlYWNoIHRleHQgYXMgbGluZSwgaW5kZXh9XG4gICAgICAgICAgPHAgY2xhc3M9XCJsZWFkXCI+e0BodG1sIGxpbmV9PC9wPlxuICAgICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG5cbjwvQ29udGFpbmVyPlxuIiwiPHNjcmlwdD5cblxuICAvLyBJbXBvcnRzXG4gIGltcG9ydCBDb250YWluZXIgZnJvbSAnLi9Db250YWluZXIuc3ZlbHRlJztcblxuICAvLyBEZWJ1Z1xuICBleHBvcnQgbGV0IHR5cGUgPSAnJztcblxuICAvLyBTZXR1cFxuICBleHBvcnQgbGV0IHRpdGxlID0gJyc7XG4gIGV4cG9ydCBsZXQgYXV0aG9yID0gJyc7XG4gIGV4cG9ydCBsZXQgdGV4dCA9IFtdO1xuXG4gIGV4cG9ydCBsZXQgdmlkZW8gPSAnJztcbiAgZXhwb3J0IGxldCB1cmwgPSAnJztcbiAgZXhwb3J0IGxldCBsYWJlbCA9ICcnOyAvLyBmb3IgYnV0dG9uc1xuXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG5cbjwvc3R5bGU+XG5cblxuXG5cbjxDb250YWluZXIgY29udGV4dD1cImRhbmdlclwiPlxuXG4gIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlciBsZWFkIHNoYWRvd1wiPlxuICAgIHt0aXRsZX1cbiAgPC9kaXY+XG5cbiAgeyNpZiB0ZXh0Lmxlbmd0aH1cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCIgc3R5bGU9XCJcIj5cbiAgICAgIHsjaWYgYXV0aG9yfTxoNSBjbGFzcz1cImNhcmQtdGl0bGVcIj57YXV0aG9yfTwvaDU+ey9pZn1cbiAgICAgIHsjZWFjaCB0ZXh0IGFzIGxpbmUsIGluZGV4fVxuICAgICAgICA8cCBjbGFzcz1cImxlYWRcIj57QGh0bWwgbGluZX08L3A+XG4gICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG4gIHsvaWZ9XG5cbjwvQ29udGFpbmVyPlxuIiwiPHNjcmlwdD5cblxuICAvLyBJbXBvcnRzXG4gIGltcG9ydCBDb250YWluZXIgZnJvbSAnLi9Db250YWluZXIuc3ZlbHRlJztcblxuICAvLyBEZWJ1Z1xuICBleHBvcnQgbGV0IHR5cGUgPSAnJztcblxuICAvLyBTZXR1cFxuICBleHBvcnQgbGV0IHRpdGxlID0gJyc7XG4gIGV4cG9ydCBsZXQgYXV0aG9yID0gJyc7XG4gIGV4cG9ydCBsZXQgdGV4dCA9IFtdO1xuXG4gIGV4cG9ydCBsZXQgdmlkZW8gPSAnJztcbiAgZXhwb3J0IGxldCB1cmwgPSAnJztcbiAgZXhwb3J0IGxldCBsYWJlbCA9ICcnOyAvLyBmb3IgYnV0dG9uc1xuXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG5cbjwvc3R5bGU+XG5cblxuXG5cbjxDb250YWluZXIgY29udGV4dD1cImRhcmtcIj5cblxuICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXIgbGVhZCBzaGFkb3dcIj5cbiAgICB7dGl0bGV9XG4gIDwvZGl2PlxuXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXt2aWRlb31cIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGltZyBjbGFzcz1cImNhcmQtaW1nLWJvdHRvbVwiIHNyYz1cIndhcnJpb3IvaW1hZ2VzL3lvdXR1YmUte3ZpZGVvfS5qcGdcIiBhbHQ9XCJ7dGl0bGV9XCI+PC9hPlxuXG4gIHsjaWYgdGV4dC5sZW5ndGh9XG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiIHN0eWxlPVwiXCI+XG4gICAgICB7I2lmIGF1dGhvcn08aDUgY2xhc3M9XCJjYXJkLXRpdGxlXCI+e2F1dGhvcn08L2g1PnsvaWZ9XG4gICAgICB7I2VhY2ggdGV4dCBhcyBsaW5lLCBpbmRleH1cbiAgICAgICAgPHA+e0BodG1sIGxpbmV9PC9wPlxuICAgICAgey9lYWNofVxuICAgIDwvZGl2PlxuICB7L2lmfVxuXG48L0NvbnRhaW5lcj5cbiIsIjxzY3JpcHQ+XG5cbiAgLy8gSW1wb3J0c1xuICBpbXBvcnQgQ29udGFpbmVyIGZyb20gJy4vQ29udGFpbmVyLnN2ZWx0ZSc7XG5cbiAgLy8gRGVidWdcbiAgZXhwb3J0IGxldCB0eXBlID0gJyc7XG5cbiAgLy8gU2V0dXBcbiAgZXhwb3J0IGxldCB0aXRsZSA9ICcnO1xuICBleHBvcnQgbGV0IGF1dGhvciA9ICcnO1xuICBleHBvcnQgbGV0IHRleHQgPSBbXTtcblxuICBleHBvcnQgbGV0IHZpZGVvID0gJyc7XG4gIGV4cG9ydCBsZXQgdXJsID0gJyc7XG4gIGV4cG9ydCBsZXQgbGFiZWwgPSAnJzsgLy8gZm9yIGJ1dHRvbnNcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblxuXG48L3N0eWxlPlxuXG5cblxuXG48Q29udGFpbmVyIGNvbnRleHQ9XCJpbmZvXCI+XG5cbiAgeyNpZiB0ZXh0Lmxlbmd0aH1cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCIgc3R5bGU9XCJcIj5cblxuICAgIDxibG9ja3F1b3RlIGNsYXNzPVwiYmxvY2txdW90ZSBtYi0wXCI+XG5cbiAgICAgIHsjZWFjaCB0ZXh0IGFzIGxpbmUsIGluZGV4fVxuICAgICAgICA8cD57QGh0bWwgbGluZX08L3A+XG4gICAgICB7L2VhY2h9XG5cbiAgICAgIDxmb290ZXIgY2xhc3M9XCJibG9ja3F1b3RlLWZvb3RlclwiPjxzcGFuIGNsYXNzPVwidGV4dC1saWdodFwiPnthdXRob3J9PC9zcGFuPjwvZm9vdGVyPlxuXG4gICAgPC9ibG9ja3F1b3RlPlxuXG4gICAgIDwvZGl2PlxuICB7L2lmfVxuXG48L0NvbnRhaW5lcj5cbiIsIjxzY3JpcHQ+XG5cbiAgLy8gSW1wb3J0c1xuICBpbXBvcnQgQ29udGFpbmVyIGZyb20gJy4vQ29udGFpbmVyLnN2ZWx0ZSc7XG5cbiAgLy8gRGVidWdcbiAgZXhwb3J0IGxldCB0eXBlID0gJyc7XG5cbiAgLy8gU2V0dXBcbiAgZXhwb3J0IGxldCB0aXRsZSA9ICcnO1xuICBleHBvcnQgbGV0IGF1dGhvciA9ICcnO1xuICBleHBvcnQgbGV0IHRleHQgPSBbXTtcblxuICBleHBvcnQgbGV0IHZpZGVvID0gJyc7XG4gIGV4cG9ydCBsZXQgdXJsID0gJyc7XG4gIGV4cG9ydCBsZXQgbGFiZWwgPSAnJzsgLy8gZm9yIGJ1dHRvbnNcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblxuXG48L3N0eWxlPlxuXG5cblxuXG48Q29udGFpbmVyIGNvbnRleHQ9XCJzdWNjZXNzXCI+XG5cbiAgPGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyIGxlYWQgc2hhZG93XCI+XG4gICAge3RpdGxlfSBieSB7YXV0aG9yfVxuICA8L2Rpdj5cblxuICB7I2lmIHRleHQubGVuZ3RofVxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIiBzdHlsZT1cIlwiPlxuICAgICAgeyNlYWNoIHRleHQgYXMgbGluZSwgaW5kZXh9XG4gICAgICAgIDxwIGNsYXNzPVwibGVhZFwiPntAaHRtbCBsaW5lfTwvcD5cbiAgICAgIHsvZWFjaH1cbiAgICA8L2Rpdj5cbiAgey9pZn1cblxuPC9Db250YWluZXI+XG4iLCI8c2NyaXB0PlxuXG4gIC8vIEltcG9ydHNcbiAgaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL0NvbnRhaW5lci5zdmVsdGUnO1xuXG4gIC8vIERlYnVnXG4gIGV4cG9ydCBsZXQgdHlwZSA9ICcnO1xuXG4gIC8vIFNldHVwXG4gIGV4cG9ydCBsZXQgdGl0bGUgPSAnJztcbiAgZXhwb3J0IGxldCBhdXRob3IgPSAnJztcbiAgZXhwb3J0IGxldCB0ZXh0ID0gW107XG5cbiAgZXhwb3J0IGxldCB2aWRlbyA9ICcnO1xuICBleHBvcnQgbGV0IHVybCA9ICcnO1xuICBleHBvcnQgbGV0IGxhYmVsID0gJyc7IC8vIGZvciBidXR0b25zXG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cblxuPC9zdHlsZT5cblxuXG5cbjxkaXYgc3R5bGU9XCJoZWlnaHQ6IDVyZW07XCI+PC9kaXY+XG5cbjxDb250YWluZXIgY29udGV4dD1cInNlY29uZGFyeVwiPlxuXG4gIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlciBsZWFkIHNoYWRvdyB0ZXh0LWNlbnRlclwiPlxuICAgIHt0aXRsZX1cbiAgPC9kaXY+XG5cbiAgeyNpZiB0ZXh0Lmxlbmd0aH1cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCIgc3R5bGU9XCJcIj5cbiAgICAgIHsjZWFjaCB0ZXh0IGFzIGxpbmUsIGluZGV4fVxuICAgICAgICA8cD57QGh0bWwgbGluZX08L3A+XG4gICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG4gIHsvaWZ9XG5cbjwvQ29udGFpbmVyPlxuIiwiPHNjcmlwdD5cblxuICAvLyBJbXBvcnRzXG4gIGltcG9ydCBDb250YWluZXIgZnJvbSAnLi9Db250YWluZXIuc3ZlbHRlJztcblxuICAvLyBEZWJ1Z1xuICBleHBvcnQgbGV0IHR5cGUgPSAnJztcblxuICAvLyBTZXR1cFxuICBleHBvcnQgbGV0IHRpdGxlID0gJyc7XG4gIGV4cG9ydCBsZXQgYXV0aG9yID0gJyc7XG4gIGV4cG9ydCBsZXQgdGV4dCA9IFtdO1xuXG4gIGV4cG9ydCBsZXQgdmlkZW8gPSAnJztcbiAgZXhwb3J0IGxldCB1cmwgPSAnJztcbiAgZXhwb3J0IGxldCBsYWJlbCA9ICcnOyAvLyBmb3IgYnV0dG9uc1xuXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG5cbjwvc3R5bGU+XG5cblxuXG5cbjxDb250YWluZXIgY29udGV4dD1cInNlY29uZGFyeVwiPlxuXG4gIDxhIGhyZWY9XCJ7dXJsfVwiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBidG4tbGdcIiA+e3RpdGxlfSAmcmFxdW87PC9hPlxuXG48L0NvbnRhaW5lcj5cbiIsIjxzY3JpcHQ+XG5cbmltcG9ydCBJbGx1c3RyYXRpb24gZnJvbSAnYm9vay1ndWkvc3JjL0lsbHVzdHJhdGlvbi5zdmVsdGUnO1xuXG5pbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vYm9vay9JbWFnZUNvbXBvbmVudC5zdmVsdGUnO1xuaW1wb3J0IEJ1c2luZXNzQ29tcG9uZW50IGZyb20gJy4uL2Jvb2svQnVzaW5lc3NDb21wb25lbnQuc3ZlbHRlJztcbmltcG9ydCBUZXh0Q29tcG9uZW50IGZyb20gJy4uL2Jvb2svVGV4dENvbXBvbmVudC5zdmVsdGUnO1xuaW1wb3J0IFlvdXR1YmVDb21wb25lbnQgZnJvbSAnLi4vYm9vay9Zb3V0dWJlQ29tcG9uZW50LnN2ZWx0ZSc7XG5pbXBvcnQgUXVvdGVDb21wb25lbnQgZnJvbSAnLi4vYm9vay9RdW90ZUNvbXBvbmVudC5zdmVsdGUnO1xuaW1wb3J0IFBvZW1Db21wb25lbnQgZnJvbSAnLi4vYm9vay9Qb2VtQ29tcG9uZW50LnN2ZWx0ZSc7XG5pbXBvcnQgU3VidGl0bGVDb21wb25lbnQgZnJvbSAnLi4vYm9vay9TdWJ0aXRsZUNvbXBvbmVudC5zdmVsdGUnO1xuaW1wb3J0IExpbmtDb21wb25lbnQgZnJvbSAnLi4vYm9vay9MaW5rQ29tcG9uZW50LnN2ZWx0ZSc7XG5cbmNvbnN0IGNvbXBvbmVudExvb2t1cCA9IHtcbmltYWdlOiBJbGx1c3RyYXRpb24sXG5idXNpbmVzczogQnVzaW5lc3NDb21wb25lbnQsXG50ZXh0OiBUZXh0Q29tcG9uZW50LFxueW91dHViZTogWW91dHViZUNvbXBvbmVudCxcbnF1b3RlOiBRdW90ZUNvbXBvbmVudCxcbnBvZW06IFBvZW1Db21wb25lbnQsXG5zdWJ0aXRsZTogU3VidGl0bGVDb21wb25lbnQsXG5saW5rOiBMaW5rQ29tcG9uZW50LFxufVxuXG5pbXBvcnQgY2FsY3VsYXRlUGVyY2VudCBmcm9tIFwiY2FsY3VsYXRlLXBlcmNlbnRcIjtcblxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbmltcG9ydCB7IHN0b3JlcyB9IGZyb20gJ0BzYXBwZXIvYXBwJztcbmNvbnN0IHsgcGFnZSB9ID0gc3RvcmVzKCk7XG5cbmxldCBwYWdlUmVhZHkgPSBmYWxzZTtcbmxldCBkYXRhYmFzZSA9IFtdO1xuXG5sZXQgY2hhcHRlciA9ICdpbmRleCc7XG5sZXQgY29udGVudCA9IHttZXRhOnt9LCBkYXRhOltdfTtcbmxldCBwZXJjZW50ID0gMDtcbmxldCBjb250ZW50TmV4dCA9IHttZXRhOnt9LCBkYXRhOltdfTtcbmxldCBjb250ZW50UHJldiA9IHttZXRhOnt9LCBkYXRhOltdfTtcblxuLy8gQ2FsY3VsYXRpb25zXG5sZXQgY3VycmVudEluZGV4ID0gbnVsbDtcblxuLy9ERVZcbmxldCB0eXBlcyA9IG5ldyBTZXQoKTtcbi8vREVWXG5cbmZ1bmN0aW9uIGluZGV4KCl7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgIG1ldGE6e1xuICAgICAgXCJuYW1lXCI6IFwiaW5kZXhcIixcbiAgICAgIFwidGl0bGVcIjogXCJJbmRleFwiXG4gICAgfSxcbiAgICBkYXRhOltcbiAgICB7XG4gICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgXCJ0aXRsZVwiOiBcIlRhYmxlIG9mIENvbnRlbnRzXCIsXG4gICAgIFwidGV4dFwiOiBbXG5cbiAgICAgXVxuICAgIH0sXG4gIF19O1xuXG4gIGRhdGFiYXNlLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgcmVzcG9uc2UuZGF0YVswXS50ZXh0LnB1c2goYDxhIGhyZWY9XCJ3YXJyaW9yP2NoYXB0ZXI9JHtpdGVtLm1ldGEubmFtZX1cIj4ke2l0ZW0ubWV0YS50aXRsZX08L2E+YClcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5vbk1vdW50KGFzeW5jIGZ1bmN0aW9uKCkge1xuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXCJib29rLmpzb25cIik7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcGFnZVJlYWR5ID0gdHJ1ZTtcbiAgICBkYXRhYmFzZSA9IGpzb247XG5cbiAgICBwYWdlLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICBjb250ZW50ID0gZGF0YWJhc2UuZmluZCgoY29udGVudCkgPT4gY29udGVudC5tZXRhLm5hbWUgPT0gdmFsdWUucXVlcnkuY2hhcHRlciApIHx8IGluZGV4KCk7XG4gICAgICBjdXJyZW50SW5kZXggPSBkYXRhYmFzZS5pbmRleE9mKGNvbnRlbnQpO1xuICAgICAgY29uc29sZS5sb2coJ2N1cnJlbnRJbmRleCcsY3VycmVudEluZGV4KTtcblxuICAgICAgbGV0IHByZXZJbmRleCA9IGN1cnJlbnRJbmRleCAtMTtcbiAgICAgIGlmKHByZXZJbmRleDwwKSBwcmV2SW5kZXggPSAoZGF0YWJhc2UubGVuZ3RoLTEpO1xuXG4gICAgICBsZXQgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsxO1xuICAgICAgaWYobmV4dEluZGV4PihkYXRhYmFzZS5sZW5ndGgtMSkpIG5leHRJbmRleCA9IDA7XG5cbiAgICAgIGNvbnRlbnROZXh0ID0gZGF0YWJhc2VbbmV4dEluZGV4XTtcbiAgICAgIGNvbnRlbnRQcmV2ID0gZGF0YWJhc2VbcHJldkluZGV4XTtcblxuICAgICAgY29uc29sZS5sb2coJ3ByZXZJbmRleCcscHJldkluZGV4KTtcbiAgICAgIGNvbnNvbGUubG9nKCduZXh0SW5kZXgnLG5leHRJbmRleCk7XG5cbiAgICAgIHBlcmNlbnQgPSBjYWxjdWxhdGVQZXJjZW50KGN1cnJlbnRJbmRleCsxLCBkYXRhYmFzZS5sZW5ndGgpKjEwMDtcblxuICAgIH0pO1xuXG4gICAgLy9kYXRhYmFzZS5mb3JFYWNoKGNoYXB0ZXIgPT4gY2hhcHRlci5kYXRhLmZvckVhY2goaXRlbT0+dHlwZXMuYWRkKGl0ZW0udHlwZSkpKVxuICAgIC8vIGRhdGFiYXNlLmZvckVhY2goY2hhcHRlciA9PiBjaGFwdGVyLmRhdGEuZm9yRWFjaChpdGVtPT5PYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGl0ZW09PnR5cGVzLmFkZChpdGVtKSkgKSlcbiAgICAvLyBjb25zb2xlLmxvZyhBcnJheS5mcm9tKHR5cGVzKSwgdHlwZXMpO1xuXG59KTtcblxuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkNhdCBQZWE8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGRpdiBjbGFzcz1cImNvbnRhaW5lci1mbHVpZCB0ZXh0LXdhcm5pbmdcIiBzdHlsZT1cInZpc2liaWxpdHk6IGhpZGRlbjtcIiBjbGFzczp2aXNpYmxlPSd7cGFnZVJlYWR5fSc+XG5cbiAgPG5hdiBjbGFzcz1cIm1iLTVcIiBhcmlhLWxhYmVsPVwiYnJlYWRjcnVtYlwiPlxuICAgIDxvbCBjbGFzcz1cImJyZWFkY3J1bWIgYmctZGFyayB0ZXh0LXdoaXRlXCI+XG4gICAgPGxpIGNsYXNzPVwiYnJlYWRjcnVtYi1pdGVtXCI+PGEgaHJlZj1cIndhcnJpb3I/Y2hhcHRlcj1pbmRleFwiPldhcnJpb3I8L2E+PC9saT5cbiAgICA8bGkgY2xhc3M9XCJicmVhZGNydW1iLWl0ZW0gYWN0aXZlXCIgYXJpYS1jdXJyZW50PVwicGFnZVwiPntjb250ZW50Lm1ldGEudGl0bGV9PC9saT5cbiAgICA8L29sPlxuICA8L25hdj5cblxuPC9kaXY+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXItZmx1aWQgdGV4dC13YXJuaW5nIHB5LTVcIiBzdHlsZT1cInZpc2liaWxpdHk6IGhpZGRlbjtcIiBjbGFzczp2aXNpYmxlPSd7cGFnZVJlYWR5fSc+XG5cbnsjZWFjaCBjb250ZW50LmRhdGEgYXMgaXRlbX1cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuXG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMiBjb2wtbGctMyBjb2wteGwtNFwiPlxuICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJjb2wtMTIgY29sLW1kLTggY29sLWxnLTYgY29sLXhsLTQgbWItNVwiPlxuICAgIDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9e2NvbXBvbmVudExvb2t1cFtpdGVtLnR5cGVdfSB7Li4uaXRlbX0vPlxuICAgIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMiBjb2wtbGctMyBjb2wteGwtNFwiPlxuICA8L2Rpdj5cblxuXG4gIDwvZGl2PlxuICB7L2VhY2h9XG5cbjwvZGl2PlxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkIHRleHQtd2FybmluZ1wiIHN0eWxlPVwidmlzaWJpbGl0eTogaGlkZGVuO1wiIGNsYXNzOnZpc2libGU9J3twYWdlUmVhZHl9Jz5cblxuXG5cbiAgPGRpdiBjbGFzcz1cInByb2dyZXNzIGJnLWRhcmtcIj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1zdHJpcGVkIHByb2dyZXNzLWJhci1hbmltYXRlZC14XCIgcm9sZT1cInByb2dyZXNzYmFyXCIgYXJpYS12YWx1ZW5vdz1cIntwZXJjZW50fVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6IHtwZXJjZW50fSVcIj48L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPG5hdiBhcmlhLWxhYmVsPVwiUGFnZSBOYXZpZ2F0aW9uXCI+XG5cbiAgICA8cCBjbGFzcz1cInB5LTNcIj5cbiAgICAgIDxhIGhyZWY9XCJ3YXJyaW9yP2NoYXB0ZXI9e2NvbnRlbnROZXh0Lm1ldGEubmFtZX1cIiBjbGFzcz1cImJ0biBidG4tbGcgYnRuLXByaW1hcnkgYnRuLWJsb2NrXCI+e2NvbnRlbnROZXh0Lm1ldGEudGl0bGV9IDxpbWcgc3R5bGU9XCJ3aWR0aDogMXJlbTsgaGVpZ2h0OjFyZW07XCIgc3JjPVwid2Fycmlvci9pbWFnZXMvYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5zdmdcIiBhbHQ9XCJ7Y29udGVudE5leHQubWV0YS50aXRsZX1cIj48L2E+XG4gICAgPC9wPlxuXG4gICAgPHAgY2xhc3M9XCJweS0zXCI+XG4gICAgICA8YSBocmVmPVwid2Fycmlvcj9jaGFwdGVyPXtjb250ZW50UHJldi5tZXRhLm5hbWV9XCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeVwiPjxpbWcgc3R5bGU9XCJ3aWR0aDogMXJlbTsgaGVpZ2h0OjFyZW07XCIgc3JjPVwid2Fycmlvci9pbWFnZXMvYXJyb3ctYWx0LWNpcmNsZS1sZWZ0LnN2Z1wiIGFsdD1cIntjb250ZW50UHJldi5tZXRhLnRpdGxlfVwiPiZuYnNwO3tjb250ZW50UHJldi5tZXRhLnRpdGxlfTwvYT5cbiAgICAgIDxhIGhyZWY9XCJ3YXJyaW9yP2NoYXB0ZXI9aW5kZXhcIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCI+PGltZyBhbHQ9XCJJbmRleFwiIHN0eWxlPVwid2lkdGg6IDFyZW07IGhlaWdodDoxcmVtO1wiIHNyYz1cIndhcnJpb3IvaW1hZ2VzL2xpc3QtYWx0LnN2Z1wiPjwvYT5cbiAgICA8L3A+XG5cbiAgIDwvbmF2PlxuXG48L2Rpdj5cbiJdLCJuYW1lcyI6WyJjbGVhbiIsInN0b3JlcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVMsS0FBSyxDQUFDLEdBQUcsRUFBRTtBQUNwQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDO0FBQ2xCLENBQUMsSUFBSSxHQUFHLEVBQUU7QUFDVixFQUFFLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO0FBQy9CLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtBQUNuQixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNuQyxLQUFLLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN4QyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7QUFDMUIsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2YsTUFBTTtBQUNOLEtBQUs7QUFDTCxJQUFJLE1BQU07QUFDVixJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsRUFBRTtBQUNuQixLQUFLLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNuQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElB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
