.regular-checkbox.svelte-1j43cqu{-webkit-appearance:none;background-color:darkgray;border:1px solid silver;line-height:14px;width:14px;height:14px;padding:2px;margin:0px;border-radius:0px;display:inline-block;position:relative}.regular-checkbox.sequence.svelte-1j43cqu{border-color:salmon}.regular-checkbox.odd.svelte-1j43cqu{background:grey}.regular-checkbox.divider.svelte-1j43cqu{margin-right:1px}.regular-checkbox.svelte-1j43cqu:checked{background:steelblue}
.selectable.svelte-1pivqqc:hover{border:1px solid orange;border-radius:4px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMDI1NzU5NTcuY3NzIiwic291cmNlcyI6WyIuLi8uLi8uLi9EcnVtTGluZS5zdmVsdGUiLCIuLi8uLi8uLi9CZWF0U2VxdWVuY2VyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG5cbi8vIFByZS1jb25maWd1cmUgdGhlIEdVSVxuZXhwb3J0IGxldCBwYXJ0cyA9IDQ7XG5leHBvcnQgbGV0IGJlYXRzID0gNDtcbmV4cG9ydCBsZXQgZGF0YSA9IFtdO1xuXG4vLyBEeW5hbWljIGRhdGEgdGhhdCBpcyBzZW50IGZyb20gTWFzdGVyIENPbnRyb2wgUHJvZ3JhbVxuZXhwb3J0IGxldCBzZXF1ZW5jZSA9IDA7XG5cbm9uTW91bnQoYXN5bmMgKCkgPT4ge1xuXG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblxuLnJlZ3VsYXItY2hlY2tib3gge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmF5O1xuICBib3JkZXI6IDFweCBzb2xpZCBzaWx2ZXI7XG5cbiAgbGluZS1oZWlnaHQ6MTRweDtcbiAgd2lkdGg6MTRweDtcbiAgaGVpZ2h0OjE0cHg7XG5cbiAgcGFkZGluZzogMnB4O1xuICBtYXJnaW46MHB4O1xuXG5cbiAgYm9yZGVyLXJhZGl1czogMHB4O1xuXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4ucmVndWxhci1jaGVja2JveC5zZXF1ZW5jZXtcbiAgYm9yZGVyLWNvbG9yOiBzYWxtb247XG5cbn1cblxuLnJlZ3VsYXItY2hlY2tib3gub2Rke1xuICBiYWNrZ3JvdW5kOmdyZXk7XG59XG4ucmVndWxhci1jaGVja2JveC5kaXZpZGVye1xuICBtYXJnaW4tcmlnaHQ6IDFweDtcbn1cbi5yZWd1bGFyLWNoZWNrYm94OmNoZWNrZWR7XG4gIGJhY2tncm91bmQ6c3RlZWxibHVlO1xufVxuXG48L3N0eWxlPlxuXG57I2VhY2ggZGF0YSBhcyBpdGVtLCBpbmRleH1cbiAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJyZWd1bGFyLWNoZWNrYm94XCIgYmluZDpjaGVja2VkPXtpdGVtLmVuYWJsZWR9IGNsYXNzOm9kZD0neyghISgoaXRlbS5iZWF0KzEpICUgMikpfScgY2xhc3M6ZGl2aWRlcj0neyEoISEoKGl0ZW0ucGFydCsxKSAlIHBhcnRzKSl9JyBjbGFzczpzZXF1ZW5jZT0ne2luZGV4PT09c2VxdWVuY2V9Jz5cbnsvZWFjaH1cbjwhLS0gXG48cHJlPjxjb2RlPlxuXG57SlNPTi5zdHJpbmdpZnkoZGF0YSxudWxsLCcgICcpfVxuXG48L2NvZGU+PC9wcmU+IC0tPlxuIiwiPHNjcmlwdD5cblxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG5pbXBvcnQgIFRvbmUgZnJvbSBcInRvbmVcIjtcbmltcG9ydCBvY3RpY29ucyBmcm9tICdvY3RpY29ucyc7XG5pbXBvcnQgRHJ1bUxpbmUgZnJvbSAnLi4vY29udHJvbHMvRHJ1bUxpbmUuc3ZlbHRlJztcblxuaW1wb3J0IHNhbXBsZXIgZnJvbSAnLi4vZGV2aWNlcy9zYW1wbGVyLmpzJztcblxubGV0IGRhdGEgPSBbXG4gIHtcbiAgICBsYWJlbDpcIkRydW1cIixcbiAgICBvY3RhdmU6IDEsXG4gICAgbm90ZTpcIkFcIixcbiAgICBkYXRhOltdLFxuICB9LFxuICB7XG4gICAgbGFiZWw6XCJEcnVtXCIsXG4gICAgb2N0YXZlOiAyLFxuICAgIG5vdGU6XCJCXCIsXG4gICAgZGF0YTpbXSxcbiAgfSxcbiAge1xuICAgIGxhYmVsOlwiRHJ1bVwiLFxuICAgIG9jdGF2ZTogMyxcbiAgICBub3RlOlwiQ1wiLFxuICAgIGRhdGE6W10sXG4gIH0sXG4gIHtcbiAgICBsYWJlbDpcIkRydW1cIixcbiAgICBvY3RhdmU6IDQsXG4gICAgbm90ZTpcIkRcIixcbiAgICBkYXRhOltdLFxuICB9LFxuICB7XG4gICAgbGFiZWw6XCJEcnVtXCIsXG4gICAgb2N0YXZlOiA1LFxuICAgIG5vdGU6XCJFXCIsXG4gICAgZGF0YTpbXSxcbiAgfSxcbiAge1xuICAgIGxhYmVsOlwiRHJ1bVwiLFxuICAgIG9jdGF2ZTogNixcbiAgICBub3RlOlwiRlwiLFxuICAgIGRhdGE6W10sXG4gIH0sXG5dO1xuXG4kOiBwYXJ0cyA9IDQ7XG4kOiBiZWF0cyA9IDg7XG5cbiQ6IHNlcXVlbmNlID0gNDtcblxub25Nb3VudChhc3luYyAoKSA9PiB7XG5cbiAgbGV0IGluc3RydW1lbnQgPSBhd2FpdCBzYW1wbGVyKCk7XG5cbiAgdmFyIHN5bnRoID0gbmV3IFRvbmUuU3ludGgoKS50b01hc3RlcigpXG5cbiAgLy8gZm9yKGxldCBpdGVtIG9mIGRhdGEgKXsgfSAvLyBmb3Igb2YgbWFpbiBkYXRhXG4gIGRhdGEgPSBkYXRhLm1hcChpdGVtPT57XG4gICAgLy8gcG9wdWxhdGUgZGF0YVxuICAgIGZvcihsZXQgYmVhdCA9IDA7IGJlYXQgPCBiZWF0czsgYmVhdCsrICl7XG4gICAgICBmb3IobGV0IHBhcnQgPSAwOyBwYXJ0IDwgcGFydHM7IHBhcnQrKyApe1xuICAgICAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEuY29uY2F0KHsgYmVhdCxwYXJ0LGVuYWJsZWQ6ZmFsc2UgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xuICB9KTtcblxuICBzZXRJbnRlcnZhbCgoKT0+e1xuICAgIHNlcXVlbmNlKytcbiAgICBpZihzZXF1ZW5jZSA9PSBwYXJ0cypiZWF0cyl7XG4gICAgICBzZXF1ZW5jZSA9IDA7XG4gICAgfVxuICAgIGZvcihsZXQgaXRlbSBvZiBkYXRhICl7XG4gICAgICBpZihpdGVtLmRhdGFbc2VxdWVuY2VdLmVuYWJsZWQpe1xuICAgICAgICBpbnN0cnVtZW50LnRyaWdnZXJBdHRhY2tSZWxlYXNlKGl0ZW0ubm90ZStpdGVtLm9jdGF2ZSwgJzJuJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCgxMDAwKjYwKS8oMTYwKnBhcnRzKSk7XG5cbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG4gIC5zZWxlY3RhYmxlOmhvdmVyIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBvcmFuZ2U7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICB9XG5cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJjYXJkIHRleHQtd2hpdGUgYmctZGFyayBzaGFkb3dcIj5cblxuICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXJcIj5cbiAgICBMT0ZJIEJlYXQgU2VxdWVuY2VyICZtaWRkb3Q7IEJFVEEgUFJFVklFV1xuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cbiAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbCBzbWFsbCB0ZXh0LW11dGVkXCI+XG4gICAgICAgIDwhLS0gPHNtYWxsPlNvcnJ5IHRoZSB0b29sIGRvZXMgbm90IG1ha2UgYW55IHNvdW5kcywgdGhpcyBpcyBhIHRlc3Qgb2YgdGhlIFVJLCB3aGljaCBpcyBhIHN1Y2Nlc3MsIGl0IGlzIGp1c3Qgc3R5bGVkIGNoZWNrYm94ZXMuXG4gICAgICAgIFlvdSBjYW4gY2xpY2sgb25lIG9mIHRoZSBib3hlcyB0byBtYXJrIHdoZXJlIGEgc291bmQgaXMgdG8gZmlyZS48L3NtYWxsPiAtLT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNCBzbWFsbCB0ZXh0LW11dGVkXCI+XG4gICAgICAgIDxzbWFsbD5JbnN0cnVtZW50PC9zbWFsbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC04IHAtMCBzbWFsbCB0ZXh0LW11dGVkXCI+XG4gICAgICAgIDxzbWFsbD5TZXF1ZW5jZTwvc21hbGw+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuXG5cbiAgICB7I2VhY2ggZGF0YSBhcyBpdGVtLCBpbmRleH1cblxuICAgIDxkaXYgY2xhc3M9XCJyb3cgc2VsZWN0YWJsZVwiPlxuICAgICA8ZGl2PlxuICAgICA8IS0tIDxzbWFsbD57aXRlbS5ub3RlK2l0ZW0ub2N0YXZlfTwvc21hbGw+IC0tPlxuICAgICA8ZGl2IGNsYXNzPVwiY29sIHAtMFwiPlxuXG4gICAgICAgPHNlbGVjdCBjbGFzcz1cImQtaW5saW5lLWJsb2NrIGZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc21cIiBiaW5kOnZhbHVlPXtpdGVtLm5vdGV9IGlkPVwiZXhhbXBsZUZvcm1Db250cm9sU2VsZWN0MVwiIHN0eWxlPVwiaGVpZ2h0OiAyMHB4OyBsaW5lLWhlaWdodDogMjBweDsgZm9udC1zaXplOiAxMXB4OyBwYWRkaW5nOjBweDsgd2lkdGg6MnJlbTtcIj5cbiAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJBXCI+QTwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkJcIj5CPC9vcHRpb24+XG4gICAgICAgICA8b3B0aW9uIHZhbHVlPVwiQ1wiPkM8L29wdGlvbj5cbiAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJEXCI+RDwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkVcIj5FPC9vcHRpb24+XG4gICAgICAgICA8b3B0aW9uIHZhbHVlPVwiRlwiPkY8L29wdGlvbj5cbiAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJHXCI+Rzwvb3B0aW9uPlxuICAgICAgIDwvc2VsZWN0PlxuXG4gICAgICAgPHNlbGVjdCBjbGFzcz1cImQtaW5saW5lLWJsb2NrIGZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc21cIiBiaW5kOnZhbHVlPXtpdGVtLm9jdGF2ZX0gaWQ9XCJleGFtcGxlRm9ybUNvbnRyb2xTZWxlY3QxXCIgc3R5bGU9XCJoZWlnaHQ6IDIwcHg7IGxpbmUtaGVpZ2h0OiAyMHB4OyBmb250LXNpemU6IDExcHg7IHBhZGRpbmc6MHB4OyB3aWR0aDoycmVtO1wiPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT17MX0+MTwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT17Mn0+Mjwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT17M30+Mzwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT17NH0+NDwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT17NX0+NTwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT17Nn0+Njwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT17N30+Nzwvb3B0aW9uPlxuICAgICAgIDwvc2VsZWN0PlxuXG4gICAgIDwvZGl2PlxuXG4gICAgICA8RHJ1bUxpbmUgZGF0YT17aXRlbS5kYXRhfSB7cGFydHN9IHtiZWF0c30ge3NlcXVlbmNlfS8+XG4gICAgIDwvZGl2PlxuICAgPC9kaXY+XG5cbiAgICB7L2VhY2h9XG5cblxuXG4gICAgPCEtLSA8cHJlPjxjb2RlPlxuXG4gICAge0pTT04uc3RyaW5naWZ5KGRhdGEsbnVsbCwnICAnKX1cblxuICAgIDwvY29kZT48L3ByZT5cbiAtLT5cblxuICA8L2Rpdj5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1CQSxpQkFBaUIsZUFBQyxDQUFDLEFBQ2pCLGtCQUFrQixDQUFFLElBQUksQ0FDeEIsZ0JBQWdCLENBQUUsUUFBUSxDQUMxQixNQUFNLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBRXhCLFlBQVksSUFBSSxDQUNoQixNQUFNLElBQUksQ0FDVixPQUFPLElBQUksQ0FFWCxPQUFPLENBQUUsR0FBRyxDQUNaLE9BQU8sR0FBRyxDQUdWLGFBQWEsQ0FBRSxHQUFHLENBRWxCLE9BQU8sQ0FBRSxZQUFZLENBQ3JCLFFBQVEsQ0FBRSxRQUFRLEFBQ3BCLENBQUMsQUFFRCxpQkFBaUIsd0JBQVMsQ0FBQyxBQUN6QixZQUFZLENBQUUsTUFBTSxBQUV0QixDQUFDLEFBRUQsaUJBQWlCLG1CQUFJLENBQUMsQUFDcEIsV0FBVyxJQUFJLEFBQ2pCLENBQUMsQUFDRCxpQkFBaUIsdUJBQVEsQ0FBQyxBQUN4QixZQUFZLENBQUUsR0FBRyxBQUNuQixDQUFDLEFBQ0QsZ0NBQWlCLFFBQVEsQ0FBQyxBQUN4QixXQUFXLFNBQVMsQUFDdEIsQ0FBQztBQ3FDQywwQkFBVyxNQUFNLEFBQUMsQ0FBQyxBQUNqQixNQUFNLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ3hCLGFBQWEsQ0FBRSxHQUFHLEFBQ3BCLENBQUMifQ== */