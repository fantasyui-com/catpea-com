import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, D as empty, m as insert_dev, J as group_outros, z as transition_out, K as check_outros, y as transition_in, f as detach_dev, q as create_slot, e as element, t as text, c as claim_element, b as children, h as claim_text, j as attr_dev, k as add_location, Q as set_style, o as append_dev, w as get_slot_context, x as get_slot_changes, a as space, g as claim_space, p as listen_dev, r as create_component, u as claim_component, v as mount_component, A as destroy_component, l as toggle_class, C as set_data_dev, P as destroy_each, R as onMount, H as get_spread_update, I as get_spread_object, E as query_selector_all, F as assign } from './index.c2c7d28a.js';
import { a as stores$1 } from './app.7d50ca06.js';
import { o as octicons, d as calculatePercent } from './index.a9aa74f7.js';

/* src/book/Container.svelte generated by Svelte v3.17.3 */
const file = "src/book/Container.svelte";
const get_preferences_footer_slot_changes = dirty => ({});
const get_preferences_footer_slot_context = ctx => ({});
const get_preferences_slot_changes = dirty => ({});
const get_preferences_slot_context = ctx => ({});

// (43:20) 
function create_if_block_1(ctx) {
	let div1;
	let div0;
	let p;
	let t;
	let div1_class_value;
	let current;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div1 = element("div");

			if (!default_slot) {
				div0 = element("div");
				p = element("p");
				t = text("Application Empty");
			}

			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			if (!default_slot) {
				div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
				var div0_nodes = children(div0);
				p = claim_element(div0_nodes, "P", { class: true });
				var p_nodes = children(p);
				t = claim_text(p_nodes, "Application Empty");
				p_nodes.forEach(detach_dev);
				div0_nodes.forEach(detach_dev);
			}

			if (default_slot) default_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (!default_slot) {
				attr_dev(p, "class", "card-text");
				add_location(p, file, 53, 10, 1202);
				attr_dev(div0, "class", "card-body p-2");
				set_style(div0, "box-shadow", "inset 0 0 10px #000000");
				add_location(div0, file, 52, 6, 1120);
			}

			attr_dev(div1, "class", div1_class_value = "card text-white bg-" + /*context*/ ctx[0] + " shadow");
			add_location(div1, file, 44, 2, 888);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);

			if (!default_slot) {
				append_dev(div1, div0);
				append_dev(div0, p);
				append_dev(p, t);
			}

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[2], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null));
			}

			if (!current || dirty & /*context*/ 1 && div1_class_value !== (div1_class_value = "card text-white bg-" + /*context*/ ctx[0] + " shadow")) {
				attr_dev(div1, "class", div1_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(43:20) ",
		ctx
	});

	return block;
}

// (16:0) {#if view == 0}
function create_if_block(ctx) {
	let div3;
	let div0;
	let t0;
	let button;
	let raw_value = octicons.checklist.toSVG({ "class": "fill-white" }) + "";
	let t1;
	let div1;
	let p;
	let t2;
	let t3;
	let div2;
	let current;
	let dispose;
	const preferences_slot_template = /*$$slots*/ ctx[3].preferences;
	const preferences_slot = create_slot(preferences_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_slot_context);
	const preferences_footer_slot_template = /*$$slots*/ ctx[3]["preferences-footer"];
	const preferences_footer_slot = create_slot(preferences_footer_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_footer_slot_context);

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = text("Preferences\n      ");
			button = element("button");
			t1 = space();
			div1 = element("div");

			if (!preferences_slot) {
				p = element("p");
				t2 = text("Preferences Empty");
			}

			if (preferences_slot) preferences_slot.c();
			t3 = space();
			div2 = element("div");
			if (preferences_footer_slot) preferences_footer_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Preferences\n      ");
			button = claim_element(div0_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			button_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);

			if (!preferences_slot) {
				p = claim_element(div1_nodes, "P", { class: true });
				var p_nodes = children(p);
				t2 = claim_text(p_nodes, "Preferences Empty");
				p_nodes.forEach(detach_dev);
			}

			if (preferences_slot) preferences_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (preferences_footer_slot) preferences_footer_slot.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "btn btn-text btn-sm border border-secondary float-right");
			add_location(button, file, 21, 6, 363);
			attr_dev(div0, "class", "card-header lead");
			add_location(div0, file, 19, 4, 308);

			if (!preferences_slot) {
				attr_dev(p, "class", "card-text");
				add_location(p, file, 26, 6, 656);
			}

			attr_dev(div1, "class", "card-body p-2");
			set_style(div1, "max-height", "25rem");
			set_style(div1, "overflow-y", "auto");
			add_location(div1, file, 23, 4, 546);
			attr_dev(div2, "class", "card-footer text-muted small");
			add_location(div2, file, 33, 4, 744);
			attr_dev(div3, "class", "card text-white bg-dark shadow");
			add_location(div3, file, 18, 2, 259);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, t0);
			append_dev(div0, button);
			button.innerHTML = raw_value;
			append_dev(div3, t1);
			append_dev(div3, div1);

			if (!preferences_slot) {
				append_dev(div1, p);
				append_dev(p, t2);
			}

			if (preferences_slot) {
				preferences_slot.m(div1, null);
			}

			append_dev(div3, t3);
			append_dev(div3, div2);

			if (preferences_footer_slot) {
				preferences_footer_slot.m(div2, null);
			}

			current = true;
			dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (preferences_slot && preferences_slot.p && dirty & /*$$scope*/ 4) {
				preferences_slot.p(get_slot_context(preferences_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_slot_context), get_slot_changes(preferences_slot_template, /*$$scope*/ ctx[2], dirty, get_preferences_slot_changes));
			}

			if (preferences_footer_slot && preferences_footer_slot.p && dirty & /*$$scope*/ 4) {
				preferences_footer_slot.p(get_slot_context(preferences_footer_slot_template, ctx, /*$$scope*/ ctx[2], get_preferences_footer_slot_context), get_slot_changes(preferences_footer_slot_template, /*$$scope*/ ctx[2], dirty, get_preferences_footer_slot_changes));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(preferences_slot, local);
			transition_in(preferences_footer_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(preferences_slot, local);
			transition_out(preferences_footer_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (preferences_slot) preferences_slot.d(detaching);
			if (preferences_footer_slot) preferences_footer_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(16:0) {#if view == 0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*view*/ ctx[1] == 0) return 0;
		if (/*view*/ ctx[1] == 1) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { context = "secondary" } = $$props;

	/*
  0 is Preference View
  1 is Application View
*/
	let view = 1; // controlled via UI icons

	const writable_props = ["context"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Container> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	const click_handler = e => $$invalidate(1, view = 1);

	$$self.$set = $$props => {
		if ("context" in $$props) $$invalidate(0, context = $$props.context);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { context, view };
	};

	$$self.$inject_state = $$props => {
		if ("context" in $$props) $$invalidate(0, context = $$props.context);
		if ("view" in $$props) $$invalidate(1, view = $$props.view);
	};

	return [context, view, $$scope, $$slots, click_handler];
}

class Container extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { context: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Container",
			options,
			id: create_fragment.name
		});
	}

	get context() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set context(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/ImageComponent.svelte generated by Svelte v3.17.3 */
const file$1 = "src/book/ImageComponent.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (37:6) {#if title}
function create_if_block$1(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "card-title");
			toggle_class(h5, "mb-0", /*text*/ ctx[2].length == 0);
			add_location(h5, file$1, 36, 17, 511);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);

			if (dirty & /*text*/ 4) {
				toggle_class(h5, "mb-0", /*text*/ ctx[2].length == 0);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(37:6) {#if title}",
		ctx
	});

	return block;
}

// (38:8) {#each text as line, index}
function create_each_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead");
			add_location(p, file$1, 38, 10, 628);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = /*text*/ ctx[2];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4) p.innerHTML = /*text*/ ctx[2];		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(38:8) {#each text as line, index}",
		ctx
	});

	return block;
}

// (32:0) <Container context="danger">
function create_default_slot(ctx) {
	let img;
	let img_src_value;
	let t0;
	let div;
	let t1;
	let if_block = /*title*/ ctx[1] && create_if_block$1(ctx);
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			img = element("img");
			t0 = space();
			div = element("div");
			if (if_block) if_block.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, class: true, alt: true });
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t1 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*url*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "card-img-top");
			attr_dev(img, "alt", /*title*/ ctx[1]);
			add_location(img, file$1, 33, 2, 402);
			attr_dev(div, "class", "card-body");
			add_location(div, file$1, 35, 4, 461);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*url*/ 1 && img.src !== (img_src_value = /*url*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*title*/ 2) {
				attr_dev(img, "alt", /*title*/ ctx[1]);
			}

			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(div, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(32:0) <Container context=\\\"danger\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "danger",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, title, url*/ 135) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { url = "" } = $$props;
	let { title = "" } = $$props;
	let { text = [] } = $$props;
	const writable_props = ["type", "url", "title", "text"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ImageComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
	};

	$$self.$capture_state = () => {
		return { type, url, title, text };
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
	};

	return [url, title, text, type];
}

class ImageComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { type: 3, url: 0, title: 1, text: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ImageComponent",
			options,
			id: create_fragment$1.name
		});
	}

	get type() {
		throw new Error("<ImageComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<ImageComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<ImageComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<ImageComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<ImageComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<ImageComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<ImageComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<ImageComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/BusinessComponent.svelte generated by Svelte v3.17.3 */
const file$2 = "src/book/BusinessComponent.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (37:6) {#if title}
function create_if_block$2(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "card-title");
			toggle_class(h5, "mb-0", /*text*/ ctx[2].length == 0);
			add_location(h5, file$2, 36, 17, 522);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);

			if (dirty & /*text*/ 4) {
				toggle_class(h5, "mb-0", /*text*/ ctx[2].length == 0);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(37:6) {#if title}",
		ctx
	});

	return block;
}

// (38:8) {#each text as line, index}
function create_each_block$1(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead");
			add_location(p, file$2, 38, 10, 639);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = /*text*/ ctx[2];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4) p.innerHTML = /*text*/ ctx[2];		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(38:8) {#each text as line, index}",
		ctx
	});

	return block;
}

// (32:0) <Container context="warning">
function create_default_slot$1(ctx) {
	let img;
	let img_src_value;
	let t0;
	let div;
	let t1;
	let if_block = /*title*/ ctx[1] && create_if_block$2(ctx);
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			img = element("img");
			t0 = space();
			div = element("div");
			if (if_block) if_block.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, class: true, alt: true });
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t1 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*url*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "card-img-top");
			attr_dev(img, "alt", /*title*/ ctx[1]);
			add_location(img, file$2, 33, 2, 403);
			attr_dev(div, "class", "card-body text-dark");
			add_location(div, file$2, 35, 4, 462);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*url*/ 1 && img.src !== (img_src_value = /*url*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*title*/ 2) {
				attr_dev(img, "alt", /*title*/ ctx[1]);
			}

			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(div, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(32:0) <Container context=\\\"warning\\\">",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "warning",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, title, url*/ 135) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { url = "" } = $$props;
	let { title = "" } = $$props;
	let { text = [] } = $$props;
	const writable_props = ["type", "url", "title", "text"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BusinessComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
	};

	$$self.$capture_state = () => {
		return { type, url, title, text };
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
	};

	return [url, title, text, type];
}

class BusinessComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { type: 3, url: 0, title: 1, text: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BusinessComponent",
			options,
			id: create_fragment$2.name
		});
	}

	get type() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<BusinessComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<BusinessComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/TextComponent.svelte generated by Svelte v3.17.3 */
const file$3 = "src/book/TextComponent.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (34:2) {#if text.length}
function create_if_block$3(ctx) {
	let div;
	let t;
	let if_block = /*author*/ ctx[1] && create_if_block_1$1(ctx);
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$3, 34, 4, 432);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (/*author*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(34:2) {#if text.length}",
		ctx
	});

	return block;
}

// (36:6) {#if author}
function create_if_block_1$1(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*author*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*author*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "card-title");
			add_location(h5, file$3, 35, 18, 483);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*author*/ 2) set_data_dev(t, /*author*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(36:6) {#if author}",
		ctx
	});

	return block;
}

// (37:6) {#each text as line, index}
function create_each_block$2(ctx) {
	let p;
	let raw_value = /*line*/ ctx[7] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead");
			add_location(p, file$3, 37, 8, 567);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4 && raw_value !== (raw_value = /*line*/ ctx[7] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(37:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="danger">
function create_default_slot$2(ctx) {
	let div;
	let t0;
	let t1;
	let if_block_anchor;
	let if_block = /*text*/ ctx[2].length && create_if_block$3(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow");
			add_location(div, file$3, 29, 2, 348);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (/*text*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"danger\\\">",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "danger",
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, author, title*/ 1031) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TextComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, author, text, type, video, url, label];
}

class TextComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			type: 3,
			title: 0,
			author: 1,
			text: 2,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TextComponent",
			options,
			id: create_fragment$3.name
		});
	}

	get type() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<TextComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<TextComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/YoutubeComponent.svelte generated by Svelte v3.17.3 */
const file$4 = "src/book/YoutubeComponent.svelte";

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (36:2) {#if text.length}
function create_if_block$4(ctx) {
	let div;
	let t;
	let if_block = /*author*/ ctx[1] && create_if_block_1$2(ctx);
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$4, 36, 4, 572);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (/*author*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$2(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(36:2) {#if text.length}",
		ctx
	});

	return block;
}

// (38:6) {#if author}
function create_if_block_1$2(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*author*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*author*/ ctx[1]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "card-title");
			add_location(h5, file$4, 37, 18, 623);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*author*/ 2) set_data_dev(t, /*author*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(38:6) {#if author}",
		ctx
	});

	return block;
}

// (39:6) {#each text as line, index}
function create_each_block$3(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$4, 39, 8, 707);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = /*text*/ ctx[2];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4) p.innerHTML = /*text*/ ctx[2];		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(39:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="dark">
function create_default_slot$3(ctx) {
	let div;
	let t0;
	let t1;
	let a;
	let img;
	let img_src_value;
	let a_href_value;
	let t2;
	let if_block_anchor;
	let if_block = /*text*/ ctx[2].length && create_if_block$4(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			a = element("a");
			img = element("img");
			t2 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { class: true, src: true, alt: true });
			a_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow");
			add_location(div, file$4, 29, 2, 346);
			attr_dev(img, "class", "card-img-bottom");
			if (img.src !== (img_src_value = "warrior/images/youtube-" + /*video*/ ctx[3] + ".jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*title*/ ctx[0]);
			add_location(img, file$4, 33, 52, 458);
			attr_dev(a, "href", a_href_value = "https://www.youtube.com/watch?v=" + /*video*/ ctx[3]);
			add_location(a, file$4, 33, 2, 408);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, img);
			insert_dev(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (dirty & /*video*/ 8 && img.src !== (img_src_value = "warrior/images/youtube-" + /*video*/ ctx[3] + ".jpg")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*title*/ 1) {
				attr_dev(img, "alt", /*title*/ ctx[0]);
			}

			if (dirty & /*video*/ 8 && a_href_value !== (a_href_value = "https://www.youtube.com/watch?v=" + /*video*/ ctx[3])) {
				attr_dev(a, "href", a_href_value);
			}

			if (/*text*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"dark\\\">",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "dark",
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, author, video, title*/ 1039) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<YoutubeComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(4, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(3, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(4, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(3, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, author, text, video, type, url, label];
}

class YoutubeComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			type: 4,
			title: 0,
			author: 1,
			text: 2,
			video: 3,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "YoutubeComponent",
			options,
			id: create_fragment$4.name
		});
	}

	get type() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<YoutubeComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<YoutubeComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/QuoteComponent.svelte generated by Svelte v3.17.3 */
const file$5 = "src/book/QuoteComponent.svelte";

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (30:2) {#if text.length}
function create_if_block$5(ctx) {
	let div;
	let blockquote;
	let t0;
	let footer;
	let span;
	let t1;
	let each_value = /*text*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			blockquote = element("blockquote");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			footer = element("footer");
			span = element("span");
			t1 = text(/*author*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			blockquote = claim_element(div_nodes, "BLOCKQUOTE", { class: true });
			var blockquote_nodes = children(blockquote);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(blockquote_nodes);
			}

			t0 = claim_space(blockquote_nodes);
			footer = claim_element(blockquote_nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			span = claim_element(footer_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, /*author*/ ctx[0]);
			span_nodes.forEach(detach_dev);
			footer_nodes.forEach(detach_dev);
			blockquote_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "text-light");
			add_location(span, file$5, 38, 40, 561);
			attr_dev(footer, "class", "blockquote-footer");
			add_location(footer, file$5, 38, 6, 527);
			attr_dev(blockquote, "class", "blockquote mb-0");
			add_location(blockquote, file$5, 32, 4, 406);
			attr_dev(div, "class", "card-body");
			add_location(div, file$5, 30, 4, 368);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, blockquote);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(blockquote, null);
			}

			append_dev(blockquote, t0);
			append_dev(blockquote, footer);
			append_dev(footer, span);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2) {
				each_value = /*text*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(blockquote, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*author*/ 1) set_data_dev(t1, /*author*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(30:2) {#if text.length}",
		ctx
	});

	return block;
}

// (35:6) {#each text as line, index}
function create_each_block$4(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$5, 35, 8, 486);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = /*text*/ ctx[1];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2) p.innerHTML = /*text*/ ctx[1];		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(35:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="info">
function create_default_slot$4(ctx) {
	let if_block_anchor;
	let if_block = /*text*/ ctx[1].length && create_if_block$5(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*text*/ ctx[1].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"info\\\">",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "info",
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, author, text*/ 1027) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<QuoteComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("author" in $$props) $$invalidate(0, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("author" in $$props) $$invalidate(0, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [author, text, type, title, video, url, label];
}

class QuoteComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			type: 2,
			title: 3,
			author: 0,
			text: 1,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "QuoteComponent",
			options,
			id: create_fragment$5.name
		});
	}

	get type() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<QuoteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<QuoteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/PoemComponent.svelte generated by Svelte v3.17.3 */
const file$6 = "src/book/PoemComponent.svelte";

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (34:2) {#if text.length}
function create_if_block$6(ctx) {
	let div;
	let each_value = /*text*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$6, 34, 4, 445);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4) {
				each_value = /*text*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(34:2) {#if text.length}",
		ctx
	});

	return block;
}

// (36:6) {#each text as line, index}
function create_each_block$5(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead");
			add_location(p, file$6, 36, 8, 520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = /*text*/ ctx[2];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4) p.innerHTML = /*text*/ ctx[2];		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$5.name,
		type: "each",
		source: "(36:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (28:0) <Container context="success">
function create_default_slot$5(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let if_block_anchor;
	let if_block = /*text*/ ctx[2].length && create_if_block$6(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = text(" by ");
			t2 = text(/*author*/ ctx[1]);
			t3 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			t1 = claim_text(div_nodes, " by ");
			t2 = claim_text(div_nodes, /*author*/ ctx[1]);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow");
			add_location(div, file$6, 29, 2, 349);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
			insert_dev(target, t3, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);
			if (dirty & /*author*/ 2) set_data_dev(t2, /*author*/ ctx[1]);

			if (/*text*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t3);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"success\\\">",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "success",
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, author, title*/ 1031) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PoemComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, author, text, type, video, url, label];
}

class PoemComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			type: 3,
			title: 0,
			author: 1,
			text: 2,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PoemComponent",
			options,
			id: create_fragment$6.name
		});
	}

	get type() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<PoemComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<PoemComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/SubtitleComponent.svelte generated by Svelte v3.17.3 */
const file$7 = "src/book/SubtitleComponent.svelte";

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (35:2) {#if text.length}
function create_if_block$7(ctx) {
	let div;
	let each_value = /*text*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-body");
			add_location(div, file$7, 35, 4, 481);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2) {
				each_value = /*text*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(35:2) {#if text.length}",
		ctx
	});

	return block;
}

// (37:6) {#each text as line, index}
function create_each_block$6(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$7, 37, 8, 556);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = /*text*/ ctx[1];
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 2) p.innerHTML = /*text*/ ctx[1];		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$6.name,
		type: "each",
		source: "(37:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (29:0) <Container context="secondary">
function create_default_slot$6(ctx) {
	let div;
	let t0;
	let t1;
	let if_block_anchor;
	let if_block = /*text*/ ctx[1].length && create_if_block$7(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*title*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-header lead shadow text-center");
			add_location(div, file$7, 30, 2, 385);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (/*text*/ ctx[1].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(29:0) <Container context=\\\"secondary\\\">",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let div;
	let t;
	let current;

	const container = new Container({
			props: {
				context: "secondary",
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			t = space();
			create_component(container.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			children(div).forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(container.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "height", "5rem");
			add_location(div, file$7, 26, 0, 315);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			insert_dev(target, t, anchor);
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, text, title*/ 1027) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t);
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SubtitleComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("video" in $$props) $$invalidate(4, video = $$props.video);
		if ("url" in $$props) $$invalidate(5, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, text, type, author, video, url, label];
}

class SubtitleComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			type: 2,
			title: 0,
			author: 3,
			text: 1,
			video: 4,
			url: 5,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SubtitleComponent",
			options,
			id: create_fragment$7.name
		});
	}

	get type() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<SubtitleComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<SubtitleComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/book/LinkComponent.svelte generated by Svelte v3.17.3 */
const file$8 = "src/book/LinkComponent.svelte";

// (28:0) <Container context="secondary">
function create_default_slot$7(ctx) {
	let a;
	let t0;
	let t1;

	const block = {
		c: function create() {
			a = element("a");
			t0 = text(/*title*/ ctx[0]);
			t1 = text(" »");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				href: true,
				rel: true,
				target: true,
				class: true
			});

			var a_nodes = children(a);
			t0 = claim_text(a_nodes, /*title*/ ctx[0]);
			t1 = claim_text(a_nodes, " »");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*url*/ ctx[1]);
			attr_dev(a, "rel", "noopener noreferrer");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "class", "btn btn-primary btn-lg");
			add_location(a, file$8, 29, 2, 351);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t0);
			append_dev(a, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (dirty & /*url*/ 2) {
				attr_dev(a, "href", /*url*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(28:0) <Container context=\\\"secondary\\\">",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let current;

	const container = new Container({
			props: {
				context: "secondary",
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope, url, title*/ 131) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let { type = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { text = [] } = $$props;
	let { video = "" } = $$props;
	let { url = "" } = $$props;
	let { label = "" } = $$props; // for buttons
	const writable_props = ["type", "title", "author", "text", "video", "url", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<LinkComponent> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(4, text = $$props.text);
		if ("video" in $$props) $$invalidate(5, video = $$props.video);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	$$self.$capture_state = () => {
		return {
			type,
			title,
			author,
			text,
			video,
			url,
			label
		};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("author" in $$props) $$invalidate(3, author = $$props.author);
		if ("text" in $$props) $$invalidate(4, text = $$props.text);
		if ("video" in $$props) $$invalidate(5, video = $$props.video);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
	};

	return [title, url, type, author, text, video, label];
}

class LinkComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			type: 2,
			title: 0,
			author: 3,
			text: 4,
			video: 5,
			url: 1,
			label: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LinkComponent",
			options,
			id: create_fragment$8.name
		});
	}

	get type() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<LinkComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<LinkComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/warrior.svelte generated by Svelte v3.17.3 */
const file$9 = "src/routes/warrior.svelte";

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (127:0) {#each content.data as item}
function create_each_block$7(ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let current;
	const switch_instance_spread_levels = [/*item*/ ctx[12]];
	var switch_value = /*componentLookup*/ ctx[5][/*item*/ ctx[12].type];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t1 = space();
			div2 = element("div");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (switch_instance) claim_component(switch_instance.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "col-md-2 col-lg-3 col-xl-4");
			add_location(div0, file$9, 129, 2, 3192);
			attr_dev(div1, "class", "col-12 col-md-8 col-lg-6 col-xl-4 mb-5");
			add_location(div1, file$9, 132, 4, 3247);
			attr_dev(div2, "class", "col-md-2 col-lg-3 col-xl-4");
			add_location(div2, file$9, 136, 2, 3382);
			attr_dev(div3, "class", "row");
			add_location(div3, file$9, 127, 2, 3171);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div1);

			if (switch_instance) {
				mount_component(switch_instance, div1, null);
			}

			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div3, t2);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*content*/ 2)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*item*/ ctx[12])])
			: {};

			if (switch_value !== (switch_value = /*componentLookup*/ ctx[5][/*item*/ ctx[12].type])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div1, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$7.name,
		type: "each",
		source: "(127:0) {#each content.data as item}",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let t0;
	let div0;
	let nav0;
	let ol;
	let li0;
	let a0;
	let t1;
	let t2;
	let li1;
	let t3_value = /*content*/ ctx[1].meta.title + "";
	let t3;
	let t4;
	let div1;
	let t5;
	let div4;
	let div3;
	let div2;
	let t6;
	let nav1;
	let p0;
	let a1;
	let t7_value = /*contentNext*/ ctx[3].meta.title + "";
	let t7;
	let t8;
	let img0;
	let img0_src_value;
	let img0_alt_value;
	let a1_href_value;
	let t9;
	let p1;
	let a2;
	let img1;
	let img1_src_value;
	let img1_alt_value;
	let t10;
	let t11_value = /*contentPrev*/ ctx[4].meta.title + "";
	let t11;
	let a2_href_value;
	let t12;
	let a3;
	let img2;
	let img2_src_value;
	let current;
	let each_value = /*content*/ ctx[1].data;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			div0 = element("div");
			nav0 = element("nav");
			ol = element("ol");
			li0 = element("li");
			a0 = element("a");
			t1 = text("Warrior");
			t2 = space();
			li1 = element("li");
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			t6 = space();
			nav1 = element("nav");
			p0 = element("p");
			a1 = element("a");
			t7 = text(t7_value);
			t8 = space();
			img0 = element("img");
			t9 = space();
			p1 = element("p");
			a2 = element("a");
			img1 = element("img");
			t10 = text(" ");
			t11 = text(t11_value);
			t12 = space();
			a3 = element("a");
			img2 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-zombrn\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			nav0 = claim_element(div0_nodes, "NAV", { class: true, "aria-label": true });
			var nav0_nodes = children(nav0);
			ol = claim_element(nav0_nodes, "OL", { class: true });
			var ol_nodes = children(ol);
			li0 = claim_element(ol_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Warrior");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ol_nodes);
			li1 = claim_element(ol_nodes, "LI", { class: true, "aria-current": true });
			var li1_nodes = children(li1);
			t3 = claim_text(li1_nodes, t3_value);
			li1_nodes.forEach(detach_dev);
			ol_nodes.forEach(detach_dev);
			nav0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true, style: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			div2 = claim_element(div3_nodes, "DIV", {
				class: true,
				role: true,
				"aria-valuenow": true,
				"aria-valuemin": true,
				"aria-valuemax": true,
				style: true
			});

			children(div2).forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(div4_nodes);
			nav1 = claim_element(div4_nodes, "NAV", { "aria-label": true });
			var nav1_nodes = children(nav1);
			p0 = claim_element(nav1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			a1 = claim_element(p0_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t7 = claim_text(a1_nodes, t7_value);
			t8 = claim_space(a1_nodes);
			img0 = claim_element(a1_nodes, "IMG", { style: true, src: true, alt: true });
			a1_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t9 = claim_space(nav1_nodes);
			p1 = claim_element(nav1_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			a2 = claim_element(p1_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			img1 = claim_element(a2_nodes, "IMG", { style: true, src: true, alt: true });
			t10 = claim_text(a2_nodes, " ");
			t11 = claim_text(a2_nodes, t11_value);
			a2_nodes.forEach(detach_dev);
			t12 = claim_space(p1_nodes);
			a3 = claim_element(p1_nodes, "A", { href: true, class: true });
			var a3_nodes = children(a3);
			img2 = claim_element(a3_nodes, "IMG", { alt: true, style: true, src: true });
			a3_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			nav1_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Cat Pea";
			attr_dev(a0, "href", "?chapter=index");
			add_location(a0, file$9, 117, 32, 2880);
			attr_dev(li0, "class", "breadcrumb-item");
			add_location(li0, file$9, 117, 4, 2852);
			attr_dev(li1, "class", "breadcrumb-item active");
			attr_dev(li1, "aria-current", "page");
			add_location(li1, file$9, 118, 4, 2926);
			attr_dev(ol, "class", "breadcrumb");
			add_location(ol, file$9, 116, 4, 2824);
			attr_dev(nav0, "class", "mb-5");
			attr_dev(nav0, "aria-label", "breadcrumb");
			add_location(nav0, file$9, 115, 2, 2777);
			attr_dev(div0, "class", "container-fluid text-warning");
			set_style(div0, "visibility", "hidden");
			toggle_class(div0, "visible", /*pageReady*/ ctx[0]);
			add_location(div0, file$9, 113, 0, 2675);
			attr_dev(div1, "class", "container-fluid text-warning py-5");
			set_style(div1, "visibility", "hidden");
			toggle_class(div1, "visible", /*pageReady*/ ctx[0]);
			add_location(div1, file$9, 124, 0, 3035);
			attr_dev(div2, "class", "progress-bar progress-bar-striped progress-bar-animated");
			attr_dev(div2, "role", "progressbar");
			attr_dev(div2, "aria-valuenow", /*percent*/ ctx[2]);
			attr_dev(div2, "aria-valuemin", "0");
			attr_dev(div2, "aria-valuemax", "100");
			set_style(div2, "width", /*percent*/ ctx[2] + "%");
			add_location(div2, file$9, 150, 4, 3593);
			attr_dev(div3, "class", "progress");
			add_location(div3, file$9, 149, 2, 3566);
			set_style(img0, "width", "1rem");
			set_style(img0, "height", "1rem");
			if (img0.src !== (img0_src_value = "warrior/images/arrow-alt-circle-right.svg")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", img0_alt_value = /*contentNext*/ ctx[3].meta.title);
			add_location(img0, file$9, 156, 123, 3970);
			attr_dev(a1, "href", a1_href_value = "warrior/?chapter=" + /*contentNext*/ ctx[3].meta.name);
			attr_dev(a1, "class", "btn btn-lg btn-primary btn-block");
			add_location(a1, file$9, 156, 6, 3853);
			attr_dev(p0, "class", "py-3");
			add_location(p0, file$9, 155, 4, 3830);
			set_style(img1, "width", "1rem");
			set_style(img1, "height", "1rem");
			if (img1.src !== (img1_src_value = "warrior/images/arrow-alt-circle-left.svg")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", img1_alt_value = /*contentPrev*/ ctx[4].meta.title);
			add_location(img1, file$9, 160, 83, 4207);
			attr_dev(a2, "href", a2_href_value = "warrior/?chapter=" + /*contentPrev*/ ctx[4].meta.name);
			attr_dev(a2, "class", "btn btn-secondary");
			add_location(a2, file$9, 160, 6, 4130);
			attr_dev(img2, "alt", "Index");
			set_style(img2, "width", "1rem");
			set_style(img2, "height", "1rem");
			if (img2.src !== (img2_src_value = "warrior/images/list-alt.svg")) attr_dev(img2, "src", img2_src_value);
			add_location(img2, file$9, 161, 65, 4424);
			attr_dev(a3, "href", "warrior/?chapter=index");
			attr_dev(a3, "class", "btn btn-secondary");
			add_location(a3, file$9, 161, 6, 4365);
			attr_dev(p1, "class", "py-3");
			add_location(p1, file$9, 159, 4, 4107);
			attr_dev(nav1, "aria-label", "Page Navigation");
			add_location(nav1, file$9, 153, 2, 3790);
			attr_dev(div4, "class", "container-fluid text-warning");
			set_style(div4, "visibility", "hidden");
			toggle_class(div4, "visible", /*pageReady*/ ctx[0]);
			add_location(div4, file$9, 145, 0, 3462);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);
			append_dev(div0, nav0);
			append_dev(nav0, ol);
			append_dev(ol, li0);
			append_dev(li0, a0);
			append_dev(a0, t1);
			append_dev(ol, t2);
			append_dev(ol, li1);
			append_dev(li1, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			insert_dev(target, t5, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div4, t6);
			append_dev(div4, nav1);
			append_dev(nav1, p0);
			append_dev(p0, a1);
			append_dev(a1, t7);
			append_dev(a1, t8);
			append_dev(a1, img0);
			append_dev(nav1, t9);
			append_dev(nav1, p1);
			append_dev(p1, a2);
			append_dev(a2, img1);
			append_dev(a2, t10);
			append_dev(a2, t11);
			append_dev(p1, t12);
			append_dev(p1, a3);
			append_dev(a3, img2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*content*/ 2) && t3_value !== (t3_value = /*content*/ ctx[1].meta.title + "")) set_data_dev(t3, t3_value);

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div0, "visible", /*pageReady*/ ctx[0]);
			}

			if (dirty & /*componentLookup, content*/ 34) {
				each_value = /*content*/ ctx[1].data;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$7(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$7(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div1, "visible", /*pageReady*/ ctx[0]);
			}

			if (!current || dirty & /*percent*/ 4) {
				attr_dev(div2, "aria-valuenow", /*percent*/ ctx[2]);
			}

			if (!current || dirty & /*percent*/ 4) {
				set_style(div2, "width", /*percent*/ ctx[2] + "%");
			}

			if ((!current || dirty & /*contentNext*/ 8) && t7_value !== (t7_value = /*contentNext*/ ctx[3].meta.title + "")) set_data_dev(t7, t7_value);

			if (!current || dirty & /*contentNext*/ 8 && img0_alt_value !== (img0_alt_value = /*contentNext*/ ctx[3].meta.title)) {
				attr_dev(img0, "alt", img0_alt_value);
			}

			if (!current || dirty & /*contentNext*/ 8 && a1_href_value !== (a1_href_value = "warrior/?chapter=" + /*contentNext*/ ctx[3].meta.name)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (!current || dirty & /*contentPrev*/ 16 && img1_alt_value !== (img1_alt_value = /*contentPrev*/ ctx[4].meta.title)) {
				attr_dev(img1, "alt", img1_alt_value);
			}

			if ((!current || dirty & /*contentPrev*/ 16) && t11_value !== (t11_value = /*contentPrev*/ ctx[4].meta.title + "")) set_data_dev(t11, t11_value);

			if (!current || dirty & /*contentPrev*/ 16 && a2_href_value !== (a2_href_value = "warrior/?chapter=" + /*contentPrev*/ ctx[4].meta.name)) {
				attr_dev(a2, "href", a2_href_value);
			}

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div4, "visible", /*pageReady*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	const componentLookup = {
		image: ImageComponent,
		business: BusinessComponent,
		text: TextComponent,
		youtube: YoutubeComponent,
		quote: QuoteComponent,
		poem: PoemComponent,
		subtitle: SubtitleComponent,
		link: LinkComponent
	};

	const { page } = stores$1();
	let pageReady = false;
	let database = [];
	let chapter = "index";
	let content = { meta: {}, data: [] };
	let percent = 0;
	let contentNext = { meta: {}, data: [] };
	let contentPrev = { meta: {}, data: [] };

	// Calculations
	let currentIndex = null;

	//DEV
	let types = new Set();

	//DEV
	function index() {
		const response = {
			meta: { "name": "index", "title": "Index" },
			data: [
				{
					"type": "text",
					"title": "Table of Contents",
					"text": []
				}
			]
		};

		database.forEach(function (item) {
			response.data[0].text.push(`<a href="warrior?chapter=${item.meta.name}">${item.meta.title}</a>`);
		});

		return response;
	}

	onMount(async function () {
		const res = await fetch("book.json");
		const json = await res.json();
		$$invalidate(0, pageReady = true);
		database = json;

		page.subscribe(value => {
			$$invalidate(1, content = database.find(content => content.meta.name == value.query.chapter) || index());
			currentIndex = database.indexOf(content);
			console.log("currentIndex", currentIndex);
			let prevIndex = currentIndex - 1;
			if (prevIndex < 0) prevIndex = database.length - 1;
			let nextIndex = currentIndex + 1;
			if (nextIndex > database.length - 1) nextIndex = 0;
			$$invalidate(3, contentNext = database[nextIndex]);
			$$invalidate(4, contentPrev = database[prevIndex]);
			console.log("prevIndex", prevIndex);
			console.log("nextIndex", nextIndex);
			$$invalidate(2, percent = calculatePercent(currentIndex + 1, database.length) * 100);
		});
	}); //database.forEach(chapter => chapter.data.forEach(item=>types.add(item.type))) // database.forEach(chapter => chapter.data.forEach(item=>Object.keys(item).forEach(item=>types.add(item)) )) // console.log(Array.from(types), types);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("pageReady" in $$props) $$invalidate(0, pageReady = $$props.pageReady);
		if ("database" in $$props) database = $$props.database;
		if ("chapter" in $$props) chapter = $$props.chapter;
		if ("content" in $$props) $$invalidate(1, content = $$props.content);
		if ("percent" in $$props) $$invalidate(2, percent = $$props.percent);
		if ("contentNext" in $$props) $$invalidate(3, contentNext = $$props.contentNext);
		if ("contentPrev" in $$props) $$invalidate(4, contentPrev = $$props.contentPrev);
		if ("currentIndex" in $$props) currentIndex = $$props.currentIndex;
		if ("types" in $$props) types = $$props.types;
	};

	return [pageReady, content, percent, contentNext, contentPrev, componentLookup];
}

class Warrior extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Warrior",
			options,
			id: create_fragment$9.name
		});
	}
}

export default Warrior;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
