import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, o as text, u as space, a as claim_element, b as children, p as claim_text, f as detach_dev, w as claim_space, x as attr_dev, g as add_location, L as set_style, h as insert_dev, q as append_dev, r as set_data_dev, n as noop, K as destroy_each } from './index.7adaf4b5.js';

/* src/routes/stream/index.svelte generated by Svelte v3.16.7 */

const file = "src/routes/stream/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (25:3) {#each posts as post}
function create_each_block(ctx) {
	let div3;
	let div0;
	let t0_value = /*post*/ ctx[1].category + "";
	let t0;
	let t1;
	let div1;
	let h5;
	let t2_value = /*post*/ ctx[1].title + "";
	let t2;
	let t3;
	let p0;
	let t4_value = /*post*/ ctx[1].date + "";
	let t4;
	let t5;
	let p1;
	let t6_value = /*post*/ ctx[1].about + "";
	let t6;
	let t7;
	let div2;
	let a;
	let t8_value = /*post*/ ctx[1].title + "";
	let t8;
	let t9;
	let a_href_value;
	let t10;

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			h5 = element("h5");
			t2 = text(t2_value);
			t3 = space();
			p0 = element("p");
			t4 = text(t4_value);
			t5 = space();
			p1 = element("p");
			t6 = text(t6_value);
			t7 = space();
			div2 = element("div");
			a = element("a");
			t8 = text(t8_value);
			t9 = text(" »");
			t10 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h5 = claim_element(div1_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t2 = claim_text(h5_nodes, t2_value);
			h5_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t4 = claim_text(p0_nodes, t4_value);
			p0_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, t6_value);
			p1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			a = claim_element(div2_nodes, "A", { class: true, rel: true, href: true });
			var a_nodes = children(a);
			t8 = claim_text(a_nodes, t8_value);
			t9 = claim_text(a_nodes, " »");
			a_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t10 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "card-header");
			add_location(div0, file, 26, 6, 510);
			attr_dev(h5, "class", "card-title");
			add_location(h5, file, 28, 8, 595);
			attr_dev(p0, "class", "card-text text-dark small");
			add_location(p0, file, 29, 8, 644);
			attr_dev(p1, "class", "card-text small");
			add_location(p1, file, 30, 8, 705);
			attr_dev(div1, "class", "card-body");
			add_location(div1, file, 27, 6, 563);
			attr_dev(a, "class", "btn btn-dark btn-sm shadow");
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "stream/" + /*post*/ ctx[1].slug);
			add_location(a, file, 33, 7, 810);
			attr_dev(div2, "class", "card-body text-right");
			add_location(div2, file, 32, 6, 768);
			attr_dev(div3, "class", "card bg-secondary mb-3 shadow-lg");
			set_style(div3, "max-width", "40rem");
			add_location(div3, file, 25, 4, 431);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, t0);
			append_dev(div3, t1);
			append_dev(div3, div1);
			append_dev(div1, h5);
			append_dev(h5, t2);
			append_dev(div1, t3);
			append_dev(div1, p0);
			append_dev(p0, t4);
			append_dev(div1, t5);
			append_dev(div1, p1);
			append_dev(p1, t6);
			append_dev(div3, t7);
			append_dev(div3, div2);
			append_dev(div2, a);
			append_dev(a, t8);
			append_dev(a, t9);
			append_dev(div3, t10);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && t0_value !== (t0_value = /*post*/ ctx[1].category + "")) set_data_dev(t0, t0_value);
			if (dirty & /*posts*/ 1 && t2_value !== (t2_value = /*post*/ ctx[1].title + "")) set_data_dev(t2, t2_value);
			if (dirty & /*posts*/ 1 && t4_value !== (t4_value = /*post*/ ctx[1].date + "")) set_data_dev(t4, t4_value);
			if (dirty & /*posts*/ 1 && t6_value !== (t6_value = /*post*/ ctx[1].about + "")) set_data_dev(t6, t6_value);
			if (dirty & /*posts*/ 1 && t8_value !== (t8_value = /*post*/ ctx[1].title + "")) set_data_dev(t8, t8_value);

			if (dirty & /*posts*/ 1 && a_href_value !== (a_href_value = "stream/" + /*post*/ ctx[1].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(25:3) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div4;
	let div3;
	let div0;
	let t1;
	let div1;
	let t2;
	let div2;
	let each_value = /*posts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			t1 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div2 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			children(div2).forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Catpea Stream";
			attr_dev(div0, "class", "col-lg-4");
			add_location(div0, file, 22, 2, 353);
			attr_dev(div1, "class", "col");
			add_location(div1, file, 23, 2, 384);
			attr_dev(div2, "class", "col-lg-4");
			add_location(div2, file, 38, 2, 960);
			attr_dev(div3, "class", "row");
			add_location(div3, file, 21, 1, 333);
			attr_dev(div4, "class", "container-fluid");
			add_location(div4, file, 20, 0, 302);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div3, t1);
			append_dev(div3, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append_dev(div3, t2);
			append_dev(div3, div2);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div4);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`stream.json`).then(r => r.json()).then(posts => {
		return { posts };
	});
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	const writable_props = ["posts"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Stream> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	$$self.$capture_state = () => {
		return { posts };
	};

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	return [posts];
}

class Stream extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Stream",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Stream> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<Stream>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Stream>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Stream;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYWFlYTgxMmYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvc3RyZWFtL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcblx0XHRyZXR1cm4gdGhpcy5mZXRjaChgc3RyZWFtLmpzb25gKS50aGVuKHIgPT4gci5qc29uKCkpLnRoZW4ocG9zdHMgPT4ge1xuXHRcdFx0cmV0dXJuIHsgcG9zdHMgfTtcblx0XHR9KTtcblx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgcG9zdHM7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5DYXRwZWEgU3RyZWFtPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIj5cblx0PGRpdiBjbGFzcz1cInJvd1wiPlxuXHRcdDxkaXYgY2xhc3M9XCJjb2wtbGctNFwiPjwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJjb2xcIj5cblx0XHRcdHsjZWFjaCBwb3N0cyBhcyBwb3N0fVxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZCBiZy1zZWNvbmRhcnkgbWItMyBzaGFkb3ctbGdcIiBzdHlsZT1cIm1heC13aWR0aDogNDByZW07XCI+XG5cdFx0XHRcdCAgPGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyXCI+e3Bvc3QuY2F0ZWdvcnl9PC9kaXY+XG5cdFx0XHRcdCAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuXHRcdFx0XHQgICAgPGg1IGNsYXNzPVwiY2FyZC10aXRsZVwiPntwb3N0LnRpdGxlfTwvaDU+XG5cdFx0XHRcdCAgICA8cCBjbGFzcz1cImNhcmQtdGV4dCB0ZXh0LWRhcmsgc21hbGxcIj57cG9zdC5kYXRlfTwvcD5cblx0XHRcdFx0ICAgIDxwIGNsYXNzPVwiY2FyZC10ZXh0IHNtYWxsXCI+e3Bvc3QuYWJvdXR9PC9wPlxuXHRcdFx0XHQgIDwvZGl2PlxuXHRcdFx0XHQgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHkgdGV4dC1yaWdodFwiPlxuXHRcdFx0XHQgXHRcdDxhIGNsYXNzPVwiYnRuIGJ0bi1kYXJrIGJ0bi1zbSBzaGFkb3dcIiByZWw9J3ByZWZldGNoJyBocmVmPSdzdHJlYW0ve3Bvc3Quc2x1Z30nPntwb3N0LnRpdGxlfSAmcmFxdW87PC9hPlxuXHRcdFx0XHQgIDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdHsvZWFjaH1cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPVwiY29sLWxnLTRcIj48L2Rpdj5cblx0PC9kaXY+XG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3lCQTBCZ0MsR0FBSSxJQUFDLFFBQVE7Ozs7O3lCQUViLEdBQUksSUFBQyxLQUFLOzs7O3lCQUNJLEdBQUksSUFBQyxJQUFJOzs7O3lCQUNuQixHQUFJLElBQUMsS0FBSzs7Ozs7eUJBR3lDLEdBQUksSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyREFBdkIsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnRUFQbkQsR0FBSSxJQUFDLFFBQVE7Z0VBRWIsR0FBSSxJQUFDLEtBQUs7Z0VBQ0ksR0FBSSxJQUFDLElBQUk7Z0VBQ25CLEdBQUksSUFBQyxLQUFLO2dFQUd5QyxHQUFJLElBQUMsS0FBSzs7b0ZBQXZCLEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFUekUsR0FBSzs7O2dDQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFBQyxHQUFLOzs7K0JBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQXZCUSxPQUFPLEdBQUcsTUFBTSxFQUFFLEtBQUs7UUFDL0IsSUFBSSxDQUFDLEtBQUssZ0JBQWdCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSztXQUNyRCxLQUFLOzs7OztPQUZMLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
