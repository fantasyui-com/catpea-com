import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, u as space, e as element, o as text, w as claim_space, a as claim_element, b as children, f as detach_dev, p as claim_text, x as attr_dev, g as add_location, h as insert_dev, q as append_dev, r as set_data_dev, n as noop } from './index.00cdb29c.js';

/* src/routes/stream/[slug].svelte generated by Svelte v3.16.7 */

const file = "src/routes/stream/[slug].svelte";

function create_fragment(ctx) {
	let title_value;
	let t0;
	let div7;
	let div6;
	let div0;
	let t1;
	let div4;
	let div3;
	let div1;
	let t2_value = /*post*/ ctx[0].title + "";
	let t2;
	let t3;
	let div2;
	let p;
	let raw_value = /*post*/ ctx[0].html + "";
	let t4;
	let div5;
	document.title = title_value = /*post*/ ctx[0].title;

	const block = {
		c: function create() {
			t0 = space();
			div7 = element("div");
			div6 = element("div");
			div0 = element("div");
			t1 = space();
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			p = element("p");
			t4 = space();
			div5 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div0 = claim_element(div6_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t1 = claim_space(div6_nodes);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t2 = claim_text(div1_nodes, t2_value);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p = claim_element(div2_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t4 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			children(div5).forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "col-lg-4");
			add_location(div0, file, 32, 2, 554);
			attr_dev(div1, "class", "card-header");
			add_location(div1, file, 37, 4, 658);
			attr_dev(p, "class", "card-text");
			add_location(p, file, 40, 6, 736);
			attr_dev(div2, "class", "card-body");
			add_location(div2, file, 39, 3, 706);
			attr_dev(div3, "class", "card bg-secondary mb-3 shadow-lg");
			add_location(div3, file, 36, 2, 607);
			attr_dev(div4, "class", "col");
			add_location(div4, file, 34, 2, 586);
			attr_dev(div5, "class", "col-lg-4");
			add_location(div5, file, 47, 2, 813);
			attr_dev(div6, "class", "row");
			add_location(div6, file, 31, 1, 534);
			attr_dev(div7, "class", "container-fluid");
			add_location(div7, file, 30, 0, 503);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div7, anchor);
			append_dev(div7, div6);
			append_dev(div6, div0);
			append_dev(div6, t1);
			append_dev(div6, div4);
			append_dev(div4, div3);
			append_dev(div3, div1);
			append_dev(div1, t2);
			append_dev(div3, t3);
			append_dev(div3, div2);
			append_dev(div2, p);
			p.innerHTML = raw_value;
			append_dev(div6, t4);
			append_dev(div6, div5);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*post*/ 1 && title_value !== (title_value = /*post*/ ctx[0].title)) {
				document.title = title_value;
			}

			if (dirty & /*post*/ 1 && t2_value !== (t2_value = /*post*/ ctx[0].title + "")) set_data_dev(t2, t2_value);
			if (dirty & /*post*/ 1 && raw_value !== (raw_value = /*post*/ ctx[0].html + "")) p.innerHTML = raw_value;		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div7);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	const res = await this.fetch(`stream/${params.slug}.json`);
	const data = await res.json();

	if (res.status === 200) {
		return { post: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;
	const writable_props = ["post"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => {
		return { post };
	};

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	return [post];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLmUzYzFkMmIzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3N0cmVhbS9bc2x1Z10uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcywgcXVlcnkgfSkge1xuXHRcdC8vIHRoZSBgc2x1Z2AgcGFyYW1ldGVyIGlzIGF2YWlsYWJsZSBiZWNhdXNlXG5cdFx0Ly8gdGhpcyBmaWxlIGlzIGNhbGxlZCBbc2x1Z10uc3ZlbHRlXG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChgc3RyZWFtLyR7cGFyYW1zLnNsdWd9Lmpzb25gKTtcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuXHRcdGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcblx0XHRcdHJldHVybiB7IHBvc3Q6IGRhdGEgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lcnJvcihyZXMuc3RhdHVzLCBkYXRhLm1lc3NhZ2UpO1xuXHRcdH1cblx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgcG9zdDtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPntwb3N0LnRpdGxlfTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG5cblxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCI+XG5cdDxkaXYgY2xhc3M9XCJyb3dcIj5cblx0XHQ8ZGl2IGNsYXNzPVwiY29sLWxnLTRcIj48L2Rpdj5cblxuXHRcdDxkaXYgY2xhc3M9XCJjb2xcIj5cblxuXHRcdDxkaXYgY2xhc3M9XCJjYXJkIGJnLXNlY29uZGFyeSBtYi0zIHNoYWRvdy1sZ1wiPlxuXHRcdCAgPGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyXCI+e3Bvc3QudGl0bGV9PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cblx0XHQgICAgPHAgY2xhc3M9XCJjYXJkLXRleHRcIj57QGh0bWwgcG9zdC5odG1sfTwvcD5cblx0XHQgIDwvZGl2PlxuXG5cdFx0PC9kaXY+XG5cblx0XHQ8L2Rpdj5cblxuXHRcdDxkaXYgY2xhc3M9XCJjb2wtbGctNFwiPjwvZGl2PlxuXHQ8L2Rpdj5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBcUM4QixHQUFJLElBQUMsS0FBSzs7Ozs7MEJBR04sR0FBSSxJQUFDLElBQUk7Ozt5Q0FoQmxDLEdBQUksSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FFQUFWLEdBQUksSUFBQyxLQUFLOzs7OytEQWFXLEdBQUksSUFBQyxLQUFLO2lFQUdOLEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQXZDcEIsT0FBTyxHQUFHLE1BQU0sRUFBRSxLQUFLO09BR3RDLEdBQUcsU0FBUyxJQUFJLENBQUMsS0FBSyxXQUFXLE1BQU0sQ0FBQyxJQUFJO09BQzVDLElBQUksU0FBUyxHQUFHLENBQUMsSUFBSTs7S0FFdkIsR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHO1dBQ1osSUFBSSxFQUFFLElBQUk7O0VBRW5CLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTzs7Ozs7T0FUMUIsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
