import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, P as assign, Q as exclude_internal_props, v as empty, a as insert_dev, y as group_outros, z as transition_out, A as check_outros, B as transition_in, e as detach_dev, R as bubble, C as create_slot, f as element, h as claim_element, j as children, T as set_attributes, m as add_location, o as listen_dev, D as get_slot_context, E as get_slot_changes, U as get_spread_update, t as text, c as claim_text, b as set_data_dev, p as noop, l as attr_dev, n as append_dev, G as create_component, H as claim_component, I as mount_component, V as get_spread_object, J as destroy_component, g as space, k as claim_space, w as destroy_each, K as HtmlTag, W as stores$1, F as onMount, O as query_selector_all, x as set_style, M as toggle_class } from './client.24a7df40.js';
import { c as calculatePercent } from './index.edd3fa17.js';

function toVal(mix) {
	var k, y, str='';
	if (mix) {
		if (typeof mix === 'object') {
			if (!!mix.push) {
				for (k=0; k < mix.length; k++) {
					if (mix[k] && (y = toVal(mix[k]))) {
						str && (str += ' ');
						str += y;
					}
				}
			} else {
				for (k in mix) {
					if (mix[k] && (y = toVal(k))) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else if (typeof mix !== 'boolean' && !mix.call) {
			str && (str += ' ');
			str += mix;
		}
	}
	return str;
}

function clsx () {
	var i=0, x, str='';
	while (i < arguments.length) {
		if (x = toVal(arguments[i++])) {
			str && (str += ' ');
			str += x;
		}
	}
	return str;
}

function clean($$props) {
  const rest = {};
  for (const key of Object.keys($$props)) {
    if (key !== "children" && key !== "$$scope" && key !== "$$slots") {
      rest[key] = $$props[key];
    }
  }
  return rest;
}

/* node_modules/sveltestrap/src/Button.svelte generated by Svelte v3.18.1 */
const file = "node_modules/sveltestrap/src/Button.svelte";

// (53:0) {:else}
function create_else_block_1(ctx) {
	let button;
	let current_block_type_index;
	let if_block;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	const if_block_creators = [create_if_block_2, create_if_block_3, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*close*/ ctx[1]) return 0;
		if (/*children*/ ctx[0]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let button_levels = [
		/*props*/ ctx[10],
		{ id: /*id*/ ctx[4] },
		{ class: /*classes*/ ctx[8] },
		{ disabled: /*disabled*/ ctx[2] },
		{ value: /*value*/ ctx[6] },
		{
			"aria-label": /*ariaLabel*/ ctx[7] || /*defaultAriaLabel*/ ctx[9]
		},
		{ style: /*style*/ ctx[5] }
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block_1 = {
		c: function create() {
			button = element("button");

			if (!default_slot) {
				if_block.c();
			}

			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {
				id: true,
				class: true,
				disabled: true,
				value: true,
				"aria-label": true,
				style: true
			});

			var button_nodes = children(button);

			if (!default_slot) {
				if_block.l(button_nodes);
			}

			if (default_slot) default_slot.l(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(button, button_data);
			add_location(button, file, 53, 2, 1061);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (!default_slot) {
				if_blocks[current_block_type_index].m(button, null);
			}

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;
			dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[21], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!default_slot) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_2(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(button, null);
				}
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 262144) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[18], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null));
			}

			set_attributes(button, get_spread_update(button_levels, [
				dirty & /*props*/ 1024 && /*props*/ ctx[10],
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*classes*/ 256 && { class: /*classes*/ ctx[8] },
				dirty & /*disabled*/ 4 && { disabled: /*disabled*/ ctx[2] },
				dirty & /*value*/ 64 && { value: /*value*/ ctx[6] },
				dirty & /*ariaLabel, defaultAriaLabel*/ 640 && {
					"aria-label": /*ariaLabel*/ ctx[7] || /*defaultAriaLabel*/ ctx[9]
				},
				dirty & /*style*/ 32 && { style: /*style*/ ctx[5] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);

			if (!default_slot) {
				if_blocks[current_block_type_index].d();
			}

			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_else_block_1.name,
		type: "else",
		source: "(53:0) {:else}",
		ctx
	});

	return block_1;
}

// (37:0) {#if href}
function create_if_block(ctx) {
	let a;
	let current_block_type_index;
	let if_block;
	let current;
	let dispose;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*children*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let a_levels = [
		/*props*/ ctx[10],
		{ id: /*id*/ ctx[4] },
		{ class: /*classes*/ ctx[8] },
		{ disabled: /*disabled*/ ctx[2] },
		{ href: /*href*/ ctx[3] },
		{
			"aria-label": /*ariaLabel*/ ctx[7] || /*defaultAriaLabel*/ ctx[9]
		},
		{ style: /*style*/ ctx[5] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block_1 = {
		c: function create() {
			a = element("a");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				id: true,
				class: true,
				disabled: true,
				href: true,
				"aria-label": true,
				style: true
			});

			var a_nodes = children(a);
			if_block.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(a, a_data);
			add_location(a, file, 37, 2, 825);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			if_blocks[current_block_type_index].m(a, null);
			current = true;
			dispose = listen_dev(a, "click", /*click_handler*/ ctx[20], false, false, false);
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(a, null);
			}

			set_attributes(a, get_spread_update(a_levels, [
				dirty & /*props*/ 1024 && /*props*/ ctx[10],
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*classes*/ 256 && { class: /*classes*/ ctx[8] },
				dirty & /*disabled*/ 4 && { disabled: /*disabled*/ ctx[2] },
				dirty & /*href*/ 8 && { href: /*href*/ ctx[3] },
				dirty & /*ariaLabel, defaultAriaLabel*/ 640 && {
					"aria-label": /*ariaLabel*/ ctx[7] || /*defaultAriaLabel*/ ctx[9]
				},
				dirty & /*style*/ 32 && { style: /*style*/ ctx[5] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if_blocks[current_block_type_index].d();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_if_block.name,
		type: "if",
		source: "(37:0) {#if href}",
		ctx
	});

	return block_1;
}

// (68:6) {:else}
function create_else_block_2(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	const block_1 = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 262144) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[18], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_else_block_2.name,
		type: "else",
		source: "(68:6) {:else}",
		ctx
	});

	return block_1;
}

// (66:25) 
function create_if_block_3(ctx) {
	let t;

	const block_1 = {
		c: function create() {
			t = text(/*children*/ ctx[0]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*children*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*children*/ 1) set_data_dev(t, /*children*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_if_block_3.name,
		type: "if",
		source: "(66:25) ",
		ctx
	});

	return block_1;
}

// (64:6) {#if close}
function create_if_block_2(ctx) {
	let span;
	let t;

	const block_1 = {
		c: function create() {
			span = element("span");
			t = text("×");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { "aria-hidden": true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "×");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "aria-hidden", "true");
			add_location(span, file, 64, 8, 1250);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_if_block_2.name,
		type: "if",
		source: "(64:6) {#if close}",
		ctx
	});

	return block_1;
}

// (49:4) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	const block_1 = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 262144) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[18], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_else_block.name,
		type: "else",
		source: "(49:4) {:else}",
		ctx
	});

	return block_1;
}

// (47:4) {#if children}
function create_if_block_1(ctx) {
	let t;

	const block_1 = {
		c: function create() {
			t = text(/*children*/ ctx[0]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*children*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*children*/ 1) set_data_dev(t, /*children*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_if_block_1.name,
		type: "if",
		source: "(47:4) {#if children}",
		ctx
	});

	return block_1;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block_1 = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { active = false } = $$props;
	let { block = false } = $$props;
	let { children = undefined } = $$props;
	let { close = false } = $$props;
	let { color = "secondary" } = $$props;
	let { disabled = false } = $$props;
	let { href = "" } = $$props;
	let { id = "" } = $$props;
	let { outline = false } = $$props;
	let { size = "" } = $$props;
	let { style = "" } = $$props;
	let { value = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(17, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(11, className = $$new_props.class);
		if ("active" in $$new_props) $$invalidate(12, active = $$new_props.active);
		if ("block" in $$new_props) $$invalidate(13, block = $$new_props.block);
		if ("children" in $$new_props) $$invalidate(0, children = $$new_props.children);
		if ("close" in $$new_props) $$invalidate(1, close = $$new_props.close);
		if ("color" in $$new_props) $$invalidate(14, color = $$new_props.color);
		if ("disabled" in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("href" in $$new_props) $$invalidate(3, href = $$new_props.href);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("outline" in $$new_props) $$invalidate(15, outline = $$new_props.outline);
		if ("size" in $$new_props) $$invalidate(16, size = $$new_props.size);
		if ("style" in $$new_props) $$invalidate(5, style = $$new_props.style);
		if ("value" in $$new_props) $$invalidate(6, value = $$new_props.value);
		if ("$$scope" in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			active,
			block,
			children,
			close,
			color,
			disabled,
			href,
			id,
			outline,
			size,
			style,
			value,
			ariaLabel,
			classes,
			defaultAriaLabel
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(17, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(11, className = $$new_props.className);
		if ("active" in $$props) $$invalidate(12, active = $$new_props.active);
		if ("block" in $$props) $$invalidate(13, block = $$new_props.block);
		if ("children" in $$props) $$invalidate(0, children = $$new_props.children);
		if ("close" in $$props) $$invalidate(1, close = $$new_props.close);
		if ("color" in $$props) $$invalidate(14, color = $$new_props.color);
		if ("disabled" in $$props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("href" in $$props) $$invalidate(3, href = $$new_props.href);
		if ("id" in $$props) $$invalidate(4, id = $$new_props.id);
		if ("outline" in $$props) $$invalidate(15, outline = $$new_props.outline);
		if ("size" in $$props) $$invalidate(16, size = $$new_props.size);
		if ("style" in $$props) $$invalidate(5, style = $$new_props.style);
		if ("value" in $$props) $$invalidate(6, value = $$new_props.value);
		if ("ariaLabel" in $$props) $$invalidate(7, ariaLabel = $$new_props.ariaLabel);
		if ("classes" in $$props) $$invalidate(8, classes = $$new_props.classes);
		if ("defaultAriaLabel" in $$props) $$invalidate(9, defaultAriaLabel = $$new_props.defaultAriaLabel);
	};

	let ariaLabel;
	let classes;
	let defaultAriaLabel;

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);

		if ($$self.$$.dirty & /*className, close, outline, color, size, block, active*/ 129026) {
			 $$invalidate(8, classes = clsx(className, { close }, close || "btn", close || `btn${outline ? "-outline" : ""}-${color}`, size ? `btn-${size}` : false, block ? "btn-block" : false, { active }));
		}

		if ($$self.$$.dirty & /*close*/ 2) {
			 $$invalidate(9, defaultAriaLabel = close ? "Close" : null);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		children,
		close,
		disabled,
		href,
		id,
		style,
		value,
		ariaLabel,
		classes,
		defaultAriaLabel,
		props,
		className,
		active,
		block,
		color,
		outline,
		size,
		$$props,
		$$scope,
		$$slots,
		click_handler,
		click_handler_1
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 11,
			active: 12,
			block: 13,
			children: 0,
			close: 1,
			color: 14,
			disabled: 2,
			href: 3,
			id: 4,
			outline: 15,
			size: 16,
			style: 5,
			value: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get block() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set block(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get children() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set children(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get close() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set close(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outline() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outline(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Card.svelte generated by Svelte v3.18.1 */
const file$1 = "node_modules/sveltestrap/src/Card.svelte";

function create_fragment$1(ctx) {
	let div;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		/*props*/ ctx[3],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[2] },
		{ style: /*style*/ ctx[1] }
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true, style: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$1, 24, 0, 512);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
			dispose = listen_dev(div, "click", /*click_handler*/ ctx[12], false, false, false);
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 1024) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[10], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 8 && /*props*/ ctx[3],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
				dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { body = false } = $$props;
	let { color = "" } = $$props;
	let { id = "" } = $$props;
	let { inverse = false } = $$props;
	let { outline = false } = $$props;
	let { style = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("body" in $$new_props) $$invalidate(5, body = $$new_props.body);
		if ("color" in $$new_props) $$invalidate(6, color = $$new_props.color);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("inverse" in $$new_props) $$invalidate(7, inverse = $$new_props.inverse);
		if ("outline" in $$new_props) $$invalidate(8, outline = $$new_props.outline);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			body,
			color,
			id,
			inverse,
			outline,
			style,
			classes
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
		if ("body" in $$props) $$invalidate(5, body = $$new_props.body);
		if ("color" in $$props) $$invalidate(6, color = $$new_props.color);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("inverse" in $$props) $$invalidate(7, inverse = $$new_props.inverse);
		if ("outline" in $$props) $$invalidate(8, outline = $$new_props.outline);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, inverse, body, color, outline*/ 496) {
			 $$invalidate(2, classes = clsx(className, "card", inverse ? "text-white" : false, body ? "card-body" : false, color ? `${outline ? "border" : "bg"}-${color}` : false));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		classes,
		props,
		className,
		body,
		color,
		inverse,
		outline,
		$$props,
		$$scope,
		$$slots,
		click_handler
	];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			class: 4,
			body: 5,
			color: 6,
			id: 0,
			inverse: 7,
			outline: 8,
			style: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get body() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set body(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inverse() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inverse(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outline() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outline(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardBody.svelte generated by Svelte v3.18.1 */
const file$2 = "node_modules/sveltestrap/src/CardBody.svelte";

function create_fragment$2(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [/*props*/ ctx[2], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[1] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$2, 13, 0, 239);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 32) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[5], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 4 && /*props*/ ctx[2],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 2 && { class: /*classes*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, id, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("classes" in $$props) $$invalidate(1, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 8) {
			 $$invalidate(1, classes = clsx(className, "card-body"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [id, classes, props, className, $$props, $$scope, $$slots];
}

class CardBody extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { class: 3, id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardBody",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<CardBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CardBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CardBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardHeader.svelte generated by Svelte v3.18.1 */
const file$3 = "node_modules/sveltestrap/src/CardHeader.svelte";

// (19:0) {:else}
function create_else_block$1(ctx) {
	let div;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let div_levels = [/*props*/ ctx[3], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[2] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$3, 19, 2, 365);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
			dispose = listen_dev(div, "click", /*click_handler_1*/ ctx[9], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 64) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[6], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 8 && /*props*/ ctx[3],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(19:0) {:else}",
		ctx
	});

	return block;
}

// (15:0) {#if tag === 'h3'}
function create_if_block$1(ctx) {
	let h3;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let h3_levels = [/*props*/ ctx[3], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[2] }];
	let h3_data = {};

	for (let i = 0; i < h3_levels.length; i += 1) {
		h3_data = assign(h3_data, h3_levels[i]);
	}

	const block = {
		c: function create() {
			h3 = element("h3");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { id: true, class: true });
			var h3_nodes = children(h3);
			if (default_slot) default_slot.l(h3_nodes);
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(h3, h3_data);
			add_location(h3, file$3, 15, 2, 288);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);

			if (default_slot) {
				default_slot.m(h3, null);
			}

			current = true;
			dispose = listen_dev(h3, "click", /*click_handler*/ ctx[8], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 64) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[6], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null));
			}

			set_attributes(h3, get_spread_update(h3_levels, [
				dirty & /*props*/ 8 && /*props*/ ctx[3],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(15:0) {#if tag === 'h3'}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tag*/ ctx[1] === "h3") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { tag = "div" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("tag" in $$new_props) $$invalidate(1, tag = $$new_props.tag);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, id, tag, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("tag" in $$props) $$invalidate(1, tag = $$new_props.tag);
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 16) {
			 $$invalidate(2, classes = clsx(className, "card-header"));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		tag,
		classes,
		props,
		className,
		$$props,
		$$scope,
		$$slots,
		click_handler,
		click_handler_1
	];
}

class CardHeader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { class: 4, id: 0, tag: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardHeader",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<CardHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CardHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CardHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tag() {
		throw new Error("<CardHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tag(value) {
		throw new Error("<CardHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardImg.svelte generated by Svelte v3.18.1 */
const file$4 = "node_modules/sveltestrap/src/CardImg.svelte";

function create_fragment$4(ctx) {
	let img;

	let img_levels = [
		/*props*/ ctx[3],
		{ class: /*classes*/ ctx[2] },
		{ src: /*src*/ ctx[0] },
		{ alt: /*alt*/ ctx[1] }
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			set_attributes(img, img_data);
			add_location(img, file$4, 26, 0, 517);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, [dirty]) {
			set_attributes(img, get_spread_update(img_levels, [
				dirty & /*props*/ 8 && /*props*/ ctx[3],
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
				dirty & /*src*/ 1 && { src: /*src*/ ctx[0] },
				dirty & /*alt*/ 2 && { alt: /*alt*/ ctx[1] }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { top = false } = $$props;
	let { bottom = false } = $$props;
	let { src } = $$props;
	let { alt = "" } = $$props;
	const props = clean($$props);
	let classes = "";

	$$self.$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("top" in $$new_props) $$invalidate(5, top = $$new_props.top);
		if ("bottom" in $$new_props) $$invalidate(6, bottom = $$new_props.bottom);
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(1, alt = $$new_props.alt);
	};

	$$self.$capture_state = () => {
		return {
			className,
			top,
			bottom,
			src,
			alt,
			classes
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
		if ("top" in $$props) $$invalidate(5, top = $$new_props.top);
		if ("bottom" in $$props) $$invalidate(6, bottom = $$new_props.bottom);
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$new_props.alt);
		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*top, bottom, className*/ 112) {
			 {
				let cardImgClassName = "card-img";

				if (top) {
					cardImgClassName = "card-img-top";
				}

				if (bottom) {
					cardImgClassName = "card-img-bottom";
				}

				$$invalidate(2, classes = clsx(className, cardImgClassName));
			}
		}
	};

	$$props = exclude_internal_props($$props);
	return [src, alt, classes, props, className, top, bottom];
}

class CardImg extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			class: 4,
			top: 5,
			bottom: 6,
			src: 0,
			alt: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardImg",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<CardImg> was created without expected prop 'src'");
		}
	}

	get class() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get top() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set top(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bottom() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bottom(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get src() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<CardImg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<CardImg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardText.svelte generated by Svelte v3.18.1 */
const file$5 = "node_modules/sveltestrap/src/CardText.svelte";

function create_fragment$5(ctx) {
	let p;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let p_levels = [/*props*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	const block = {
		c: function create() {
			p = element("p");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			if (default_slot) default_slot.l(p_nodes);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(p, p_data);
			add_location(p, file$5, 12, 0, 217);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}

			set_attributes(p, get_spread_update(p_levels, [
				dirty & /*props*/ 2 && /*props*/ ctx[1],
				dirty & /*classes*/ 1 && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			 $$invalidate(0, classes = clsx(className, "card-text"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [classes, props, className, $$props, $$scope, $$slots];
}

class CardText extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardText",
			options,
			id: create_fragment$5.name
		});
	}

	get class() {
		throw new Error("<CardText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/CardTitle.svelte generated by Svelte v3.18.1 */
const file$6 = "node_modules/sveltestrap/src/CardTitle.svelte";

function create_fragment$6(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*props*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$6, 12, 0, 218);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 2 && /*props*/ ctx[1],
				dirty & /*classes*/ 1 && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			 $$invalidate(0, classes = clsx(className, "card-title"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [classes, props, className, $$props, $$scope, $$slots];
}

class CardTitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardTitle",
			options,
			id: create_fragment$6.name
		});
	}

	get class() {
		throw new Error("<CardTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function clean$1($$props) {
  const rest = {};
  for (const key of Object.keys($$props)) {
    if (key !== "children" && key !== "$$scope" && key !== "$$slots") {
      rest[key] = $$props[key];
    }
  }
  return rest;
}

/* node_modules/book-gui/src/Illustration.svelte generated by Svelte v3.18.1 */
const file$7 = "node_modules/book-gui/src/Illustration.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[16] = i;
	return child_ctx;
}

const get_body_slot_changes = dirty => ({});
const get_body_slot_context = ctx => ({});

// (41:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}
function create_if_block$2(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, text, classesCardTitle, title*/ 8276) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(41:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}",
		ctx
	});

	return block;
}

// (43:4) {#if title}
function create_if_block_1$1(ctx) {
	let current;

	const cardtitle = new CardTitle({
			props: {
				class: /*classesCardTitle*/ ctx[6],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtitle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtitle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtitle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtitle_changes = {};
			if (dirty & /*classesCardTitle*/ 64) cardtitle_changes.class = /*classesCardTitle*/ ctx[6];

			if (dirty & /*$$scope, title*/ 8196) {
				cardtitle_changes.$$scope = { dirty, ctx };
			}

			cardtitle.$set(cardtitle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtitle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(43:4) {#if title}",
		ctx
	});

	return block;
}

// (44:6) <CardTitle class={classesCardTitle}>
function create_default_slot_3(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[2]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$7, 43, 42, 865);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(44:6) <CardTitle class={classesCardTitle}>",
		ctx
	});

	return block;
}

// (48:6) <CardText>
function create_default_slot_2(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[14] + "";

	const block = {
		c: function create() {
			this.h();
		},
		l: function claim(nodes) {
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 16 && raw_value !== (raw_value = /*line*/ ctx[14] + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(48:6) <CardText>",
		ctx
	});

	return block;
}

// (47:4) {#each text as line, index}
function create_each_block(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, text*/ 8208) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(47:4) {#each text as line, index}",
		ctx
	});

	return block;
}

// (42:2) <CardBody>
function create_default_slot_1(ctx) {
	let t0;
	let t1;
	let each_1_anchor;
	let current;
	let if_block = /*title*/ ctx[2] && create_if_block_1$1(ctx);
	const body_slot_template = /*$$slots*/ ctx[11].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context);
	let each_value = /*text*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			if (body_slot) body_slot.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t0 = claim_space(nodes);
			if (body_slot) body_slot.l(nodes);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t0, anchor);

			if (body_slot) {
				body_slot.m(target, anchor);
			}

			insert_dev(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (body_slot && body_slot.p && dirty & /*$$scope*/ 8192) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context), get_slot_changes(body_slot_template, /*$$scope*/ ctx[13], dirty, get_body_slot_changes));
			}

			if (dirty & /*text*/ 16) {
				each_value = /*text*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(body_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(body_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			if (body_slot) body_slot.d(detaching);
			if (detaching) detach_dev(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(42:2) <CardBody>",
		ctx
	});

	return block;
}

// (36:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let current;

	const cardimg = new CardImg({
			props: {
				src: /*url*/ ctx[3],
				alt: /*title*/ ctx[2]
			},
			$$inline: true
		});

	let if_block = (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) && create_if_block$2(ctx);
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			create_component(cardimg.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			claim_component(cardimg.$$.fragment, nodes);
			t0 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardimg, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const cardimg_changes = {};
			if (dirty & /*url*/ 8) cardimg_changes.src = /*url*/ ctx[3];
			if (dirty & /*title*/ 4) cardimg_changes.alt = /*title*/ ctx[2];
			cardimg.$set(cardimg_changes);

			if (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8192) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[13], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardimg.$$.fragment, local);
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardimg.$$.fragment, local);
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardimg, detaching);
			if (detaching) detach_dev(t0);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(36:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[8],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[5] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 291)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 256 && get_spread_object(/*props*/ ctx[8]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 32 && { class: /*classes*/ ctx[5] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, text, classesCardTitle, title, url*/ 8284) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(9, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$new_props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			title,
			url,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(9, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$props) $$invalidate(4, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) $$invalidate(6, classesCardTitle = $$new_props.classesCardTitle);
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 512) {
			 $$invalidate(5, classes = clsx(className, "card", "bg-danger", "text-white"));
		}

		if ($$self.$$.dirty & /*text*/ 16) {
			 $$invalidate(6, classesCardTitle = clsx(text.length == 0 ? "mb-0" : false));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		url,
		text,
		classes,
		classesCardTitle,
		SLOTS,
		props,
		className,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Illustration extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			class: 9,
			id: 0,
			style: 1,
			title: 2,
			url: 3,
			text: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Illustration",
			options,
			id: create_fragment$7.name
		});
	}

	get class() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Illustration>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Illustration>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/book-gui/src/Text.svelte generated by Svelte v3.18.1 */
const file$8 = "node_modules/book-gui/src/Text.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

const get_body_slot_changes$1 = dirty => ({});
const get_body_slot_context$1 = ctx => ({});

// (37:2) {#if title}
function create_if_block_1$2(ctx) {
	let current;

	const cardheader = new CardHeader({
			props: {
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope, title*/ 4100) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(37:2) {#if title}",
		ctx
	});

	return block;
}

// (38:4) <CardHeader>
function create_default_slot_3$1(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[2]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$8, 37, 16, 660);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(38:4) <CardHeader>",
		ctx
	});

	return block;
}

// (43:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}
function create_if_block$3(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, text*/ 4104) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(43:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}",
		ctx
	});

	return block;
}

// (47:4) <CardText>
function create_default_slot_2$1(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[13] + "";

	const block = {
		c: function create() {
			this.h();
		},
		l: function claim(nodes) {
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 8 && raw_value !== (raw_value = /*line*/ ctx[13] + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(47:4) <CardText>",
		ctx
	});

	return block;
}

// (46:4) {#each text as line, index}
function create_each_block$1(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, text*/ 4104) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(46:4) {#each text as line, index}",
		ctx
	});

	return block;
}

// (44:2) <CardBody>
function create_default_slot_1$1(ctx) {
	let t;
	let each_1_anchor;
	let current;
	const body_slot_template = /*$$slots*/ ctx[10].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[12], get_body_slot_context$1);
	let each_value = /*text*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			if (body_slot) body_slot.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			if (body_slot) body_slot.l(nodes);
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (body_slot) {
				body_slot.m(target, anchor);
			}

			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (body_slot && body_slot.p && dirty & /*$$scope*/ 4096) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[12], get_body_slot_context$1), get_slot_changes(body_slot_template, /*$$scope*/ ctx[12], dirty, get_body_slot_changes$1));
			}

			if (dirty & /*text*/ 8) {
				each_value = /*text*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(body_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(body_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (body_slot) body_slot.d(detaching);
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(44:2) <CardBody>",
		ctx
	});

	return block;
}

// (35:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot$1(ctx) {
	let t0;
	let t1;
	let current;
	let if_block0 = /*title*/ ctx[2] && create_if_block_1$2(ctx);
	let if_block1 = (/*text*/ ctx[3].length > 0 || /*SLOTS*/ ctx[5] && /*SLOTS*/ ctx[5].body) && create_if_block$3(ctx);
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
					transition_in(if_block0, 1);
				} else {
					if_block0 = create_if_block_1$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*text*/ ctx[3].length > 0 || /*SLOTS*/ ctx[5] && /*SLOTS*/ ctx[5].body) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block$3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4096) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[12], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(35:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[6],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[4] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[11]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 83)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 64 && get_spread_object(/*props*/ ctx[6]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 16 && { class: /*classes*/ ctx[4] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, text, title*/ 4108) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("text" in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			title,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(7, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("text" in $$props) $$invalidate(3, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(4, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) classesCardTitle = $$new_props.classesCardTitle;
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 128) {
			 $$invalidate(4, classes = clsx(className, "card", "bg-danger", "text-white"));
		}

		if ($$self.$$.dirty & /*text*/ 8) {
			 classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		text,
		classes,
		SLOTS,
		props,
		className,
		classesCardTitle,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Text extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			class: 7,
			id: 0,
			style: 1,
			title: 2,
			text: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Text",
			options,
			id: create_fragment$8.name
		});
	}

	get class() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/book-gui/src/Link.svelte generated by Svelte v3.18.1 */
const file$9 = "node_modules/book-gui/src/Link.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[16] = i;
	return child_ctx;
}

const get_body_slot_changes$2 = dirty => ({});
const get_body_slot_context$2 = ctx => ({});

// (38:2) <CardHeader>
function create_default_slot_4(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[2]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$9, 37, 14, 669);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(38:2) <CardHeader>",
		ctx
	});

	return block;
}

// (43:6) <CardText>
function create_default_slot_3$2(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[14] + "";

	const block = {
		c: function create() {
			this.h();
		},
		l: function claim(nodes) {
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 16 && raw_value !== (raw_value = /*line*/ ctx[14] + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$2.name,
		type: "slot",
		source: "(43:6) <CardText>",
		ctx
	});

	return block;
}

// (42:4) {#each text as line, index}
function create_each_block$2(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, text*/ 8208) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(42:4) {#each text as line, index}",
		ctx
	});

	return block;
}

// (45:4) <Button color="primary" size="lg" href="{url}" rel="noopener noreferrer" target="_blank" class="mt-4 btn-block">
function create_default_slot_2$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*title*/ ctx[2]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*title*/ ctx[2]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(45:4) <Button color=\\\"primary\\\" size=\\\"lg\\\" href=\\\"{url}\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" class=\\\"mt-4 btn-block\\\">",
		ctx
	});

	return block;
}

// (40:2) <CardBody>
function create_default_slot_1$2(ctx) {
	let t0;
	let t1;
	let current;
	const body_slot_template = /*$$slots*/ ctx[11].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context$2);
	let each_value = /*text*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const button = new Button({
			props: {
				color: "primary",
				size: "lg",
				href: /*url*/ ctx[3],
				rel: "noopener noreferrer",
				target: "_blank",
				class: "mt-4 btn-block",
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			if (body_slot) body_slot.c();
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			if (body_slot) body_slot.l(nodes);
			t0 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t1 = claim_space(nodes);
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			if (body_slot) {
				body_slot.m(target, anchor);
			}

			insert_dev(target, t0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t1, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (body_slot && body_slot.p && dirty & /*$$scope*/ 8192) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context$2), get_slot_changes(body_slot_template, /*$$scope*/ ctx[13], dirty, get_body_slot_changes$2));
			}

			if (dirty & /*text*/ 16) {
				each_value = /*text*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t1.parentNode, t1);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const button_changes = {};
			if (dirty & /*url*/ 8) button_changes.href = /*url*/ ctx[3];

			if (dirty & /*$$scope, title*/ 8196) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(body_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(body_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (body_slot) body_slot.d(detaching);
			if (detaching) detach_dev(t0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(40:2) <CardBody>",
		ctx
	});

	return block;
}

// (36:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot$2(ctx) {
	let t0;
	let t1;
	let current;

	const cardheader = new CardHeader({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
			t0 = space();
			create_component(cardbody.$$.fragment);
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(cardbody.$$.fragment, nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(cardbody, target, anchor);
			insert_dev(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope, title*/ 8196) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
			const cardbody_changes = {};

			if (dirty & /*$$scope, url, title, text*/ 8220) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8192) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[13], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			transition_in(cardbody.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			transition_out(cardbody.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(cardbody, detaching);
			if (detaching) detach_dev(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(36:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[6],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[5] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot$2] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 99)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 64 && get_spread_object(/*props*/ ctx[6]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 32 && { class: /*classes*/ ctx[5] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, url, title, text*/ 8220) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$new_props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			title,
			url,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(7, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$props) $$invalidate(4, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) classesCardTitle = $$new_props.classesCardTitle;
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 128) {
			 $$invalidate(5, classes = clsx(className, "card", "bg-secondary", "text-white"));
		}

		if ($$self.$$.dirty & /*text*/ 16) {
			 classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		url,
		text,
		classes,
		props,
		className,
		classesCardTitle,
		SLOTS,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Link extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			class: 7,
			id: 0,
			style: 1,
			title: 2,
			url: 3,
			text: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Link",
			options,
			id: create_fragment$9.name
		});
	}

	get class() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/book-gui/src/Business.svelte generated by Svelte v3.18.1 */
const file$a = "node_modules/book-gui/src/Business.svelte";

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[16] = i;
	return child_ctx;
}

const get_body_slot_changes$3 = dirty => ({});
const get_body_slot_context$3 = ctx => ({});

// (40:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}
function create_if_block$4(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, text, classesCardTitle, title*/ 8276) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(40:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}",
		ctx
	});

	return block;
}

// (42:4) {#if title}
function create_if_block_1$3(ctx) {
	let current;

	const cardtitle = new CardTitle({
			props: {
				class: /*classesCardTitle*/ ctx[6],
				$$slots: { default: [create_default_slot_3$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtitle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtitle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtitle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtitle_changes = {};
			if (dirty & /*classesCardTitle*/ 64) cardtitle_changes.class = /*classesCardTitle*/ ctx[6];

			if (dirty & /*$$scope, title*/ 8196) {
				cardtitle_changes.$$scope = { dirty, ctx };
			}

			cardtitle.$set(cardtitle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtitle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(42:4) {#if title}",
		ctx
	});

	return block;
}

// (43:6) <CardTitle class={classesCardTitle}>
function create_default_slot_3$3(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[2]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$a, 42, 42, 864);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$3.name,
		type: "slot",
		source: "(43:6) <CardTitle class={classesCardTitle}>",
		ctx
	});

	return block;
}

// (47:6) <CardText>
function create_default_slot_2$3(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[14] + "";

	const block = {
		c: function create() {
			this.h();
		},
		l: function claim(nodes) {
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 16 && raw_value !== (raw_value = /*line*/ ctx[14] + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$3.name,
		type: "slot",
		source: "(47:6) <CardText>",
		ctx
	});

	return block;
}

// (46:4) {#each text as line, index}
function create_each_block$3(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, text*/ 8208) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(46:4) {#each text as line, index}",
		ctx
	});

	return block;
}

// (41:2) <CardBody>
function create_default_slot_1$3(ctx) {
	let t0;
	let t1;
	let each_1_anchor;
	let current;
	let if_block = /*title*/ ctx[2] && create_if_block_1$3(ctx);
	const body_slot_template = /*$$slots*/ ctx[11].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context$3);
	let each_value = /*text*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			if (body_slot) body_slot.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t0 = claim_space(nodes);
			if (body_slot) body_slot.l(nodes);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t0, anchor);

			if (body_slot) {
				body_slot.m(target, anchor);
			}

			insert_dev(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (body_slot && body_slot.p && dirty & /*$$scope*/ 8192) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context$3), get_slot_changes(body_slot_template, /*$$scope*/ ctx[13], dirty, get_body_slot_changes$3));
			}

			if (dirty & /*text*/ 16) {
				each_value = /*text*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(body_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(body_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			if (body_slot) body_slot.d(detaching);
			if (detaching) detach_dev(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(41:2) <CardBody>",
		ctx
	});

	return block;
}

// (36:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot$3(ctx) {
	let t0;
	let t1;
	let current;

	const cardimg = new CardImg({
			props: {
				src: /*url*/ ctx[3],
				alt: /*title*/ ctx[2]
			},
			$$inline: true
		});

	let if_block = (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) && create_if_block$4(ctx);
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			create_component(cardimg.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			claim_component(cardimg.$$.fragment, nodes);
			t0 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardimg, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const cardimg_changes = {};
			if (dirty & /*url*/ 8) cardimg_changes.src = /*url*/ ctx[3];
			if (dirty & /*title*/ 4) cardimg_changes.alt = /*title*/ ctx[2];
			cardimg.$set(cardimg_changes);

			if (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8192) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[13], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardimg.$$.fragment, local);
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardimg.$$.fragment, local);
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardimg, detaching);
			if (detaching) detach_dev(t0);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(36:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[8],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[5] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot$3] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 291)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 256 && get_spread_object(/*props*/ ctx[8]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 32 && { class: /*classes*/ ctx[5] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, text, classesCardTitle, title, url*/ 8284) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(9, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$new_props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			title,
			url,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(9, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("url" in $$props) $$invalidate(3, url = $$new_props.url);
		if ("text" in $$props) $$invalidate(4, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) $$invalidate(6, classesCardTitle = $$new_props.classesCardTitle);
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 512) {
			 $$invalidate(5, classes = clsx(className, "card", "bg-warning", "text-dark"));
		}

		if ($$self.$$.dirty & /*text*/ 16) {
			 $$invalidate(6, classesCardTitle = clsx(text.length == 0 ? "mb-0" : false));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		url,
		text,
		classes,
		classesCardTitle,
		SLOTS,
		props,
		className,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Business extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
			class: 9,
			id: 0,
			style: 1,
			title: 2,
			url: 3,
			text: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Business",
			options,
			id: create_fragment$a.name
		});
	}

	get class() {
		throw new Error("<Business>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Business>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Business>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Business>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Business>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Business>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Business>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Business>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Business>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Business>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Business>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Business>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/book-gui/src/Youtube.svelte generated by Svelte v3.18.1 */
const file$b = "node_modules/book-gui/src/Youtube.svelte";

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[16] = i;
	return child_ctx;
}

const get_body_slot_changes$4 = dirty => ({});
const get_body_slot_context$4 = ctx => ({});

// (38:2) {#if title}
function create_if_block_1$4(ctx) {
	let current;

	const cardheader = new CardHeader({
			props: {
				$$slots: { default: [create_default_slot_3$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope, title*/ 8196) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$4.name,
		type: "if",
		source: "(38:2) {#if title}",
		ctx
	});

	return block;
}

// (39:2) <CardHeader>
function create_default_slot_3$4(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, /*title*/ ctx[2]);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$b, 38, 14, 690);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$4.name,
		type: "slot",
		source: "(39:2) <CardHeader>",
		ctx
	});

	return block;
}

// (45:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}
function create_if_block$5(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, text*/ 8208) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(45:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}",
		ctx
	});

	return block;
}

// (49:4) <CardText>
function create_default_slot_2$4(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[14] + "";

	const block = {
		c: function create() {
			this.h();
		},
		l: function claim(nodes) {
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 16 && raw_value !== (raw_value = /*line*/ ctx[14] + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$4.name,
		type: "slot",
		source: "(49:4) <CardText>",
		ctx
	});

	return block;
}

// (48:4) {#each text as line, index}
function create_each_block$4(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_2$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, text*/ 8208) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(48:4) {#each text as line, index}",
		ctx
	});

	return block;
}

// (46:2) <CardBody>
function create_default_slot_1$4(ctx) {
	let t;
	let each_1_anchor;
	let current;
	const body_slot_template = /*$$slots*/ ctx[11].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context$4);
	let each_value = /*text*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			if (body_slot) body_slot.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			if (body_slot) body_slot.l(nodes);
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (body_slot) {
				body_slot.m(target, anchor);
			}

			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (body_slot && body_slot.p && dirty & /*$$scope*/ 8192) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[13], get_body_slot_context$4), get_slot_changes(body_slot_template, /*$$scope*/ ctx[13], dirty, get_body_slot_changes$4));
			}

			if (dirty & /*text*/ 16) {
				each_value = /*text*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(body_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(body_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (body_slot) body_slot.d(detaching);
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$4.name,
		type: "slot",
		source: "(46:2) <CardBody>",
		ctx
	});

	return block;
}

// (36:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot$4(ctx) {
	let t0;
	let a;
	let a_href_value;
	let t1;
	let t2;
	let current;
	let if_block0 = /*title*/ ctx[2] && create_if_block_1$4(ctx);

	const cardimg = new CardImg({
			props: {
				bottom: true,
				src: "https://img.youtube.com/vi/" + /*video*/ ctx[3] + "/0.jpg",
				alt: /*title*/ ctx[2]
			},
			$$inline: true
		});

	let if_block1 = (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[6] && /*SLOTS*/ ctx[6].body) && create_if_block$5(ctx);
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			a = element("a");
			create_component(cardimg.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true, rel: true, target: true });
			var a_nodes = children(a);
			claim_component(cardimg.$$.fragment, a_nodes);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t2 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = "https://www.youtube.com/watch?v=" + /*video*/ ctx[3]);
			attr_dev(a, "rel", "noopener noreferrer");
			attr_dev(a, "target", "_blank");
			add_location(a, file$b, 41, 2, 731);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			mount_component(cardimg, a, null);
			insert_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t2, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
					transition_in(if_block0, 1);
				} else {
					if_block0 = create_if_block_1$4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const cardimg_changes = {};
			if (dirty & /*video*/ 8) cardimg_changes.src = "https://img.youtube.com/vi/" + /*video*/ ctx[3] + "/0.jpg";
			if (dirty & /*title*/ 4) cardimg_changes.alt = /*title*/ ctx[2];
			cardimg.$set(cardimg_changes);

			if (!current || dirty & /*video*/ 8 && a_href_value !== (a_href_value = "https://www.youtube.com/watch?v=" + /*video*/ ctx[3])) {
				attr_dev(a, "href", a_href_value);
			}

			if (/*text*/ ctx[4].length > 0 || /*SLOTS*/ ctx[6] && /*SLOTS*/ ctx[6].body) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block$5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8192) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[13], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(cardimg.$$.fragment, local);
			transition_in(if_block1);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(cardimg.$$.fragment, local);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			destroy_component(cardimg);
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t2);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(36:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$b(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[7],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[5] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot$4] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 163)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 128 && get_spread_object(/*props*/ ctx[7]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 32 && { class: /*classes*/ ctx[5] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, text, video, title*/ 8220) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { video = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(8, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("video" in $$new_props) $$invalidate(3, video = $$new_props.video);
		if ("text" in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			title,
			video,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(8, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("video" in $$props) $$invalidate(3, video = $$new_props.video);
		if ("text" in $$props) $$invalidate(4, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) classesCardTitle = $$new_props.classesCardTitle;
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 256) {
			 $$invalidate(5, classes = clsx(className, "card", "bg-dark", "text-white"));
		}

		if ($$self.$$.dirty & /*text*/ 16) {
			 classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		video,
		text,
		classes,
		SLOTS,
		props,
		className,
		classesCardTitle,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Youtube extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
			class: 8,
			id: 0,
			style: 1,
			title: 2,
			video: 3,
			text: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Youtube",
			options,
			id: create_fragment$b.name
		});
	}

	get class() {
		throw new Error("<Youtube>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Youtube>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Youtube>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Youtube>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Youtube>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Youtube>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Youtube>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Youtube>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get video() {
		throw new Error("<Youtube>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set video(value) {
		throw new Error("<Youtube>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Youtube>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Youtube>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/book-gui/src/Quote.svelte generated by Svelte v3.18.1 */
const file$c = "node_modules/book-gui/src/Quote.svelte";

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

const get_body_slot_changes$5 = dirty => ({});
const get_body_slot_context$5 = ctx => ({});

// (43:6) {#each text as line, index}
function create_each_block$5(ctx) {
	let p;
	let raw_value = /*line*/ ctx[15] + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$c, 43, 6, 812);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 32 && raw_value !== (raw_value = /*line*/ ctx[15] + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$5.name,
		type: "each",
		source: "(43:6) {#each text as line, index}",
		ctx
	});

	return block;
}

// (46:50) {#if author}
function create_if_block_1$5(ctx) {
	let current;

	const button = new Button({
			props: {
				color: "text",
				size: "sm",
				href: /*url*/ ctx[3],
				rel: "noopener noreferrer",
				target: "_blank",
				class: "text-dark p-0",
				$$slots: { default: [create_default_slot_2$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*url*/ 8) button_changes.href = /*url*/ ctx[3];

			if (dirty & /*$$scope, author*/ 16388) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$5.name,
		type: "if",
		source: "(46:50) {#if author}",
		ctx
	});

	return block;
}

// (46:62) <Button color="text" size="sm" href="{url}" rel="noopener noreferrer" target="_blank" class="text-dark p-0">
function create_default_slot_2$5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*author*/ ctx[2]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*author*/ ctx[2]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*author*/ 4) set_data_dev(t, /*author*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$5.name,
		type: "slot",
		source: "(46:62) <Button color=\\\"text\\\" size=\\\"sm\\\" href=\\\"{url}\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" class=\\\"text-dark p-0\\\">",
		ctx
	});

	return block;
}

// (46:192) {#if source}
function create_if_block$6(ctx) {
	let t0;
	let cite;
	let t1;

	const block = {
		c: function create() {
			t0 = text("in ");
			cite = element("cite");
			t1 = text(/*source*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "in ");
			cite = claim_element(nodes, "CITE", { title: true });
			var cite_nodes = children(cite);
			t1 = claim_text(cite_nodes, /*source*/ ctx[4]);
			cite_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(cite, "title", /*source*/ ctx[4]);
			add_location(cite, file$c, 45, 208, 1054);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, cite, anchor);
			append_dev(cite, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*source*/ 16) set_data_dev(t1, /*source*/ ctx[4]);

			if (dirty & /*source*/ 16) {
				attr_dev(cite, "title", /*source*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(cite);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(46:192) {#if source}",
		ctx
	});

	return block;
}

// (39:2) <CardBody>
function create_default_slot_1$5(ctx) {
	let blockquote;
	let t0;
	let t1;
	let footer;
	let if_block0_anchor;
	let t2;
	let current;
	const body_slot_template = /*$$slots*/ ctx[12].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[14], get_body_slot_context$5);
	let each_value = /*text*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	let if_block0 = /*author*/ ctx[2] && create_if_block_1$5(ctx);
	let if_block1 = /*source*/ ctx[4] && create_if_block$6(ctx);
	const default_slot_template = /*$$slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

	const block = {
		c: function create() {
			blockquote = element("blockquote");
			if (body_slot) body_slot.c();
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			footer = element("footer");
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			t2 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			blockquote = claim_element(nodes, "BLOCKQUOTE", { class: true });
			var blockquote_nodes = children(blockquote);
			if (body_slot) body_slot.l(blockquote_nodes);
			t0 = claim_space(blockquote_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(blockquote_nodes);
			}

			t1 = claim_space(blockquote_nodes);
			footer = claim_element(blockquote_nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			if (if_block0) if_block0.l(footer_nodes);
			if_block0_anchor = empty();
			if (if_block1) if_block1.l(footer_nodes);
			footer_nodes.forEach(detach_dev);
			blockquote_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(footer, "class", "blockquote-footer text-dark");
			add_location(footer, file$c, 45, 6, 852);
			attr_dev(blockquote, "class", "blockquote mb-0");
			add_location(blockquote, file$c, 40, 4, 709);
		},
		m: function mount(target, anchor) {
			insert_dev(target, blockquote, anchor);

			if (body_slot) {
				body_slot.m(blockquote, null);
			}

			append_dev(blockquote, t0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(blockquote, null);
			}

			append_dev(blockquote, t1);
			append_dev(blockquote, footer);
			if (if_block0) if_block0.m(footer, null);
			append_dev(footer, if_block0_anchor);
			if (if_block1) if_block1.m(footer, null);
			insert_dev(target, t2, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (body_slot && body_slot.p && dirty & /*$$scope*/ 16384) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[14], get_body_slot_context$5), get_slot_changes(body_slot_template, /*$$scope*/ ctx[14], dirty, get_body_slot_changes$5));
			}

			if (dirty & /*text*/ 32) {
				each_value = /*text*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(blockquote, t1);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*author*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
					transition_in(if_block0, 1);
				} else {
					if_block0 = create_if_block_1$5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(footer, if_block0_anchor);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*source*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$6(ctx);
					if_block1.c();
					if_block1.m(footer, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16384) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[14], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(body_slot, local);
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(body_slot, local);
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(blockquote);
			if (body_slot) body_slot.d(detaching);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach_dev(t2);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$5.name,
		type: "slot",
		source: "(39:2) <CardBody>",
		ctx
	});

	return block;
}

// (37:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot$5(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, source, url, author, text*/ 16444) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(37:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$c(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[7],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[6] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot$5] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 195)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 128 && get_spread_object(/*props*/ ctx[7]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 64 && { class: /*classes*/ ctx[6] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, source, url, author, text*/ 16444) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { author = "" } = $$props;
	let { url = "" } = $$props;
	let { source = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(8, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("author" in $$new_props) $$invalidate(2, author = $$new_props.author);
		if ("url" in $$new_props) $$invalidate(3, url = $$new_props.url);
		if ("source" in $$new_props) $$invalidate(4, source = $$new_props.source);
		if ("text" in $$new_props) $$invalidate(5, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			author,
			url,
			source,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(8, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("author" in $$props) $$invalidate(2, author = $$new_props.author);
		if ("url" in $$props) $$invalidate(3, url = $$new_props.url);
		if ("source" in $$props) $$invalidate(4, source = $$new_props.source);
		if ("text" in $$props) $$invalidate(5, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(6, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) classesCardTitle = $$new_props.classesCardTitle;
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 256) {
			 $$invalidate(6, classes = clsx(className, "card", "bg-secondary", "text-white"));
		}

		if ($$self.$$.dirty & /*text*/ 32) {
			 classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		author,
		url,
		source,
		text,
		classes,
		props,
		className,
		classesCardTitle,
		SLOTS,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Quote extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
			class: 8,
			id: 0,
			style: 1,
			author: 2,
			url: 3,
			source: 4,
			text: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Quote",
			options,
			id: create_fragment$c.name
		});
	}

	get class() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get source() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set source(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/book-gui/src/Poem.svelte generated by Svelte v3.18.1 */
const file$d = "node_modules/book-gui/src/Poem.svelte";

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

const get_body_slot_changes$6 = dirty => ({});
const get_body_slot_context$6 = ctx => ({});

// (39:134) {#if author}
function create_if_block_1$6(ctx) {
	let t0;
	let t1;

	const block = {
		c: function create() {
			t0 = text("by ");
			t1 = text(/*author*/ ctx[3]);
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "by ");
			t1 = claim_text(nodes, /*author*/ ctx[3]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*author*/ 8) set_data_dev(t1, /*author*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$6.name,
		type: "if",
		source: "(39:134) {#if author}",
		ctx
	});

	return block;
}

// (39:26) <Button color="text" size="sm" href="{url}" rel="noopener noreferrer" target="_blank" class="text-dark p-0">
function create_default_slot_4$1(ctx) {
	let if_block_anchor;
	let if_block = /*author*/ ctx[3] && create_if_block_1$6(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*author*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$6(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$1.name,
		type: "slot",
		source: "(39:26) <Button color=\\\"text\\\" size=\\\"sm\\\" href=\\\"{url}\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" class=\\\"text-dark p-0\\\">",
		ctx
	});

	return block;
}

// (39:2) <CardHeader>
function create_default_slot_3$5(ctx) {
	let h5;
	let t0;
	let t1;
	let current;

	const button = new Button({
			props: {
				color: "text",
				size: "sm",
				href: /*url*/ ctx[4],
				rel: "noopener noreferrer",
				target: "_blank",
				class: "text-dark p-0",
				$$slots: { default: [create_default_slot_4$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h5 = element("h5");
			t0 = text(/*title*/ ctx[2]);
			t1 = space();
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t0 = claim_text(h5_nodes, /*title*/ ctx[2]);
			t1 = claim_space(h5_nodes);
			claim_component(button.$$.fragment, h5_nodes);
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file$d, 38, 14, 704);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t0);
			append_dev(h5, t1);
			mount_component(button, h5, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*title*/ 4) set_data_dev(t0, /*title*/ ctx[2]);
			const button_changes = {};
			if (dirty & /*url*/ 16) button_changes.href = /*url*/ ctx[4];

			if (dirty & /*$$scope, author*/ 16392) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$5.name,
		type: "slot",
		source: "(39:2) <CardHeader>",
		ctx
	});

	return block;
}

// (42:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}
function create_if_block$7(ctx) {
	let current;

	const cardbody = new CardBody({
			props: {
				$$slots: { default: [create_default_slot_1$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardbody.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardbody.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardbody_changes = {};

			if (dirty & /*$$scope, text*/ 16416) {
				cardbody_changes.$$scope = { dirty, ctx };
			}

			cardbody.$set(cardbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(42:2) {#if (text.length > 0)||((SLOTS)&&(SLOTS.body))}",
		ctx
	});

	return block;
}

// (46:4) <CardText>
function create_default_slot_2$6(ctx) {
	let html_tag;
	let raw_value = /*line*/ ctx[15] + "";

	const block = {
		c: function create() {
			this.h();
		},
		l: function claim(nodes) {
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 32 && raw_value !== (raw_value = /*line*/ ctx[15] + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$6.name,
		type: "slot",
		source: "(46:4) <CardText>",
		ctx
	});

	return block;
}

// (45:4) {#each text as line, index}
function create_each_block$6(ctx) {
	let current;

	const cardtext = new CardText({
			props: {
				$$slots: { default: [create_default_slot_2$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardtext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtext_changes = {};

			if (dirty & /*$$scope, text*/ 16416) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$6.name,
		type: "each",
		source: "(45:4) {#each text as line, index}",
		ctx
	});

	return block;
}

// (43:2) <CardBody>
function create_default_slot_1$6(ctx) {
	let t;
	let each_1_anchor;
	let current;
	const body_slot_template = /*$$slots*/ ctx[12].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[14], get_body_slot_context$6);
	let each_value = /*text*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			if (body_slot) body_slot.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			if (body_slot) body_slot.l(nodes);
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (body_slot) {
				body_slot.m(target, anchor);
			}

			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (body_slot && body_slot.p && dirty & /*$$scope*/ 16384) {
				body_slot.p(get_slot_context(body_slot_template, ctx, /*$$scope*/ ctx[14], get_body_slot_context$6), get_slot_changes(body_slot_template, /*$$scope*/ ctx[14], dirty, get_body_slot_changes$6));
			}

			if (dirty & /*text*/ 32) {
				each_value = /*text*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(body_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(body_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (body_slot) body_slot.d(detaching);
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$6.name,
		type: "slot",
		source: "(43:2) <CardBody>",
		ctx
	});

	return block;
}

// (37:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot$6(ctx) {
	let t0;
	let t1;
	let current;

	const cardheader = new CardHeader({
			props: {
				$$slots: { default: [create_default_slot_3$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = (/*text*/ ctx[5].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) && create_if_block$7(ctx);
	const default_slot_template = /*$$slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope, url, author, title*/ 16412) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);

			if (/*text*/ ctx[5].length > 0 || /*SLOTS*/ ctx[7] && /*SLOTS*/ ctx[7].body) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16384) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[14], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
			if (detaching) detach_dev(t0);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(37:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$d(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[8],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[6] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot$6] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 323)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 256 && get_spread_object(/*props*/ ctx[8]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 64 && { class: /*classes*/ ctx[6] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, text, url, author, title*/ 16444) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	let { author = "" } = $$props;
	let { url = "" } = $$props;
	let { text = [] } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(9, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("author" in $$new_props) $$invalidate(3, author = $$new_props.author);
		if ("url" in $$new_props) $$invalidate(4, url = $$new_props.url);
		if ("text" in $$new_props) $$invalidate(5, text = $$new_props.text);
		if ("$$scope" in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			className,
			id,
			style,
			title,
			author,
			url,
			text,
			classes,
			classesCardTitle
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(9, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("author" in $$props) $$invalidate(3, author = $$new_props.author);
		if ("url" in $$props) $$invalidate(4, url = $$new_props.url);
		if ("text" in $$props) $$invalidate(5, text = $$new_props.text);
		if ("classes" in $$props) $$invalidate(6, classes = $$new_props.classes);
		if ("classesCardTitle" in $$props) classesCardTitle = $$new_props.classesCardTitle;
	};

	let classes;
	let classesCardTitle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 512) {
			 $$invalidate(6, classes = clsx(className, "card", "bg-secondary", "text-white"));
		}

		if ($$self.$$.dirty & /*text*/ 32) {
			 classesCardTitle = clsx(text.length == 0 ? "mb-0" : false);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		author,
		url,
		text,
		classes,
		SLOTS,
		props,
		className,
		classesCardTitle,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Poem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
			class: 9,
			id: 0,
			style: 1,
			title: 2,
			author: 3,
			url: 4,
			text: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Poem",
			options,
			id: create_fragment$d.name
		});
	}

	get class() {
		throw new Error("<Poem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Poem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Poem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Poem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Poem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Poem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Poem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Poem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<Poem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<Poem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Poem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Poem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Poem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Poem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/book-gui/src/Subtitle.svelte generated by Svelte v3.18.1 */
const file$e = "node_modules/book-gui/src/Subtitle.svelte";

// (32:2) {#if title}
function create_if_block$8(ctx) {
	let current;

	const cardheader = new CardHeader({
			props: {
				$$slots: { default: [create_default_slot_1$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope, title*/ 1028) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$8.name,
		type: "if",
		source: "(32:2) {#if title}",
		ctx
	});

	return block;
}

// (33:4) <CardHeader>
function create_default_slot_1$7(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, /*title*/ ctx[2]);
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "text-center");
			add_location(h3, file$e, 32, 16, 538);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$7.name,
		type: "slot",
		source: "(33:4) <CardHeader>",
		ctx
	});

	return block;
}

// (30:0) <Card {...props} {id} class={classes} on:click {style}>
function create_default_slot$7(ctx) {
	let t;
	let current;
	let if_block = /*title*/ ctx[2] && create_if_block$8(ctx);
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 1024) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[10], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(30:0) <Card {...props} {id} class={classes} on:click {style}>",
		ctx
	});

	return block;
}

function create_fragment$e(ctx) {
	let current;

	const card_spread_levels = [
		/*props*/ ctx[4],
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[3] },
		{ style: /*style*/ ctx[1] }
	];

	let card_props = {
		$$slots: { default: [create_default_slot$7] },
		$$scope: { ctx }
	};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	const card = new Card({ props: card_props, $$inline: true });
	card.$on("click", /*click_handler*/ ctx[9]);

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = (dirty & /*props, id, classes, style*/ 27)
			? get_spread_update(card_spread_levels, [
					dirty & /*props*/ 16 && get_spread_object(/*props*/ ctx[4]),
					dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
					dirty & /*classes*/ 8 && { class: /*classes*/ ctx[3] },
					dirty & /*style*/ 2 && { style: /*style*/ ctx[1] }
				])
			: {};

			if (dirty & /*$$scope, title*/ 1028) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$e.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$e($$self, $$props, $$invalidate) {
	const SLOTS = $$props.$$slots;
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { title = "" } = $$props;
	const props = clean$1($$props);
	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return { className, id, style, title, classes };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(5, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 32) {
			 $$invalidate(3, classes = clsx(className, "card", "bg-info", "text-white"));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		style,
		title,
		classes,
		props,
		className,
		SLOTS,
		$$props,
		$$slots,
		click_handler,
		$$scope
	];
}

class Subtitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$e, create_fragment$e, safe_not_equal, { class: 5, id: 0, style: 1, title: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Subtitle",
			options,
			id: create_fragment$e.name
		});
	}

	get class() {
		throw new Error("<Subtitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Subtitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Subtitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Subtitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Subtitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Subtitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Subtitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Subtitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/warrior.svelte generated by Svelte v3.18.1 */
const file$f = "src/routes/warrior.svelte";

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (129:0) {#each content.data as item}
function create_each_block$7(ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let current;
	const switch_instance_spread_levels = [/*item*/ ctx[12]];
	var switch_value = /*componentLookup*/ ctx[5][/*item*/ ctx[12].type];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t1 = space();
			div2 = element("div");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (switch_instance) claim_component(switch_instance.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "col-md-2 col-lg-3 col-xl-4");
			add_location(div0, file$f, 131, 2, 3096);
			attr_dev(div1, "class", "col-12 col-md-8 col-lg-6 col-xl-4 mb-5");
			add_location(div1, file$f, 134, 4, 3151);
			attr_dev(div2, "class", "col-md-2 col-lg-3 col-xl-4");
			add_location(div2, file$f, 138, 2, 3286);
			attr_dev(div3, "class", "row");
			add_location(div3, file$f, 129, 2, 3075);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div1);

			if (switch_instance) {
				mount_component(switch_instance, div1, null);
			}

			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div3, t2);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*content*/ 2)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*item*/ ctx[12])])
			: {};

			if (switch_value !== (switch_value = /*componentLookup*/ ctx[5][/*item*/ ctx[12].type])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div1, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$7.name,
		type: "each",
		source: "(129:0) {#each content.data as item}",
		ctx
	});

	return block;
}

function create_fragment$f(ctx) {
	let t0;
	let div0;
	let nav0;
	let ol;
	let li0;
	let a0;
	let t1;
	let t2;
	let li1;
	let t3_value = /*content*/ ctx[1].meta.title + "";
	let t3;
	let t4;
	let div1;
	let t5;
	let div4;
	let div3;
	let div2;
	let t6;
	let nav1;
	let p0;
	let a1;
	let t7_value = /*contentNext*/ ctx[3].meta.title + "";
	let t7;
	let t8;
	let img0;
	let img0_src_value;
	let img0_alt_value;
	let a1_href_value;
	let t9;
	let p1;
	let a2;
	let img1;
	let img1_src_value;
	let img1_alt_value;
	let t10;
	let t11_value = /*contentPrev*/ ctx[4].meta.title + "";
	let t11;
	let a2_href_value;
	let t12;
	let a3;
	let img2;
	let img2_src_value;
	let current;
	let each_value = /*content*/ ctx[1].data;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			div0 = element("div");
			nav0 = element("nav");
			ol = element("ol");
			li0 = element("li");
			a0 = element("a");
			t1 = text("Warrior");
			t2 = space();
			li1 = element("li");
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			t6 = space();
			nav1 = element("nav");
			p0 = element("p");
			a1 = element("a");
			t7 = text(t7_value);
			t8 = space();
			img0 = element("img");
			t9 = space();
			p1 = element("p");
			a2 = element("a");
			img1 = element("img");
			t10 = text(" ");
			t11 = text(t11_value);
			t12 = space();
			a3 = element("a");
			img2 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-hl65br\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			nav0 = claim_element(div0_nodes, "NAV", { class: true, "aria-label": true });
			var nav0_nodes = children(nav0);
			ol = claim_element(nav0_nodes, "OL", { class: true });
			var ol_nodes = children(ol);
			li0 = claim_element(ol_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Warrior");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ol_nodes);
			li1 = claim_element(ol_nodes, "LI", { class: true, "aria-current": true });
			var li1_nodes = children(li1);
			t3 = claim_text(li1_nodes, t3_value);
			li1_nodes.forEach(detach_dev);
			ol_nodes.forEach(detach_dev);
			nav0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true, style: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			div2 = claim_element(div3_nodes, "DIV", {
				class: true,
				role: true,
				"aria-valuenow": true,
				"aria-valuemin": true,
				"aria-valuemax": true,
				style: true
			});

			children(div2).forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(div4_nodes);
			nav1 = claim_element(div4_nodes, "NAV", { "aria-label": true });
			var nav1_nodes = children(nav1);
			p0 = claim_element(nav1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			a1 = claim_element(p0_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t7 = claim_text(a1_nodes, t7_value);
			t8 = claim_space(a1_nodes);
			img0 = claim_element(a1_nodes, "IMG", { style: true, src: true, alt: true });
			a1_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t9 = claim_space(nav1_nodes);
			p1 = claim_element(nav1_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			a2 = claim_element(p1_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			img1 = claim_element(a2_nodes, "IMG", { style: true, src: true, alt: true });
			t10 = claim_text(a2_nodes, " ");
			t11 = claim_text(a2_nodes, t11_value);
			a2_nodes.forEach(detach_dev);
			t12 = claim_space(p1_nodes);
			a3 = claim_element(p1_nodes, "A", { href: true, class: true });
			var a3_nodes = children(a3);
			img2 = claim_element(a3_nodes, "IMG", { alt: true, style: true, src: true });
			a3_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			nav1_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "𝗖𝗔𝗧 𝗣𝗘𝗔: Warrior";
			attr_dev(a0, "href", "warrior?chapter=index");
			add_location(a0, file$f, 119, 32, 2777);
			attr_dev(li0, "class", "breadcrumb-item");
			add_location(li0, file$f, 119, 4, 2749);
			attr_dev(li1, "class", "breadcrumb-item active");
			attr_dev(li1, "aria-current", "page");
			add_location(li1, file$f, 120, 4, 2830);
			attr_dev(ol, "class", "breadcrumb bg-dark text-white");
			add_location(ol, file$f, 118, 4, 2702);
			attr_dev(nav0, "class", "mb-5");
			attr_dev(nav0, "aria-label", "breadcrumb");
			add_location(nav0, file$f, 117, 2, 2655);
			attr_dev(div0, "class", "container-fluid text-warning");
			set_style(div0, "visibility", "hidden");
			toggle_class(div0, "visible", /*pageReady*/ ctx[0]);
			add_location(div0, file$f, 115, 0, 2553);
			attr_dev(div1, "class", "container-fluid text-warning py-5");
			set_style(div1, "visibility", "hidden");
			toggle_class(div1, "visible", /*pageReady*/ ctx[0]);
			add_location(div1, file$f, 126, 0, 2939);
			attr_dev(div2, "class", "progress-bar progress-bar-striped progress-bar-animated-x");
			attr_dev(div2, "role", "progressbar");
			attr_dev(div2, "aria-valuenow", /*percent*/ ctx[2]);
			attr_dev(div2, "aria-valuemin", "0");
			attr_dev(div2, "aria-valuemax", "100");
			set_style(div2, "width", /*percent*/ ctx[2] + "%");
			add_location(div2, file$f, 152, 4, 3505);
			attr_dev(div3, "class", "progress bg-dark");
			add_location(div3, file$f, 151, 2, 3470);
			set_style(img0, "width", "1rem");
			set_style(img0, "height", "1rem");
			if (img0.src !== (img0_src_value = "warrior/images/arrow-alt-circle-right.svg")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", img0_alt_value = /*contentNext*/ ctx[3].meta.title);
			add_location(img0, file$f, 158, 122, 3883);
			attr_dev(a1, "href", a1_href_value = "warrior?chapter=" + /*contentNext*/ ctx[3].meta.name);
			attr_dev(a1, "class", "btn btn-lg btn-primary btn-block");
			add_location(a1, file$f, 158, 6, 3767);
			attr_dev(p0, "class", "py-3");
			add_location(p0, file$f, 157, 4, 3744);
			set_style(img1, "width", "1rem");
			set_style(img1, "height", "1rem");
			if (img1.src !== (img1_src_value = "warrior/images/arrow-alt-circle-left.svg")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", img1_alt_value = /*contentPrev*/ ctx[4].meta.title);
			add_location(img1, file$f, 162, 82, 4119);
			attr_dev(a2, "href", a2_href_value = "warrior?chapter=" + /*contentPrev*/ ctx[4].meta.name);
			attr_dev(a2, "class", "btn btn-secondary");
			add_location(a2, file$f, 162, 6, 4043);
			attr_dev(img2, "alt", "Index");
			set_style(img2, "width", "1rem");
			set_style(img2, "height", "1rem");
			if (img2.src !== (img2_src_value = "warrior/images/list-alt.svg")) attr_dev(img2, "src", img2_src_value);
			add_location(img2, file$f, 163, 64, 4335);
			attr_dev(a3, "href", "warrior?chapter=index");
			attr_dev(a3, "class", "btn btn-secondary");
			add_location(a3, file$f, 163, 6, 4277);
			attr_dev(p1, "class", "py-3");
			add_location(p1, file$f, 161, 4, 4020);
			attr_dev(nav1, "aria-label", "Page Navigation");
			add_location(nav1, file$f, 155, 2, 3704);
			attr_dev(div4, "class", "container-fluid text-warning");
			set_style(div4, "visibility", "hidden");
			toggle_class(div4, "visible", /*pageReady*/ ctx[0]);
			add_location(div4, file$f, 147, 0, 3366);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);
			append_dev(div0, nav0);
			append_dev(nav0, ol);
			append_dev(ol, li0);
			append_dev(li0, a0);
			append_dev(a0, t1);
			append_dev(ol, t2);
			append_dev(ol, li1);
			append_dev(li1, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			insert_dev(target, t5, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div4, t6);
			append_dev(div4, nav1);
			append_dev(nav1, p0);
			append_dev(p0, a1);
			append_dev(a1, t7);
			append_dev(a1, t8);
			append_dev(a1, img0);
			append_dev(nav1, t9);
			append_dev(nav1, p1);
			append_dev(p1, a2);
			append_dev(a2, img1);
			append_dev(a2, t10);
			append_dev(a2, t11);
			append_dev(p1, t12);
			append_dev(p1, a3);
			append_dev(a3, img2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*content*/ 2) && t3_value !== (t3_value = /*content*/ ctx[1].meta.title + "")) set_data_dev(t3, t3_value);

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div0, "visible", /*pageReady*/ ctx[0]);
			}

			if (dirty & /*componentLookup, content*/ 34) {
				each_value = /*content*/ ctx[1].data;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$7(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$7(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div1, "visible", /*pageReady*/ ctx[0]);
			}

			if (!current || dirty & /*percent*/ 4) {
				attr_dev(div2, "aria-valuenow", /*percent*/ ctx[2]);
			}

			if (!current || dirty & /*percent*/ 4) {
				set_style(div2, "width", /*percent*/ ctx[2] + "%");
			}

			if ((!current || dirty & /*contentNext*/ 8) && t7_value !== (t7_value = /*contentNext*/ ctx[3].meta.title + "")) set_data_dev(t7, t7_value);

			if (!current || dirty & /*contentNext*/ 8 && img0_alt_value !== (img0_alt_value = /*contentNext*/ ctx[3].meta.title)) {
				attr_dev(img0, "alt", img0_alt_value);
			}

			if (!current || dirty & /*contentNext*/ 8 && a1_href_value !== (a1_href_value = "warrior?chapter=" + /*contentNext*/ ctx[3].meta.name)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (!current || dirty & /*contentPrev*/ 16 && img1_alt_value !== (img1_alt_value = /*contentPrev*/ ctx[4].meta.title)) {
				attr_dev(img1, "alt", img1_alt_value);
			}

			if ((!current || dirty & /*contentPrev*/ 16) && t11_value !== (t11_value = /*contentPrev*/ ctx[4].meta.title + "")) set_data_dev(t11, t11_value);

			if (!current || dirty & /*contentPrev*/ 16 && a2_href_value !== (a2_href_value = "warrior?chapter=" + /*contentPrev*/ ctx[4].meta.name)) {
				attr_dev(a2, "href", a2_href_value);
			}

			if (dirty & /*pageReady*/ 1) {
				toggle_class(div4, "visible", /*pageReady*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$f.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$f($$self, $$props, $$invalidate) {
	const componentLookup = {
		image: Illustration,
		business: Business,
		text: Text,
		youtube: Youtube,
		quote: Quote,
		poem: Poem,
		subtitle: Subtitle,
		link: Link
	};

	const { page } = stores$1();
	let pageReady = false;
	let database = [];
	let chapter = "index";
	let content = { meta: {}, data: [] };
	let percent = 0;
	let contentNext = { meta: {}, data: [] };
	let contentPrev = { meta: {}, data: [] };

	// Calculations
	let currentIndex = null;

	//DEV
	let types = new Set();

	//DEV
	function index() {
		const response = {
			meta: { "name": "index", "title": "Index" },
			data: [
				{
					"type": "text",
					"title": "Table of Contents",
					"text": []
				}
			]
		};

		database.forEach(function (item) {
			response.data[0].text.push(`<a href="warrior?chapter=${item.meta.name}">${item.meta.title}</a>`);
		});

		return response;
	}

	onMount(async function () {
		const res = await fetch("book.json");
		const json = await res.json();
		$$invalidate(0, pageReady = true);
		database = json;

		page.subscribe(value => {
			$$invalidate(1, content = database.find(content => content.meta.name == value.query.chapter) || index());
			currentIndex = database.indexOf(content);
			console.log("currentIndex", currentIndex);
			let prevIndex = currentIndex - 1;
			if (prevIndex < 0) prevIndex = database.length - 1;
			let nextIndex = currentIndex + 1;
			if (nextIndex > database.length - 1) nextIndex = 0;
			$$invalidate(3, contentNext = database[nextIndex]);
			$$invalidate(4, contentPrev = database[prevIndex]);
			console.log("prevIndex", prevIndex);
			console.log("nextIndex", nextIndex);
			$$invalidate(2, percent = calculatePercent(currentIndex + 1, database.length) * 100);
		});
	}); //database.forEach(chapter => chapter.data.forEach(item=>types.add(item.type)))
	// database.forEach(chapter => chapter.data.forEach(item=>Object.keys(item).forEach(item=>types.add(item)) ))
	// console.log(Array.from(types), types);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("pageReady" in $$props) $$invalidate(0, pageReady = $$props.pageReady);
		if ("database" in $$props) database = $$props.database;
		if ("chapter" in $$props) chapter = $$props.chapter;
		if ("content" in $$props) $$invalidate(1, content = $$props.content);
		if ("percent" in $$props) $$invalidate(2, percent = $$props.percent);
		if ("contentNext" in $$props) $$invalidate(3, contentNext = $$props.contentNext);
		if ("contentPrev" in $$props) $$invalidate(4, contentPrev = $$props.contentPrev);
		if ("currentIndex" in $$props) currentIndex = $$props.currentIndex;
		if ("types" in $$props) types = $$props.types;
	};

	return [pageReady, content, percent, contentNext, contentPrev, componentLookup];
}

class Warrior extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Warrior",
			options,
			id: create_fragment$f.name
		});
	}
}

export default Warrior;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
