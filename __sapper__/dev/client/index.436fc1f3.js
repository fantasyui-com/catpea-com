import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, a as space, t as text, c as claim_element, b as children, g as claim_space, h as claim_text, f as detach_dev, j as attr_dev, k as add_location, o as insert_dev, p as append_dev, n as noop, r as destroy_each } from './index.c6eff7be.js';

/* src/routes/index.svelte generated by Svelte v3.16.7 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (78:4) {#each posts as post}
function create_each_block(ctx) {
	let div2;
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div0;
	let h5;
	let t1_value = /*post*/ ctx[6].title + "";
	let t1;
	let t2;
	let p;
	let t3_value = /*post*/ ctx[6].text + "";
	let t3;
	let t4;

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			h5 = element("h5");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = text(t3_value);
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, class: true, alt: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h5 = claim_element(div0_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t1 = claim_text(h5_nodes, t1_value);
			h5_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*post*/ ctx[6].image)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "card-img-top");
			attr_dev(img, "alt", img_alt_value = /*post*/ ctx[6].title);
			add_location(img, file, 81, 10, 2388);
			attr_dev(h5, "class", "card-title");
			add_location(h5, file, 83, 12, 2499);
			attr_dev(p, "class", "card-text");
			add_location(p, file, 84, 12, 2552);
			attr_dev(div0, "class", "card-body");
			add_location(div0, file, 82, 10, 2463);
			attr_dev(div1, "class", "card bg-dark text-white");
			add_location(div1, file, 80, 8, 2340);
			attr_dev(div2, "class", "col mb-4");
			add_location(div2, file, 79, 6, 2309);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, h5);
			append_dev(h5, t1);
			append_dev(div0, t2);
			append_dev(div0, p);
			append_dev(p, t3);
			append_dev(div2, t4);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(78:4) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let div1;
	let div0;
	let each_value = /*posts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t = space();
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Cat Pea";
			attr_dev(div0, "class", "row row-cols-1 row-cols-md-2 row-cols-lg-4");
			add_location(div0, file, 74, 4, 2217);
			attr_dev(div1, "class", "container-fluid");
			add_location(div1, file, 71, 0, 2181);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function rnd(min, max) {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min;
}

function instance($$self) {
	const date = new Date();
	const year = date.getFullYear();

	const names = [
		["Catpea"],
		["Advanced"],
		["Technological"],
		["Product"],
		["Emergence"],
		["Architecture"]
	];

	let name = "";

	const makeName = function () {
		name = "";

		for (let potential of names) {
			console.log(names, potential);
			let randomIndex = rnd(0, potential.length - 1);
			let chosen = potential[randomIndex];
			name = name + " " + chosen;
		}
	};

	makeName();
	setInterval(makeName, 1000 * 60);

	const posts = [
		{
			kind: "youtube",
			title: "Laniakea: Our home supercluster",
			text: "A team based in Hawaii has come up with a new technique that maps the Universe according to the flow of galaxies across space.",
			url: "https://www.youtube.com/watch?v=rENyyRwxpHo",
			image: "https://img.youtube.com/vi/rENyyRwxpHo/0.jpg"
		},
		{
			kind: "youtube",
			title: "Oumuamua",
			text: "The story of 'Oumuamua, the first visitor from another star system.",
			url: "https://www.youtube.com/watch?v=rfi3w9Bzwik",
			image: "https://img.youtube.com/vi/rfi3w9Bzwik/0.jpg"
		},
		{
			kind: "youtube",
			title: "",
			text: "",
			url: "https://www.youtube.com/watch?v=gypAjPp6eps",
			image: "https://img.youtube.com/vi/gypAjPp6eps/0.jpg"
		},
		{
			kind: "youtube",
			title: "",
			text: "",
			url: "https://www.youtube.com/watch?v=yqc9zX04DXs",
			image: "https://img.youtube.com/vi/yqc9zX04DXs/0.jpg"
		},
		{
			kind: "youtube",
			title: "",
			text: "",
			url: "https://www.youtube.com/watch?v=1-OdJmAefOY",
			image: "https://img.youtube.com/vi/1-OdJmAefOY/0.jpg"
		},
		{
			kind: "youtube",
			title: "",
			text: "",
			url: "https://www.youtube.com/watch?v=P1ww1IXRfTA",
			image: "https://img.youtube.com/vi/P1ww1IXRfTA/0.jpg"
		},
		{
			kind: "youtube",
			title: "",
			text: "",
			url: "https://www.youtube.com/watch?v=UuRxRGR3VpM",
			image: "https://img.youtube.com/vi/UuRxRGR3VpM/0.jpg"
		},
		{
			kind: "youtube",
			title: "",
			text: "",
			url: "https://www.youtube.com/watch?v=YnU6vMVAdAE",
			image: "https://img.youtube.com/vi/YnU6vMVAdAE/0.jpg"
		}
	];

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("name" in $$props) name = $$props.name;
	};

	return [posts];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNDM2ZmMxZjMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cbmNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblxuZnVuY3Rpb24gcm5kKG1pbiwgbWF4KSB7XG4gIG1pbiA9IE1hdGguY2VpbChtaW4pO1xuICBtYXggPSBNYXRoLmZsb29yKG1heCk7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyAvL1RoZSBtYXhpbXVtIGlzIGluY2x1c2l2ZSBhbmQgdGhlIG1pbmltdW0gaXMgaW5jbHVzaXZlXG59XG5cbmNvbnN0IG5hbWVzID0gW1xuICBbJ0NhdHBlYSddLFxuICBbJ0FkdmFuY2VkJ10sXG4gIFsnVGVjaG5vbG9naWNhbCddLFxuICBbJ1Byb2R1Y3QnXSxcbiAgWydFbWVyZ2VuY2UnXSxcbiAgWydBcmNoaXRlY3R1cmUnXVxuXTtcbmxldCBuYW1lID0gXCJcIjtcblxuY29uc3QgbWFrZU5hbWUgPSBmdW5jdGlvbigpe1xubmFtZSA9IFwiXCI7XG5mb3IgKGxldCBwb3RlbnRpYWwgb2YgbmFtZXMpe1xuICBjb25zb2xlLmxvZyhuYW1lcywgcG90ZW50aWFsKTtcbiAgbGV0IHJhbmRvbUluZGV4ID0gcm5kKDAscG90ZW50aWFsLmxlbmd0aC0xKVxuICBsZXQgY2hvc2VuID0gcG90ZW50aWFsW3JhbmRvbUluZGV4XTtcbiAgbmFtZSA9IG5hbWUgKyAnICcgKyBjaG9zZW47XG5cbn1cbn07XG5cbm1ha2VOYW1lKCk7IHNldEludGVydmFsKG1ha2VOYW1lLCAxMDAwKjYwKTtcblxuXG5cblxuY29uc3QgcG9zdHMgPSBbXG5cbiAge2tpbmQ6XCJ5b3V0dWJlXCIsIHRpdGxlOlwiTGFuaWFrZWE6IE91ciBob21lIHN1cGVyY2x1c3RlclwiLCB0ZXh0OlwiQSB0ZWFtIGJhc2VkIGluIEhhd2FpaSBoYXMgY29tZSB1cCB3aXRoIGEgbmV3IHRlY2huaXF1ZSB0aGF0IG1hcHMgdGhlIFVuaXZlcnNlIGFjY29yZGluZyB0byB0aGUgZmxvdyBvZiBnYWxheGllcyBhY3Jvc3Mgc3BhY2UuXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ckVOeXlSd3hwSG9cIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9yRU55eVJ3eHBIby8wLmpwZ1wiIH0sXG4gIHtraW5kOlwieW91dHViZVwiLCB0aXRsZTpcIk91bXVhbXVhXCIsIHRleHQ6XCJUaGUgc3Rvcnkgb2YgJ091bXVhbXVhLCB0aGUgZmlyc3QgdmlzaXRvciBmcm9tIGFub3RoZXIgc3RhciBzeXN0ZW0uXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9cmZpM3c5Qnp3aWtcIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9yZmkzdzlCendpay8wLmpwZ1wiIH0sXG4gIHtraW5kOlwieW91dHViZVwiLCB0aXRsZTpcIlwiLCB0ZXh0OlwiXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Z3lwQWpQcDZlcHNcIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9neXBBalBwNmVwcy8wLmpwZ1wiIH0sXG4gIHtraW5kOlwieW91dHViZVwiLCB0aXRsZTpcIlwiLCB0ZXh0OlwiXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9eXFjOXpYMDREWHNcIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS95cWM5elgwNERYcy8wLmpwZ1wiIH0sXG4gIHtraW5kOlwieW91dHViZVwiLCB0aXRsZTpcIlwiLCB0ZXh0OlwiXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9MS1PZEptQWVmT1lcIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS8xLU9kSm1BZWZPWS8wLmpwZ1wiIH0sXG4gIHtraW5kOlwieW91dHViZVwiLCB0aXRsZTpcIlwiLCB0ZXh0OlwiXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UDF3dzFJWFJmVEFcIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9QMXd3MUlYUmZUQS8wLmpwZ1wiIH0sXG4gIHtraW5kOlwieW91dHViZVwiLCB0aXRsZTpcIlwiLCB0ZXh0OlwiXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VXVSeFJHUjNWcE1cIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9VdVJ4UkdSM1ZwTS8wLmpwZ1wiIH0sXG4gIHtraW5kOlwieW91dHViZVwiLCB0aXRsZTpcIlwiLCB0ZXh0OlwiXCIsIHVybDpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WW5VNnZNVkFkQUVcIiwgaW1hZ2U6XCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9ZblU2dk1WQWRBRS8wLmpwZ1wiIH0sXG5cbl07XG5cblxuXG5cblxuXG5cbjwvc2NyaXB0PlxuPHN0eWxlPlxuXG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5DYXQgUGVhPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cblxuXG5cblxuXG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIj5cblxuXG4gICAgPGRpdiBjbGFzcz1cInJvdyByb3ctY29scy0xIHJvdy1jb2xzLW1kLTIgcm93LWNvbHMtbGctNFwiPlxuXG5cbiAgICB7I2VhY2ggcG9zdHMgYXMgcG9zdH1cblxuICAgICAgPGRpdiBjbGFzcz1cImNvbCBtYi00XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGJnLWRhcmsgdGV4dC13aGl0ZVwiPlxuICAgICAgICAgIDxpbWcgc3JjPVwie3Bvc3QuaW1hZ2V9XCIgY2xhc3M9XCJjYXJkLWltZy10b3BcIiBhbHQ9XCJ7cG9zdC50aXRsZX1cIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICA8aDUgY2xhc3M9XCJjYXJkLXRpdGxlXCI+e3Bvc3QudGl0bGV9PC9oNT5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwiY2FyZC10ZXh0XCI+e3Bvc3QudGV4dH08L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICB7L2VhY2h9XG5cbiAgICA8L2Rpdj5cblxuXG5cblxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFtRm9DLEdBQUksSUFBQyxLQUFLOzs7O3lCQUNaLEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2Q0FIdEIsR0FBSSxJQUFDLEtBQUs7O2lEQUE4QixHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBSjVELEdBQUs7OztnQ0FBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQUFDLEdBQUs7OzsrQkFBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBeEVELEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRztDQUNuQixHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO0NBQ25CLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRzs7OztPQU5wRCxJQUFJLE9BQU8sSUFBSTtPQUNmLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVzs7T0FRdkIsS0FBSztHQUNSLFFBQVE7R0FDUixVQUFVO0dBQ1YsZUFBZTtHQUNmLFNBQVM7R0FDVCxXQUFXO0dBQ1gsY0FBYzs7O0tBRWIsSUFBSSxHQUFHLEVBQUU7O09BRVAsUUFBUTtFQUNkLElBQUksR0FBRyxFQUFFOztXQUNBLFNBQVMsSUFBSSxLQUFLO0dBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFNBQVM7T0FDeEIsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLE1BQU0sR0FBQyxDQUFDO09BQ3RDLE1BQU0sR0FBRyxTQUFTLENBQUMsV0FBVztHQUNsQyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNOzs7O0NBSzVCLFFBQVE7Q0FBSSxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksR0FBQyxFQUFFOztPQUtuQyxLQUFLOztHQUVSLElBQUksRUFBQyxTQUFTO0dBQUUsS0FBSyxFQUFDLGlDQUFpQztHQUFFLElBQUksRUFBQyxnSUFBZ0k7R0FBRSxHQUFHLEVBQUMsNkNBQTZDO0dBQUUsS0FBSyxFQUFDLDhDQUE4Qzs7O0dBQ3ZTLElBQUksRUFBQyxTQUFTO0dBQUUsS0FBSyxFQUFDLFVBQVU7R0FBRSxJQUFJLEVBQUMscUVBQXFFO0dBQUUsR0FBRyxFQUFDLDZDQUE2QztHQUFFLEtBQUssRUFBQyw4Q0FBOEM7OztHQUNyTixJQUFJLEVBQUMsU0FBUztHQUFFLEtBQUssRUFBQyxFQUFFO0dBQUUsSUFBSSxFQUFDLEVBQUU7R0FBRSxHQUFHLEVBQUMsNkNBQTZDO0dBQUUsS0FBSyxFQUFDLDhDQUE4Qzs7O0dBQzFJLElBQUksRUFBQyxTQUFTO0dBQUUsS0FBSyxFQUFDLEVBQUU7R0FBRSxJQUFJLEVBQUMsRUFBRTtHQUFFLEdBQUcsRUFBQyw2Q0FBNkM7R0FBRSxLQUFLLEVBQUMsOENBQThDOzs7R0FDMUksSUFBSSxFQUFDLFNBQVM7R0FBRSxLQUFLLEVBQUMsRUFBRTtHQUFFLElBQUksRUFBQyxFQUFFO0dBQUUsR0FBRyxFQUFDLDZDQUE2QztHQUFFLEtBQUssRUFBQyw4Q0FBOEM7OztHQUMxSSxJQUFJLEVBQUMsU0FBUztHQUFFLEtBQUssRUFBQyxFQUFFO0dBQUUsSUFBSSxFQUFDLEVBQUU7R0FBRSxHQUFHLEVBQUMsNkNBQTZDO0dBQUUsS0FBSyxFQUFDLDhDQUE4Qzs7O0dBQzFJLElBQUksRUFBQyxTQUFTO0dBQUUsS0FBSyxFQUFDLEVBQUU7R0FBRSxJQUFJLEVBQUMsRUFBRTtHQUFFLEdBQUcsRUFBQyw2Q0FBNkM7R0FBRSxLQUFLLEVBQUMsOENBQThDOzs7R0FDMUksSUFBSSxFQUFDLFNBQVM7R0FBRSxLQUFLLEVBQUMsRUFBRTtHQUFFLElBQUksRUFBQyxFQUFFO0dBQUUsR0FBRyxFQUFDLDZDQUE2QztHQUFFLEtBQUssRUFBQyw4Q0FBOEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
